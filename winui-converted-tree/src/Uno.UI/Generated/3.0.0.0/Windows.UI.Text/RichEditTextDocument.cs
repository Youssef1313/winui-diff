// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.UI.Text
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class RichEditTextDocument : global::Windows.UI.Text.ITextDocument
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal RichEditTextDocument()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.UI.Text.CaretType global::Windows.UI.Text.ITextDocument.CaretType
		{
			get
			{
				throw new global::System.NotImplementedException("The member CaretType RichEditTextDocument.CaretType is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=CaretType%20RichEditTextDocument.CaretType");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Text.RichEditTextDocument", "CaretType RichEditTextDocument.CaretType");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		float global::Windows.UI.Text.ITextDocument.DefaultTabStop
		{
			get
			{
				throw new global::System.NotImplementedException("The member float RichEditTextDocument.DefaultTabStop is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=float%20RichEditTextDocument.DefaultTabStop");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Text.RichEditTextDocument", "float RichEditTextDocument.DefaultTabStop");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.UI.Text.ITextSelection global::Windows.UI.Text.ITextDocument.Selection
		{
			get
			{
				throw new global::System.NotImplementedException("The member ITextSelection RichEditTextDocument.Selection is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ITextSelection%20RichEditTextDocument.Selection");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		uint global::Windows.UI.Text.ITextDocument.UndoLimit
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint RichEditTextDocument.UndoLimit is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20RichEditTextDocument.UndoLimit");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Text.RichEditTextDocument", "uint RichEditTextDocument.UndoLimit");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool AlignmentIncludesTrailingWhitespace
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool RichEditTextDocument.AlignmentIncludesTrailingWhitespace is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20RichEditTextDocument.AlignmentIncludesTrailingWhitespace");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Text.RichEditTextDocument", "bool RichEditTextDocument.AlignmentIncludesTrailingWhitespace");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Text.CaretType CaretType
		{
			get
			{
				throw new global::System.NotImplementedException("The member CaretType RichEditTextDocument.CaretType is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=CaretType%20RichEditTextDocument.CaretType");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Text.RichEditTextDocument", "CaretType RichEditTextDocument.CaretType");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public float DefaultTabStop
		{
			get
			{
				throw new global::System.NotImplementedException("The member float RichEditTextDocument.DefaultTabStop is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=float%20RichEditTextDocument.DefaultTabStop");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Text.RichEditTextDocument", "float RichEditTextDocument.DefaultTabStop");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IgnoreTrailingCharacterSpacing
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool RichEditTextDocument.IgnoreTrailingCharacterSpacing is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20RichEditTextDocument.IgnoreTrailingCharacterSpacing");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Text.RichEditTextDocument", "bool RichEditTextDocument.IgnoreTrailingCharacterSpacing");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Text.ITextSelection Selection
		{
			get
			{
				throw new global::System.NotImplementedException("The member ITextSelection RichEditTextDocument.Selection is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ITextSelection%20RichEditTextDocument.Selection");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint UndoLimit
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint RichEditTextDocument.UndoLimit is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20RichEditTextDocument.UndoLimit");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Text.RichEditTextDocument", "uint RichEditTextDocument.UndoLimit");
			}
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.FromAbi(nint)
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.operator ==(Windows.UI.Text.RichEditTextDocument, Windows.UI.Text.RichEditTextDocument)
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.operator !=(Windows.UI.Text.RichEditTextDocument, Windows.UI.Text.RichEditTextDocument)
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Equals(Windows.UI.Text.RichEditTextDocument)
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Equals(object)
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.GetHashCode()
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void ClearUndoRedoHistory()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Text.RichEditTextDocument", "void RichEditTextDocument.ClearUndoRedoHistory()");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanCopy()
		{
			throw new global::System.NotImplementedException("The member bool RichEditTextDocument.CanCopy() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20RichEditTextDocument.CanCopy%28%29");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.CanCopy()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanPaste()
		{
			throw new global::System.NotImplementedException("The member bool RichEditTextDocument.CanPaste() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20RichEditTextDocument.CanPaste%28%29");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.CanPaste()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanRedo()
		{
			throw new global::System.NotImplementedException("The member bool RichEditTextDocument.CanRedo() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20RichEditTextDocument.CanRedo%28%29");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.CanRedo()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanUndo()
		{
			throw new global::System.NotImplementedException("The member bool RichEditTextDocument.CanUndo() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20RichEditTextDocument.CanUndo%28%29");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.CanUndo()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int ApplyDisplayUpdates()
		{
			throw new global::System.NotImplementedException("The member int RichEditTextDocument.ApplyDisplayUpdates() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20RichEditTextDocument.ApplyDisplayUpdates%28%29");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.ApplyDisplayUpdates()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int BatchDisplayUpdates()
		{
			throw new global::System.NotImplementedException("The member int RichEditTextDocument.BatchDisplayUpdates() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20RichEditTextDocument.BatchDisplayUpdates%28%29");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.BatchDisplayUpdates()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void BeginUndoGroup()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Text.RichEditTextDocument", "void RichEditTextDocument.BeginUndoGroup()");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.BeginUndoGroup()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void EndUndoGroup()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Text.RichEditTextDocument", "void RichEditTextDocument.EndUndoGroup()");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.EndUndoGroup()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Text.ITextCharacterFormat GetDefaultCharacterFormat()
		{
			throw new global::System.NotImplementedException("The member ITextCharacterFormat RichEditTextDocument.GetDefaultCharacterFormat() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ITextCharacterFormat%20RichEditTextDocument.GetDefaultCharacterFormat%28%29");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.GetDefaultCharacterFormat()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Text.ITextParagraphFormat GetDefaultParagraphFormat()
		{
			throw new global::System.NotImplementedException("The member ITextParagraphFormat RichEditTextDocument.GetDefaultParagraphFormat() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ITextParagraphFormat%20RichEditTextDocument.GetDefaultParagraphFormat%28%29");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.GetDefaultParagraphFormat()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Text.ITextRange GetRange(int startPosition, int endPosition)
		{
			throw new global::System.NotImplementedException("The member ITextRange RichEditTextDocument.GetRange(int startPosition, int endPosition) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ITextRange%20RichEditTextDocument.GetRange%28int%20startPosition%2C%20int%20endPosition%29");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.GetRange(int, int)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Text.ITextRange GetRangeFromPoint(global::Windows.Foundation.Point point, global::Windows.UI.Text.PointOptions options)
		{
			throw new global::System.NotImplementedException("The member ITextRange RichEditTextDocument.GetRangeFromPoint(Point point, PointOptions options) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ITextRange%20RichEditTextDocument.GetRangeFromPoint%28Point%20point%2C%20PointOptions%20options%29");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.GetRangeFromPoint(Windows.Foundation.Point, Windows.UI.Text.PointOptions)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void GetText(global::Windows.UI.Text.TextGetOptions options, out string value)
		{
			throw new global::System.NotImplementedException("The member void RichEditTextDocument.GetText(TextGetOptions options, out string value) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=void%20RichEditTextDocument.GetText%28TextGetOptions%20options%2C%20out%20string%20value%29");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.GetText(Windows.UI.Text.TextGetOptions, out string)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void LoadFromStream(global::Windows.UI.Text.TextSetOptions options, global::Windows.Storage.Streams.IRandomAccessStream value)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Text.RichEditTextDocument", "void RichEditTextDocument.LoadFromStream(TextSetOptions options, IRandomAccessStream value)");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.LoadFromStream(Windows.UI.Text.TextSetOptions, Windows.Storage.Streams.IRandomAccessStream)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Redo()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Text.RichEditTextDocument", "void RichEditTextDocument.Redo()");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.Redo()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SaveToStream(global::Windows.UI.Text.TextGetOptions options, global::Windows.Storage.Streams.IRandomAccessStream value)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Text.RichEditTextDocument", "void RichEditTextDocument.SaveToStream(TextGetOptions options, IRandomAccessStream value)");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.SaveToStream(Windows.UI.Text.TextGetOptions, Windows.Storage.Streams.IRandomAccessStream)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetDefaultCharacterFormat(global::Windows.UI.Text.ITextCharacterFormat value)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Text.RichEditTextDocument", "void RichEditTextDocument.SetDefaultCharacterFormat(ITextCharacterFormat value)");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.SetDefaultCharacterFormat(Windows.UI.Text.ITextCharacterFormat)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetDefaultParagraphFormat(global::Windows.UI.Text.ITextParagraphFormat value)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Text.RichEditTextDocument", "void RichEditTextDocument.SetDefaultParagraphFormat(ITextParagraphFormat value)");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.SetDefaultParagraphFormat(Windows.UI.Text.ITextParagraphFormat)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetText(global::Windows.UI.Text.TextSetOptions options, string value)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Text.RichEditTextDocument", "void RichEditTextDocument.SetText(TextSetOptions options, string value)");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.SetText(Windows.UI.Text.TextSetOptions, string)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Undo()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Text.RichEditTextDocument", "void RichEditTextDocument.Undo()");
		}
#endif
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.Undo()
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.CaretType.get
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.CaretType.set
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.DefaultTabStop.get
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.DefaultTabStop.set
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.Selection.get
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.UndoLimit.get
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Windows.UI.Text.ITextDocument.UndoLimit.set
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.AlignmentIncludesTrailingWhitespace.get
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.AlignmentIncludesTrailingWhitespace.set
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.CaretType.get
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.CaretType.set
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.DefaultTabStop.get
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.DefaultTabStop.set
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.IgnoreTrailingCharacterSpacing.get
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.IgnoreTrailingCharacterSpacing.set
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.Selection.get
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.UndoLimit.get
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.UndoLimit.set
		// Forced skipping of method Windows.UI.Text.RichEditTextDocument.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
		// Processing: Windows.UI.Text.ITextDocument
	}
}
