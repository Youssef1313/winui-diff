// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Microsoft.UI.Xaml.Documents
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class TextHighlighter
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty BackgroundProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(Background), typeof(global::Microsoft.UI.Xaml.Media.Brush),
			typeof(global::Microsoft.UI.Xaml.Documents.TextHighlighter),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.Media.Brush)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty ForegroundProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(Foreground), typeof(global::Microsoft.UI.Xaml.Media.Brush),
			typeof(global::Microsoft.UI.Xaml.Documents.TextHighlighter),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.Media.Brush)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.Media.Brush Background
		{
			get
			{
				return (global::Microsoft.UI.Xaml.Media.Brush)this.GetValue(BackgroundProperty);
			}
			set
			{
				this.SetValue(BackgroundProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.Media.Brush Foreground
		{
			get
			{
				return (global::Microsoft.UI.Xaml.Media.Brush)this.GetValue(ForegroundProperty);
			}
			set
			{
				this.SetValue(ForegroundProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Documents.TextRange> Ranges
		{
			get
			{
				throw new global::System.NotImplementedException("The member IList<TextRange> TextHighlighter.Ranges is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IList%3CTextRange%3E%20TextHighlighter.Ranges");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public TextHighlighter()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Documents.TextHighlighter", "TextHighlighter.TextHighlighter()");
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.TextHighlighter()
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.As<I>()
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.BackgroundProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.ForegroundProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.FromAbi(nint)
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.TextHighlighter(WinRT.IObjectReference)
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.operator ==(Microsoft.UI.Xaml.Documents.TextHighlighter, Microsoft.UI.Xaml.Documents.TextHighlighter)
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.operator !=(Microsoft.UI.Xaml.Documents.TextHighlighter, Microsoft.UI.Xaml.Documents.TextHighlighter)
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.Equals(Microsoft.UI.Xaml.Documents.TextHighlighter)
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.Equals(object)
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.GetHashCode()
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.TextHighlighter(WinRT.DerivedComposed)
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.Background.get
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.Background.set
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.Foreground.get
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.Foreground.set
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.Ranges.get
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.IsOverridableInterface(System.Guid)
		// Forced skipping of method Microsoft.UI.Xaml.Documents.TextHighlighter.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
