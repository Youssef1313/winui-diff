// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Microsoft.UI.Xaml
{
#if false || false || false || false || false || false || false
	[global::Uno.NotImplemented]
#endif
	public partial class EffectiveViewportChangedEventArgs
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double BringIntoViewDistanceX
		{
			get
			{
				throw new global::System.NotImplementedException("The member double EffectiveViewportChangedEventArgs.BringIntoViewDistanceX is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20EffectiveViewportChangedEventArgs.BringIntoViewDistanceX");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double BringIntoViewDistanceY
		{
			get
			{
				throw new global::System.NotImplementedException("The member double EffectiveViewportChangedEventArgs.BringIntoViewDistanceY is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20EffectiveViewportChangedEventArgs.BringIntoViewDistanceY");
			}
		}
#endif
		// Skipping already declared property EffectiveViewport
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Rect MaxViewport
		{
			get
			{
				throw new global::System.NotImplementedException("The member Rect EffectiveViewportChangedEventArgs.MaxViewport is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Rect%20EffectiveViewportChangedEventArgs.MaxViewport");
			}
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs.FromAbi(nint)
		// Forced skipping of method Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs.operator ==(Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs, Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs)
		// Forced skipping of method Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs.operator !=(Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs, Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs)
		// Forced skipping of method Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs.Equals(Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs)
		// Forced skipping of method Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs.Equals(object)
		// Forced skipping of method Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs.GetHashCode()
		// Forced skipping of method Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs.BringIntoViewDistanceX.get
		// Forced skipping of method Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs.BringIntoViewDistanceY.get
		// Forced skipping of method Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs.EffectiveViewport.get
		// Forced skipping of method Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs.MaxViewport.get
		// Forced skipping of method Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
