// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Microsoft.UI.Xaml.Controls
{
#if false || false || false || false || false || false || false
	[global::Uno.NotImplemented]
#endif
	public partial class VirtualizingPanel : global::Microsoft.UI.Xaml.Controls.Panel
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.Controls.ItemContainerGenerator ItemContainerGenerator
		{
			get
			{
				throw new global::System.NotImplementedException("The member ItemContainerGenerator VirtualizingPanel.ItemContainerGenerator is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ItemContainerGenerator%20VirtualizingPanel.ItemContainerGenerator");
			}
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.Controls.VirtualizingPanel.FromAbi(nint)
		// Forced skipping of method Microsoft.UI.Xaml.Controls.VirtualizingPanel.VirtualizingPanel(WinRT.IObjectReference)
		// Forced skipping of method Microsoft.UI.Xaml.Controls.VirtualizingPanel.operator ==(Microsoft.UI.Xaml.Controls.VirtualizingPanel, Microsoft.UI.Xaml.Controls.VirtualizingPanel)
		// Forced skipping of method Microsoft.UI.Xaml.Controls.VirtualizingPanel.operator !=(Microsoft.UI.Xaml.Controls.VirtualizingPanel, Microsoft.UI.Xaml.Controls.VirtualizingPanel)
		// Forced skipping of method Microsoft.UI.Xaml.Controls.VirtualizingPanel.Equals(Microsoft.UI.Xaml.Controls.VirtualizingPanel)
		// Forced skipping of method Microsoft.UI.Xaml.Controls.VirtualizingPanel.Equals(object)
		// Forced skipping of method Microsoft.UI.Xaml.Controls.VirtualizingPanel.GetHashCode()
		// Forced skipping of method Microsoft.UI.Xaml.Controls.VirtualizingPanel.VirtualizingPanel(WinRT.DerivedComposed)
		// Forced skipping of method Microsoft.UI.Xaml.Controls.VirtualizingPanel.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.VirtualizingPanel.WinRT.IWinRTObject.NativeObject.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		protected void AddInternalChild(global::Microsoft.UI.Xaml.UIElement child)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.VirtualizingPanel", "void VirtualizingPanel.AddInternalChild(UIElement child)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		protected void InsertInternalChild(int index, global::Microsoft.UI.Xaml.UIElement child)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.VirtualizingPanel", "void VirtualizingPanel.InsertInternalChild(int index, UIElement child)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		protected void RemoveInternalChildRange(int index, int range)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.VirtualizingPanel", "void VirtualizingPanel.RemoveInternalChildRange(int index, int range)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		protected virtual void OnItemsChanged(object sender, global::Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs args)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.VirtualizingPanel", "void VirtualizingPanel.OnItemsChanged(object sender, ItemsChangedEventArgs args)");
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.Controls.VirtualizingPanel.Microsoft.UI.Xaml.Controls.IVirtualizingPanelOverrides.OnItemsChanged(object, Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		protected virtual void OnClearChildren()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.VirtualizingPanel", "void VirtualizingPanel.OnClearChildren()");
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.Controls.VirtualizingPanel.Microsoft.UI.Xaml.Controls.IVirtualizingPanelOverrides.OnClearChildren()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		protected virtual void BringIndexIntoView(int index)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.VirtualizingPanel", "void VirtualizingPanel.BringIndexIntoView(int index)");
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.Controls.VirtualizingPanel.Microsoft.UI.Xaml.Controls.IVirtualizingPanelOverrides.BringIndexIntoView(int)
		// Forced skipping of method Microsoft.UI.Xaml.Controls.VirtualizingPanel.ItemContainerGenerator.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.VirtualizingPanel.IsOverridableInterface(System.Guid)
		// Forced skipping of method Microsoft.UI.Xaml.Controls.VirtualizingPanel.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
