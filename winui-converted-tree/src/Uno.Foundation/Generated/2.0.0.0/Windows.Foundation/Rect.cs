// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Foundation
{
#if false || false || false || false || false || false || false
	[global::Uno.NotImplemented]
#endif
	public partial struct Rect
	{
		// Skipping already declared property X
		// Skipping already declared property Y
		// Skipping already declared property Width
		// Skipping already declared property Height
		// Skipping already declared property Left
		// Skipping already declared property Top
		// Skipping already declared property Right
		// Skipping already declared property Bottom
		// Skipping already declared property Empty
		// Skipping already declared property IsEmpty
		// Forced skipping of method Windows.Foundation.Rect.Rect()
		// Skipping already declared method Windows.Foundation.Rect.Rect(float, float, float, float)
		// Forced skipping of method Windows.Foundation.Rect.Rect(float, float, float, float)
		// Skipping already declared method Windows.Foundation.Rect.Rect(double, double, double, double)
		// Forced skipping of method Windows.Foundation.Rect.Rect(double, double, double, double)
		// Skipping already declared method Windows.Foundation.Rect.Rect(Windows.Foundation.Point, Windows.Foundation.Point)
		// Forced skipping of method Windows.Foundation.Rect.Rect(Windows.Foundation.Point, Windows.Foundation.Point)
		// Skipping already declared method Windows.Foundation.Rect.Rect(Windows.Foundation.Point, Windows.Foundation.Size)
		// Forced skipping of method Windows.Foundation.Rect.Rect(Windows.Foundation.Point, Windows.Foundation.Size)
		// Forced skipping of method Windows.Foundation.Rect.X.get
		// Forced skipping of method Windows.Foundation.Rect.X.set
		// Forced skipping of method Windows.Foundation.Rect.Y.get
		// Forced skipping of method Windows.Foundation.Rect.Y.set
		// Forced skipping of method Windows.Foundation.Rect.Width.get
		// Forced skipping of method Windows.Foundation.Rect.Width.set
		// Forced skipping of method Windows.Foundation.Rect.Height.get
		// Forced skipping of method Windows.Foundation.Rect.Height.set
		// Forced skipping of method Windows.Foundation.Rect.Left.get
		// Forced skipping of method Windows.Foundation.Rect.Top.get
		// Forced skipping of method Windows.Foundation.Rect.Right.get
		// Forced skipping of method Windows.Foundation.Rect.Bottom.get
		// Forced skipping of method Windows.Foundation.Rect.Empty.get
		// Forced skipping of method Windows.Foundation.Rect.IsEmpty.get
		// Skipping already declared method Windows.Foundation.Rect.Contains(Windows.Foundation.Point)
		// Skipping already declared method Windows.Foundation.Rect.Intersect(Windows.Foundation.Rect)
		// Skipping already declared method Windows.Foundation.Rect.Union(Windows.Foundation.Rect)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Union(global::Windows.Foundation.Point point)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Foundation.Rect", "void Rect.Union(Point point)");
		}
#endif
		// Skipping already declared method Windows.Foundation.Rect.ToString()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string ToString(global::System.IFormatProvider provider)
		{
			throw new global::System.NotImplementedException("The member string Rect.ToString(IFormatProvider provider) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20Rect.ToString%28IFormatProvider%20provider%29");
		}
#endif
		// Forced skipping of method Windows.Foundation.Rect.System.IFormattable.ToString(string, System.IFormatProvider)
		// Forced skipping of method Windows.Foundation.Rect.Equals(Windows.Foundation.Rect)
		// Forced skipping of method Windows.Foundation.Rect.operator ==(Windows.Foundation.Rect, Windows.Foundation.Rect)
		// Forced skipping of method Windows.Foundation.Rect.operator !=(Windows.Foundation.Rect, Windows.Foundation.Rect)
		// Forced skipping of method Windows.Foundation.Rect.Equals(object)
		// Forced skipping of method Windows.Foundation.Rect.GetHashCode()
	}
}
