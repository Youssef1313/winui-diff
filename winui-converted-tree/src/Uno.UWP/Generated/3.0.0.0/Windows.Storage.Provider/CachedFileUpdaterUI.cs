// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Storage.Provider
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class CachedFileUpdaterUI
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal CachedFileUpdaterUI()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string Title
		{
			get
			{
				throw new global::System.NotImplementedException("The member string CachedFileUpdaterUI.Title is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20CachedFileUpdaterUI.Title");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Storage.Provider.CachedFileUpdaterUI", "string CachedFileUpdaterUI.Title");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Storage.Provider.UIStatus UIStatus
		{
			get
			{
				throw new global::System.NotImplementedException("The member UIStatus CachedFileUpdaterUI.UIStatus is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=UIStatus%20CachedFileUpdaterUI.UIStatus");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Storage.Provider.FileUpdateRequest UpdateRequest
		{
			get
			{
				throw new global::System.NotImplementedException("The member FileUpdateRequest CachedFileUpdaterUI.UpdateRequest is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=FileUpdateRequest%20CachedFileUpdaterUI.UpdateRequest");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Storage.Provider.CachedFileTarget UpdateTarget
		{
			get
			{
				throw new global::System.NotImplementedException("The member CachedFileTarget CachedFileUpdaterUI.UpdateTarget is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=CachedFileTarget%20CachedFileUpdaterUI.UpdateTarget");
			}
		}
#endif
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.FromAbi(nint)
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.operator ==(Windows.Storage.Provider.CachedFileUpdaterUI, Windows.Storage.Provider.CachedFileUpdaterUI)
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.operator !=(Windows.Storage.Provider.CachedFileUpdaterUI, Windows.Storage.Provider.CachedFileUpdaterUI)
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.Equals(Windows.Storage.Provider.CachedFileUpdaterUI)
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.Equals(object)
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.GetHashCode()
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.FileUpdateRequested.add
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.FileUpdateRequested.remove
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.UIRequested.add
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.UIRequested.remove
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Storage.Provider.FileUpdateRequestDeferral GetDeferral()
		{
			throw new global::System.NotImplementedException("The member FileUpdateRequestDeferral CachedFileUpdaterUI.GetDeferral() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=FileUpdateRequestDeferral%20CachedFileUpdaterUI.GetDeferral%28%29");
		}
#endif
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.Title.get
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.Title.set
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.UIStatus.get
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.UpdateRequest.get
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.UpdateTarget.get
		// Forced skipping of method Windows.Storage.Provider.CachedFileUpdaterUI.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.Provider.CachedFileUpdaterUI, global::Windows.Storage.Provider.FileUpdateRequestedEventArgs> FileUpdateRequested
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Storage.Provider.CachedFileUpdaterUI", "event TypedEventHandler<CachedFileUpdaterUI, FileUpdateRequestedEventArgs> CachedFileUpdaterUI.FileUpdateRequested");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Storage.Provider.CachedFileUpdaterUI", "event TypedEventHandler<CachedFileUpdaterUI, FileUpdateRequestedEventArgs> CachedFileUpdaterUI.FileUpdateRequested");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Storage.Provider.CachedFileUpdaterUI, object> UIRequested
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Storage.Provider.CachedFileUpdaterUI", "event TypedEventHandler<CachedFileUpdaterUI, object> CachedFileUpdaterUI.UIRequested");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Storage.Provider.CachedFileUpdaterUI", "event TypedEventHandler<CachedFileUpdaterUI, object> CachedFileUpdaterUI.UIRequested");
			}
		}
#endif
	}
}
