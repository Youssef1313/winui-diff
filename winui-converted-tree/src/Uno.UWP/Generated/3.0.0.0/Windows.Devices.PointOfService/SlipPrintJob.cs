// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.PointOfService
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class SlipPrintJob : global::Windows.Devices.PointOfService.IReceiptOrSlipJob, global::Windows.Devices.PointOfService.IPosPrinterJob
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal SlipPrintJob()
		{
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.FromAbi(nint)
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.operator ==(Windows.Devices.PointOfService.SlipPrintJob, Windows.Devices.PointOfService.SlipPrintJob)
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.operator !=(Windows.Devices.PointOfService.SlipPrintJob, Windows.Devices.PointOfService.SlipPrintJob)
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Equals(Windows.Devices.PointOfService.SlipPrintJob)
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Equals(object)
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.GetHashCode()
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Print(string data, global::Windows.Devices.PointOfService.PosPrinterPrintOptions printOptions)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.Print(string data, PosPrinterPrintOptions printOptions)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void FeedPaperByLine(int lineCount)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.FeedPaperByLine(int lineCount)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void FeedPaperByMapModeUnit(int distance)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.FeedPaperByMapModeUnit(int distance)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetBarcodeRotation(global::Windows.Devices.PointOfService.PosPrinterRotation value)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.SetBarcodeRotation(PosPrinterRotation value)");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IReceiptOrSlipJob.SetBarcodeRotation(Windows.Devices.PointOfService.PosPrinterRotation)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetPrintRotation(global::Windows.Devices.PointOfService.PosPrinterRotation value, bool includeBitmaps)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.SetPrintRotation(PosPrinterRotation value, bool includeBitmaps)");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IReceiptOrSlipJob.SetPrintRotation(Windows.Devices.PointOfService.PosPrinterRotation, bool)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetPrintArea(global::Windows.Foundation.Rect value)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.SetPrintArea(Rect value)");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IReceiptOrSlipJob.SetPrintArea(Windows.Foundation.Rect)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetBitmap(uint bitmapNumber, global::Windows.Graphics.Imaging.BitmapFrame bitmap, global::Windows.Devices.PointOfService.PosPrinterAlignment alignment)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.SetBitmap(uint bitmapNumber, BitmapFrame bitmap, PosPrinterAlignment alignment)");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IReceiptOrSlipJob.SetBitmap(uint, Windows.Graphics.Imaging.BitmapFrame, Windows.Devices.PointOfService.PosPrinterAlignment)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetBitmap(uint bitmapNumber, global::Windows.Graphics.Imaging.BitmapFrame bitmap, global::Windows.Devices.PointOfService.PosPrinterAlignment alignment, uint width)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.SetBitmap(uint bitmapNumber, BitmapFrame bitmap, PosPrinterAlignment alignment, uint width)");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IReceiptOrSlipJob.SetBitmap(uint, Windows.Graphics.Imaging.BitmapFrame, Windows.Devices.PointOfService.PosPrinterAlignment, uint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetCustomAlignedBitmap(uint bitmapNumber, global::Windows.Graphics.Imaging.BitmapFrame bitmap, uint alignmentDistance)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.SetCustomAlignedBitmap(uint bitmapNumber, BitmapFrame bitmap, uint alignmentDistance)");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IReceiptOrSlipJob.SetCustomAlignedBitmap(uint, Windows.Graphics.Imaging.BitmapFrame, uint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetCustomAlignedBitmap(uint bitmapNumber, global::Windows.Graphics.Imaging.BitmapFrame bitmap, uint alignmentDistance, uint width)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.SetCustomAlignedBitmap(uint bitmapNumber, BitmapFrame bitmap, uint alignmentDistance, uint width)");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IReceiptOrSlipJob.SetCustomAlignedBitmap(uint, Windows.Graphics.Imaging.BitmapFrame, uint, uint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void PrintSavedBitmap(uint bitmapNumber)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.PrintSavedBitmap(uint bitmapNumber)");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IReceiptOrSlipJob.PrintSavedBitmap(uint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void DrawRuledLine(string positionList, global::Windows.Devices.PointOfService.PosPrinterLineDirection lineDirection, uint lineWidth, global::Windows.Devices.PointOfService.PosPrinterLineStyle lineStyle, uint lineColor)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.DrawRuledLine(string positionList, PosPrinterLineDirection lineDirection, uint lineWidth, PosPrinterLineStyle lineStyle, uint lineColor)");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IReceiptOrSlipJob.DrawRuledLine(string, Windows.Devices.PointOfService.PosPrinterLineDirection, uint, Windows.Devices.PointOfService.PosPrinterLineStyle, uint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void PrintBarcode(string data, uint symbology, uint height, uint width, global::Windows.Devices.PointOfService.PosPrinterBarcodeTextPosition textPosition, global::Windows.Devices.PointOfService.PosPrinterAlignment alignment)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.PrintBarcode(string data, uint symbology, uint height, uint width, PosPrinterBarcodeTextPosition textPosition, PosPrinterAlignment alignment)");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IReceiptOrSlipJob.PrintBarcode(string, uint, uint, uint, Windows.Devices.PointOfService.PosPrinterBarcodeTextPosition, Windows.Devices.PointOfService.PosPrinterAlignment)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void PrintBarcodeCustomAlign(string data, uint symbology, uint height, uint width, global::Windows.Devices.PointOfService.PosPrinterBarcodeTextPosition textPosition, uint alignmentDistance)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.PrintBarcodeCustomAlign(string data, uint symbology, uint height, uint width, PosPrinterBarcodeTextPosition textPosition, uint alignmentDistance)");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IReceiptOrSlipJob.PrintBarcodeCustomAlign(string, uint, uint, uint, Windows.Devices.PointOfService.PosPrinterBarcodeTextPosition, uint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void PrintBitmap(global::Windows.Graphics.Imaging.BitmapFrame bitmap, global::Windows.Devices.PointOfService.PosPrinterAlignment alignment)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.PrintBitmap(BitmapFrame bitmap, PosPrinterAlignment alignment)");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IReceiptOrSlipJob.PrintBitmap(Windows.Graphics.Imaging.BitmapFrame, Windows.Devices.PointOfService.PosPrinterAlignment)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void PrintBitmap(global::Windows.Graphics.Imaging.BitmapFrame bitmap, global::Windows.Devices.PointOfService.PosPrinterAlignment alignment, uint width)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.PrintBitmap(BitmapFrame bitmap, PosPrinterAlignment alignment, uint width)");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IReceiptOrSlipJob.PrintBitmap(Windows.Graphics.Imaging.BitmapFrame, Windows.Devices.PointOfService.PosPrinterAlignment, uint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void PrintCustomAlignedBitmap(global::Windows.Graphics.Imaging.BitmapFrame bitmap, uint alignmentDistance)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.PrintCustomAlignedBitmap(BitmapFrame bitmap, uint alignmentDistance)");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IReceiptOrSlipJob.PrintCustomAlignedBitmap(Windows.Graphics.Imaging.BitmapFrame, uint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void PrintCustomAlignedBitmap(global::Windows.Graphics.Imaging.BitmapFrame bitmap, uint alignmentDistance, uint width)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.PrintCustomAlignedBitmap(BitmapFrame bitmap, uint alignmentDistance, uint width)");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IReceiptOrSlipJob.PrintCustomAlignedBitmap(Windows.Graphics.Imaging.BitmapFrame, uint, uint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Print(string data)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.Print(string data)");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IPosPrinterJob.Print(string)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void PrintLine(string data)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.PrintLine(string data)");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IPosPrinterJob.PrintLine(string)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void PrintLine()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.PointOfService.SlipPrintJob", "void SlipPrintJob.PrintLine()");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IPosPrinterJob.PrintLine()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<bool> ExecuteAsync()
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<bool> SlipPrintJob.ExecuteAsync() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3Cbool%3E%20SlipPrintJob.ExecuteAsync%28%29");
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.Windows.Devices.PointOfService.IPosPrinterJob.ExecuteAsync()
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrintJob.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
		// Processing: Windows.Devices.PointOfService.IReceiptOrSlipJob
		// Processing: Windows.Devices.PointOfService.IPosPrinterJob
	}
}
