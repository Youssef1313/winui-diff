// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.PointOfService
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class SlipPrinterCapabilities : global::Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities, global::Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal SlipPrinterCapabilities()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		bool global::Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities.Is180RotationSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.Is180RotationSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.Is180RotationSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		bool global::Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities.IsBarcodeSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsBarcodeSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsBarcodeSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		bool global::Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities.IsBitmapSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsBitmapSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsBitmapSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		bool global::Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities.IsLeft90RotationSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsLeft90RotationSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsLeft90RotationSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		bool global::Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities.IsPrintAreaSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsPrintAreaSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsPrintAreaSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		bool global::Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities.IsRight90RotationSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsRight90RotationSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsRight90RotationSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.PointOfService.PosPrinterRuledLineCapabilities global::Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities.RuledLineCapabilities
		{
			get
			{
				throw new global::System.NotImplementedException("The member PosPrinterRuledLineCapabilities SlipPrinterCapabilities.RuledLineCapabilities is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=PosPrinterRuledLineCapabilities%20SlipPrinterCapabilities.RuledLineCapabilities");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.PointOfService.PosPrinterRotation> global::Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities.SupportedBarcodeRotations
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<PosPrinterRotation> SlipPrinterCapabilities.SupportedBarcodeRotations is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3CPosPrinterRotation%3E%20SlipPrinterCapabilities.SupportedBarcodeRotations");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.PointOfService.PosPrinterRotation> global::Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities.SupportedBitmapRotations
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<PosPrinterRotation> SlipPrinterCapabilities.SupportedBitmapRotations is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3CPosPrinterRotation%3E%20SlipPrinterCapabilities.SupportedBitmapRotations");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.PointOfService.PosPrinterCartridgeSensors global::Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.CartridgeSensors
		{
			get
			{
				throw new global::System.NotImplementedException("The member PosPrinterCartridgeSensors SlipPrinterCapabilities.CartridgeSensors is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=PosPrinterCartridgeSensors%20SlipPrinterCapabilities.CartridgeSensors");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.PointOfService.PosPrinterColorCapabilities global::Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.ColorCartridgeCapabilities
		{
			get
			{
				throw new global::System.NotImplementedException("The member PosPrinterColorCapabilities SlipPrinterCapabilities.ColorCartridgeCapabilities is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=PosPrinterColorCapabilities%20SlipPrinterCapabilities.ColorCartridgeCapabilities");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		bool global::Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsBoldSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsBoldSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsBoldSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		bool global::Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsDoubleHighDoubleWidePrintSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsDoubleHighDoubleWidePrintSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsDoubleHighDoubleWidePrintSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		bool global::Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsDoubleHighPrintSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsDoubleHighPrintSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsDoubleHighPrintSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		bool global::Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsDoubleWidePrintSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsDoubleWidePrintSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsDoubleWidePrintSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		bool global::Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsDualColorSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsDualColorSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsDualColorSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		bool global::Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsItalicSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsItalicSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsItalicSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		bool global::Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsPaperEmptySensorSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsPaperEmptySensorSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsPaperEmptySensorSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		bool global::Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsPaperNearEndSensorSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsPaperNearEndSensorSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsPaperNearEndSensorSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		bool global::Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsPrinterPresent
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsPrinterPresent is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsPrinterPresent");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		bool global::Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsUnderlineSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsUnderlineSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsUnderlineSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::System.Collections.Generic.IReadOnlyList<uint> global::Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.SupportedCharactersPerLine
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<uint> SlipPrinterCapabilities.SupportedCharactersPerLine is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3Cuint%3E%20SlipPrinterCapabilities.SupportedCharactersPerLine");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.PointOfService.PosPrinterCartridgeSensors CartridgeSensors
		{
			get
			{
				throw new global::System.NotImplementedException("The member PosPrinterCartridgeSensors SlipPrinterCapabilities.CartridgeSensors is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=PosPrinterCartridgeSensors%20SlipPrinterCapabilities.CartridgeSensors");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.PointOfService.PosPrinterColorCapabilities ColorCartridgeCapabilities
		{
			get
			{
				throw new global::System.NotImplementedException("The member PosPrinterColorCapabilities SlipPrinterCapabilities.ColorCartridgeCapabilities is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=PosPrinterColorCapabilities%20SlipPrinterCapabilities.ColorCartridgeCapabilities");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool Is180RotationSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.Is180RotationSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.Is180RotationSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsBarcodeSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsBarcodeSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsBarcodeSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsBitmapSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsBitmapSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsBitmapSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsBoldSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsBoldSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsBoldSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsBothSidesPrintingSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsBothSidesPrintingSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsBothSidesPrintingSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsDoubleHighDoubleWidePrintSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsDoubleHighDoubleWidePrintSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsDoubleHighDoubleWidePrintSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsDoubleHighPrintSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsDoubleHighPrintSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsDoubleHighPrintSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsDoubleWidePrintSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsDoubleWidePrintSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsDoubleWidePrintSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsDualColorSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsDualColorSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsDualColorSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsFullLengthSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsFullLengthSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsFullLengthSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsItalicSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsItalicSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsItalicSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsLeft90RotationSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsLeft90RotationSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsLeft90RotationSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsPaperEmptySensorSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsPaperEmptySensorSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsPaperEmptySensorSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsPaperNearEndSensorSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsPaperNearEndSensorSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsPaperNearEndSensorSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsPrintAreaSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsPrintAreaSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsPrintAreaSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsPrinterPresent
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsPrinterPresent is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsPrinterPresent");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsReversePaperFeedByLineSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsReversePaperFeedByLineSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsReversePaperFeedByLineSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsReversePaperFeedByMapModeUnitSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsReversePaperFeedByMapModeUnitSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsReversePaperFeedByMapModeUnitSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsReverseVideoSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsReverseVideoSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsReverseVideoSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsRight90RotationSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsRight90RotationSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsRight90RotationSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsStrikethroughSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsStrikethroughSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsStrikethroughSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsSubscriptSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsSubscriptSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsSubscriptSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsSuperscriptSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsSuperscriptSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsSuperscriptSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsUnderlineSupported
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SlipPrinterCapabilities.IsUnderlineSupported is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SlipPrinterCapabilities.IsUnderlineSupported");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.PointOfService.PosPrinterRuledLineCapabilities RuledLineCapabilities
		{
			get
			{
				throw new global::System.NotImplementedException("The member PosPrinterRuledLineCapabilities SlipPrinterCapabilities.RuledLineCapabilities is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=PosPrinterRuledLineCapabilities%20SlipPrinterCapabilities.RuledLineCapabilities");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.PointOfService.PosPrinterRotation> SupportedBarcodeRotations
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<PosPrinterRotation> SlipPrinterCapabilities.SupportedBarcodeRotations is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3CPosPrinterRotation%3E%20SlipPrinterCapabilities.SupportedBarcodeRotations");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.PointOfService.PosPrinterRotation> SupportedBitmapRotations
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<PosPrinterRotation> SlipPrinterCapabilities.SupportedBitmapRotations is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3CPosPrinterRotation%3E%20SlipPrinterCapabilities.SupportedBitmapRotations");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<uint> SupportedCharactersPerLine
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<uint> SlipPrinterCapabilities.SupportedCharactersPerLine is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3Cuint%3E%20SlipPrinterCapabilities.SupportedCharactersPerLine");
			}
		}
#endif
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.FromAbi(nint)
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.operator ==(Windows.Devices.PointOfService.SlipPrinterCapabilities, Windows.Devices.PointOfService.SlipPrinterCapabilities)
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.operator !=(Windows.Devices.PointOfService.SlipPrinterCapabilities, Windows.Devices.PointOfService.SlipPrinterCapabilities)
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Equals(Windows.Devices.PointOfService.SlipPrinterCapabilities)
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Equals(object)
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.GetHashCode()
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities.Is180RotationSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities.IsBarcodeSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities.IsBitmapSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities.IsLeft90RotationSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities.IsPrintAreaSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities.IsRight90RotationSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities.RuledLineCapabilities.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities.SupportedBarcodeRotations.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities.SupportedBitmapRotations.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.CartridgeSensors.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.ColorCartridgeCapabilities.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsBoldSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsDoubleHighDoubleWidePrintSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsDoubleHighPrintSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsDoubleWidePrintSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsDualColorSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsItalicSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsPaperEmptySensorSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsPaperNearEndSensorSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsPrinterPresent.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.IsUnderlineSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities.SupportedCharactersPerLine.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.CartridgeSensors.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.ColorCartridgeCapabilities.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.Is180RotationSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsBarcodeSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsBitmapSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsBoldSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsBothSidesPrintingSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsDoubleHighDoubleWidePrintSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsDoubleHighPrintSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsDoubleWidePrintSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsDualColorSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsFullLengthSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsItalicSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsLeft90RotationSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsPaperEmptySensorSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsPaperNearEndSensorSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsPrintAreaSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsPrinterPresent.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsReversePaperFeedByLineSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsReversePaperFeedByMapModeUnitSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsReverseVideoSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsRight90RotationSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsStrikethroughSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsSubscriptSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsSuperscriptSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.IsUnderlineSupported.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.RuledLineCapabilities.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.SupportedBarcodeRotations.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.SupportedBitmapRotations.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.SupportedCharactersPerLine.get
		// Forced skipping of method Windows.Devices.PointOfService.SlipPrinterCapabilities.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
		// Processing: Windows.Devices.PointOfService.ICommonReceiptSlipCapabilities
		// Processing: Windows.Devices.PointOfService.ICommonPosPrintStationCapabilities
	}
}
