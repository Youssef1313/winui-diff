// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Networking.Connectivity
{
#if false || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented("__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
#endif
	public partial class IPInformation
	{
#if false || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal IPInformation()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Networking.Connectivity.NetworkAdapter NetworkAdapter
		{
			get
			{
				throw new global::System.NotImplementedException("The member NetworkAdapter IPInformation.NetworkAdapter is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=NetworkAdapter%20IPInformation.NetworkAdapter");
			}
		}
#endif
#if false || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public byte? PrefixLength
		{
			get
			{
				throw new global::System.NotImplementedException("The member byte? IPInformation.PrefixLength is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=byte%3F%20IPInformation.PrefixLength");
			}
		}
#endif
		// Forced skipping of method Windows.Networking.Connectivity.IPInformation.FromAbi(nint)
		// Forced skipping of method Windows.Networking.Connectivity.IPInformation.operator ==(Windows.Networking.Connectivity.IPInformation, Windows.Networking.Connectivity.IPInformation)
		// Forced skipping of method Windows.Networking.Connectivity.IPInformation.operator !=(Windows.Networking.Connectivity.IPInformation, Windows.Networking.Connectivity.IPInformation)
		// Forced skipping of method Windows.Networking.Connectivity.IPInformation.Equals(Windows.Networking.Connectivity.IPInformation)
		// Forced skipping of method Windows.Networking.Connectivity.IPInformation.Equals(object)
		// Forced skipping of method Windows.Networking.Connectivity.IPInformation.GetHashCode()
		// Forced skipping of method Windows.Networking.Connectivity.IPInformation.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Networking.Connectivity.IPInformation.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Networking.Connectivity.IPInformation.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Networking.Connectivity.IPInformation.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.Networking.Connectivity.IPInformation.NetworkAdapter.get
		// Forced skipping of method Windows.Networking.Connectivity.IPInformation.PrefixLength.get
		// Forced skipping of method Windows.Networking.Connectivity.IPInformation.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
