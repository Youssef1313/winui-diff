// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Services.Maps.Guidance
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class GuidanceNavigator
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal GuidanceNavigator()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static bool UseAppProvidedVoice
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool GuidanceNavigator.UseAppProvidedVoice is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20GuidanceNavigator.UseAppProvidedVoice");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Services.Maps.Guidance.GuidanceAudioMeasurementSystem AudioMeasurementSystem
		{
			get
			{
				throw new global::System.NotImplementedException("The member GuidanceAudioMeasurementSystem GuidanceNavigator.AudioMeasurementSystem is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=GuidanceAudioMeasurementSystem%20GuidanceNavigator.AudioMeasurementSystem");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "GuidanceAudioMeasurementSystem GuidanceNavigator.AudioMeasurementSystem");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Services.Maps.Guidance.GuidanceAudioNotifications AudioNotifications
		{
			get
			{
				throw new global::System.NotImplementedException("The member GuidanceAudioNotifications GuidanceNavigator.AudioNotifications is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=GuidanceAudioNotifications%20GuidanceNavigator.AudioNotifications");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "GuidanceAudioNotifications GuidanceNavigator.AudioNotifications");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsGuidanceAudioMuted
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool GuidanceNavigator.IsGuidanceAudioMuted is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20GuidanceNavigator.IsGuidanceAudioMuted");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "bool GuidanceNavigator.IsGuidanceAudioMuted");
			}
		}
#endif
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.As<I>()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Services.Maps.Guidance.GuidanceNavigator GetCurrent()
		{
			throw new global::System.NotImplementedException("The member GuidanceNavigator GuidanceNavigator.GetCurrent() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=GuidanceNavigator%20GuidanceNavigator.GetCurrent%28%29");
		}
#endif
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.UseAppProvidedVoice.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.FromAbi(nint)
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.operator ==(Windows.Services.Maps.Guidance.GuidanceNavigator, Windows.Services.Maps.Guidance.GuidanceNavigator)
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.operator !=(Windows.Services.Maps.Guidance.GuidanceNavigator, Windows.Services.Maps.Guidance.GuidanceNavigator)
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.Equals(Windows.Services.Maps.Guidance.GuidanceNavigator)
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.Equals(object)
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.GetHashCode()
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void StartNavigating(global::Windows.Services.Maps.Guidance.GuidanceRoute route)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "void GuidanceNavigator.StartNavigating(GuidanceRoute route)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void StartSimulating(global::Windows.Services.Maps.Guidance.GuidanceRoute route, int speedInMetersPerSecond)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "void GuidanceNavigator.StartSimulating(GuidanceRoute route, int speedInMetersPerSecond)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void StartTracking()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "void GuidanceNavigator.StartTracking()");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Pause()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "void GuidanceNavigator.Pause()");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Resume()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "void GuidanceNavigator.Resume()");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Stop()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "void GuidanceNavigator.Stop()");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void RepeatLastAudioNotification()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "void GuidanceNavigator.RepeatLastAudioNotification()");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetGuidanceVoice(int voiceId, string voiceFolder)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "void GuidanceNavigator.SetGuidanceVoice(int voiceId, string voiceFolder)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void UpdateUserLocation(global::Windows.Devices.Geolocation.Geocoordinate userLocation)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "void GuidanceNavigator.UpdateUserLocation(Geocoordinate userLocation)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void UpdateUserLocation(global::Windows.Devices.Geolocation.Geocoordinate userLocation, global::Windows.Devices.Geolocation.BasicGeoposition positionOverride)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "void GuidanceNavigator.UpdateUserLocation(Geocoordinate userLocation, BasicGeoposition positionOverride)");
		}
#endif
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.DestinationReached.add
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.DestinationReached.remove
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.GuidanceUpdated.add
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.GuidanceUpdated.remove
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.RerouteFailed.add
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.RerouteFailed.remove
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.Rerouted.add
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.Rerouted.remove
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.Rerouting.add
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.Rerouting.remove
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.UserLocationLost.add
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.UserLocationLost.remove
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.UserLocationRestored.add
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.UserLocationRestored.remove
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.AudioNotificationRequested.add
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.AudioNotificationRequested.remove
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.AudioMeasurementSystem.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.AudioMeasurementSystem.set
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.AudioNotifications.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.AudioNotifications.set
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.IsGuidanceAudioMuted.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.IsGuidanceAudioMuted.set
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceNavigator.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Services.Maps.Guidance.GuidanceNavigator, object> DestinationReached
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "event TypedEventHandler<GuidanceNavigator, object> GuidanceNavigator.DestinationReached");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "event TypedEventHandler<GuidanceNavigator, object> GuidanceNavigator.DestinationReached");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Services.Maps.Guidance.GuidanceNavigator, global::Windows.Services.Maps.Guidance.GuidanceUpdatedEventArgs> GuidanceUpdated
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "event TypedEventHandler<GuidanceNavigator, GuidanceUpdatedEventArgs> GuidanceNavigator.GuidanceUpdated");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "event TypedEventHandler<GuidanceNavigator, GuidanceUpdatedEventArgs> GuidanceNavigator.GuidanceUpdated");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Services.Maps.Guidance.GuidanceNavigator, object> RerouteFailed
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "event TypedEventHandler<GuidanceNavigator, object> GuidanceNavigator.RerouteFailed");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "event TypedEventHandler<GuidanceNavigator, object> GuidanceNavigator.RerouteFailed");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Services.Maps.Guidance.GuidanceNavigator, global::Windows.Services.Maps.Guidance.GuidanceReroutedEventArgs> Rerouted
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "event TypedEventHandler<GuidanceNavigator, GuidanceReroutedEventArgs> GuidanceNavigator.Rerouted");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "event TypedEventHandler<GuidanceNavigator, GuidanceReroutedEventArgs> GuidanceNavigator.Rerouted");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Services.Maps.Guidance.GuidanceNavigator, object> Rerouting
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "event TypedEventHandler<GuidanceNavigator, object> GuidanceNavigator.Rerouting");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "event TypedEventHandler<GuidanceNavigator, object> GuidanceNavigator.Rerouting");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Services.Maps.Guidance.GuidanceNavigator, object> UserLocationLost
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "event TypedEventHandler<GuidanceNavigator, object> GuidanceNavigator.UserLocationLost");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "event TypedEventHandler<GuidanceNavigator, object> GuidanceNavigator.UserLocationLost");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Services.Maps.Guidance.GuidanceNavigator, object> UserLocationRestored
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "event TypedEventHandler<GuidanceNavigator, object> GuidanceNavigator.UserLocationRestored");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "event TypedEventHandler<GuidanceNavigator, object> GuidanceNavigator.UserLocationRestored");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Services.Maps.Guidance.GuidanceNavigator, global::Windows.Services.Maps.Guidance.GuidanceAudioNotificationRequestedEventArgs> AudioNotificationRequested
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "event TypedEventHandler<GuidanceNavigator, GuidanceAudioNotificationRequestedEventArgs> GuidanceNavigator.AudioNotificationRequested");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Maps.Guidance.GuidanceNavigator", "event TypedEventHandler<GuidanceNavigator, GuidanceAudioNotificationRequestedEventArgs> GuidanceNavigator.AudioNotificationRequested");
			}
		}
#endif
	}
}
