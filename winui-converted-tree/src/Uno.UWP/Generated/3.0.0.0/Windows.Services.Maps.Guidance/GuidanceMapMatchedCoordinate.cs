// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Services.Maps.Guidance
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class GuidanceMapMatchedCoordinate
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal GuidanceMapMatchedCoordinate()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double CurrentHeading
		{
			get
			{
				throw new global::System.NotImplementedException("The member double GuidanceMapMatchedCoordinate.CurrentHeading is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20GuidanceMapMatchedCoordinate.CurrentHeading");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double CurrentSpeed
		{
			get
			{
				throw new global::System.NotImplementedException("The member double GuidanceMapMatchedCoordinate.CurrentSpeed is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20GuidanceMapMatchedCoordinate.CurrentSpeed");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsOnStreet
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool GuidanceMapMatchedCoordinate.IsOnStreet is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20GuidanceMapMatchedCoordinate.IsOnStreet");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Geolocation.Geopoint Location
		{
			get
			{
				throw new global::System.NotImplementedException("The member Geopoint GuidanceMapMatchedCoordinate.Location is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Geopoint%20GuidanceMapMatchedCoordinate.Location");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Services.Maps.Guidance.GuidanceRoadSegment Road
		{
			get
			{
				throw new global::System.NotImplementedException("The member GuidanceRoadSegment GuidanceMapMatchedCoordinate.Road is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=GuidanceRoadSegment%20GuidanceMapMatchedCoordinate.Road");
			}
		}
#endif
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate.FromAbi(nint)
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate.operator ==(Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate, Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate)
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate.operator !=(Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate, Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate)
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate.Equals(Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate)
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate.Equals(object)
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate.GetHashCode()
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate.CurrentHeading.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate.CurrentSpeed.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate.IsOnStreet.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate.Location.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate.Road.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceMapMatchedCoordinate.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
