// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Services.Maps.Guidance
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class GuidanceRoadSegment
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal GuidanceRoadSegment()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string Id
		{
			get
			{
				throw new global::System.NotImplementedException("The member string GuidanceRoadSegment.Id is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20GuidanceRoadSegment.Id");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsHighway
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool GuidanceRoadSegment.IsHighway is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20GuidanceRoadSegment.IsHighway");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsScenic
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool GuidanceRoadSegment.IsScenic is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20GuidanceRoadSegment.IsScenic");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsTollRoad
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool GuidanceRoadSegment.IsTollRoad is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20GuidanceRoadSegment.IsTollRoad");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsTunnel
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool GuidanceRoadSegment.IsTunnel is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20GuidanceRoadSegment.IsTunnel");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Geolocation.Geopath Path
		{
			get
			{
				throw new global::System.NotImplementedException("The member Geopath GuidanceRoadSegment.Path is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Geopath%20GuidanceRoadSegment.Path");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string RoadName
		{
			get
			{
				throw new global::System.NotImplementedException("The member string GuidanceRoadSegment.RoadName is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20GuidanceRoadSegment.RoadName");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string ShortRoadName
		{
			get
			{
				throw new global::System.NotImplementedException("The member string GuidanceRoadSegment.ShortRoadName is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20GuidanceRoadSegment.ShortRoadName");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double SpeedLimit
		{
			get
			{
				throw new global::System.NotImplementedException("The member double GuidanceRoadSegment.SpeedLimit is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20GuidanceRoadSegment.SpeedLimit");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.TimeSpan TravelTime
		{
			get
			{
				throw new global::System.NotImplementedException("The member TimeSpan GuidanceRoadSegment.TravelTime is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TimeSpan%20GuidanceRoadSegment.TravelTime");
			}
		}
#endif
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.FromAbi(nint)
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.operator ==(Windows.Services.Maps.Guidance.GuidanceRoadSegment, Windows.Services.Maps.Guidance.GuidanceRoadSegment)
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.operator !=(Windows.Services.Maps.Guidance.GuidanceRoadSegment, Windows.Services.Maps.Guidance.GuidanceRoadSegment)
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.Equals(Windows.Services.Maps.Guidance.GuidanceRoadSegment)
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.Equals(object)
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.GetHashCode()
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.Id.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.IsHighway.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.IsScenic.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.IsTollRoad.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.IsTunnel.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.Path.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.RoadName.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.ShortRoadName.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.SpeedLimit.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.TravelTime.get
		// Forced skipping of method Windows.Services.Maps.Guidance.GuidanceRoadSegment.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
