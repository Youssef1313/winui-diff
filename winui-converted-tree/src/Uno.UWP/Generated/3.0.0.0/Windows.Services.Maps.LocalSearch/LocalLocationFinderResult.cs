// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Services.Maps.LocalSearch
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class LocalLocationFinderResult
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal LocalLocationFinderResult()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<global::Windows.Services.Maps.LocalSearch.LocalLocation> LocalLocations
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<LocalLocation> LocalLocationFinderResult.LocalLocations is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3CLocalLocation%3E%20LocalLocationFinderResult.LocalLocations");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Services.Maps.LocalSearch.LocalLocationFinderStatus Status
		{
			get
			{
				throw new global::System.NotImplementedException("The member LocalLocationFinderStatus LocalLocationFinderResult.Status is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LocalLocationFinderStatus%20LocalLocationFinderResult.Status");
			}
		}
#endif
		// Forced skipping of method Windows.Services.Maps.LocalSearch.LocalLocationFinderResult.FromAbi(nint)
		// Forced skipping of method Windows.Services.Maps.LocalSearch.LocalLocationFinderResult.operator ==(Windows.Services.Maps.LocalSearch.LocalLocationFinderResult, Windows.Services.Maps.LocalSearch.LocalLocationFinderResult)
		// Forced skipping of method Windows.Services.Maps.LocalSearch.LocalLocationFinderResult.operator !=(Windows.Services.Maps.LocalSearch.LocalLocationFinderResult, Windows.Services.Maps.LocalSearch.LocalLocationFinderResult)
		// Forced skipping of method Windows.Services.Maps.LocalSearch.LocalLocationFinderResult.Equals(Windows.Services.Maps.LocalSearch.LocalLocationFinderResult)
		// Forced skipping of method Windows.Services.Maps.LocalSearch.LocalLocationFinderResult.Equals(object)
		// Forced skipping of method Windows.Services.Maps.LocalSearch.LocalLocationFinderResult.GetHashCode()
		// Forced skipping of method Windows.Services.Maps.LocalSearch.LocalLocationFinderResult.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Services.Maps.LocalSearch.LocalLocationFinderResult.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Services.Maps.LocalSearch.LocalLocationFinderResult.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Services.Maps.LocalSearch.LocalLocationFinderResult.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.Services.Maps.LocalSearch.LocalLocationFinderResult.LocalLocations.get
		// Forced skipping of method Windows.Services.Maps.LocalSearch.LocalLocationFinderResult.Status.get
		// Forced skipping of method Windows.Services.Maps.LocalSearch.LocalLocationFinderResult.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
