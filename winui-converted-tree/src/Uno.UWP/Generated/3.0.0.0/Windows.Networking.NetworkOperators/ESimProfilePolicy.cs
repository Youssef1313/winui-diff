// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Networking.NetworkOperators
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class ESimProfilePolicy
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal ESimProfilePolicy()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanDelete
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool ESimProfilePolicy.CanDelete is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ESimProfilePolicy.CanDelete");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanDisable
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool ESimProfilePolicy.CanDisable is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ESimProfilePolicy.CanDisable");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsManagedByEnterprise
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool ESimProfilePolicy.IsManagedByEnterprise is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ESimProfilePolicy.IsManagedByEnterprise");
			}
		}
#endif
		// Forced skipping of method Windows.Networking.NetworkOperators.ESimProfilePolicy.FromAbi(nint)
		// Forced skipping of method Windows.Networking.NetworkOperators.ESimProfilePolicy.operator ==(Windows.Networking.NetworkOperators.ESimProfilePolicy, Windows.Networking.NetworkOperators.ESimProfilePolicy)
		// Forced skipping of method Windows.Networking.NetworkOperators.ESimProfilePolicy.operator !=(Windows.Networking.NetworkOperators.ESimProfilePolicy, Windows.Networking.NetworkOperators.ESimProfilePolicy)
		// Forced skipping of method Windows.Networking.NetworkOperators.ESimProfilePolicy.Equals(Windows.Networking.NetworkOperators.ESimProfilePolicy)
		// Forced skipping of method Windows.Networking.NetworkOperators.ESimProfilePolicy.Equals(object)
		// Forced skipping of method Windows.Networking.NetworkOperators.ESimProfilePolicy.GetHashCode()
		// Forced skipping of method Windows.Networking.NetworkOperators.ESimProfilePolicy.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Networking.NetworkOperators.ESimProfilePolicy.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Networking.NetworkOperators.ESimProfilePolicy.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Networking.NetworkOperators.ESimProfilePolicy.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.Networking.NetworkOperators.ESimProfilePolicy.CanDelete.get
		// Forced skipping of method Windows.Networking.NetworkOperators.ESimProfilePolicy.CanDisable.get
		// Forced skipping of method Windows.Networking.NetworkOperators.ESimProfilePolicy.IsManagedByEnterprise.get
		// Forced skipping of method Windows.Networking.NetworkOperators.ESimProfilePolicy.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
