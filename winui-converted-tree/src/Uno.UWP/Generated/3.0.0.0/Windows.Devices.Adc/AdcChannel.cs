// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.Adc
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class AdcChannel : global::System.IDisposable
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal AdcChannel()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Adc.AdcController Controller
		{
			get
			{
				throw new global::System.NotImplementedException("The member AdcController AdcChannel.Controller is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=AdcController%20AdcChannel.Controller");
			}
		}
#endif
		// Forced skipping of method Windows.Devices.Adc.AdcChannel.FromAbi(nint)
		// Forced skipping of method Windows.Devices.Adc.AdcChannel.operator ==(Windows.Devices.Adc.AdcChannel, Windows.Devices.Adc.AdcChannel)
		// Forced skipping of method Windows.Devices.Adc.AdcChannel.operator !=(Windows.Devices.Adc.AdcChannel, Windows.Devices.Adc.AdcChannel)
		// Forced skipping of method Windows.Devices.Adc.AdcChannel.Equals(Windows.Devices.Adc.AdcChannel)
		// Forced skipping of method Windows.Devices.Adc.AdcChannel.Equals(object)
		// Forced skipping of method Windows.Devices.Adc.AdcChannel.GetHashCode()
		// Forced skipping of method Windows.Devices.Adc.AdcChannel.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Devices.Adc.AdcChannel.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Devices.Adc.AdcChannel.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Devices.Adc.AdcChannel.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int ReadValue()
		{
			throw new global::System.NotImplementedException("The member int AdcChannel.ReadValue() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20AdcChannel.ReadValue%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double ReadRatio()
		{
			throw new global::System.NotImplementedException("The member double AdcChannel.ReadRatio() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20AdcChannel.ReadRatio%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Dispose()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Adc.AdcChannel", "void AdcChannel.Dispose()");
		}
#endif
		// Forced skipping of method Windows.Devices.Adc.AdcChannel.Controller.get
		// Forced skipping of method Windows.Devices.Adc.AdcChannel.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
		// Processing: System.IDisposable
	}
}
