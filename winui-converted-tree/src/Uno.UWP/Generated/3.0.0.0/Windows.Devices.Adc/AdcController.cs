// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.Adc
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class AdcController
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal AdcController()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int ChannelCount
		{
			get
			{
				throw new global::System.NotImplementedException("The member int AdcController.ChannelCount is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20AdcController.ChannelCount");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Adc.AdcChannelMode ChannelMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member AdcChannelMode AdcController.ChannelMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=AdcChannelMode%20AdcController.ChannelMode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Adc.AdcController", "AdcChannelMode AdcController.ChannelMode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int MaxValue
		{
			get
			{
				throw new global::System.NotImplementedException("The member int AdcController.MaxValue is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20AdcController.MaxValue");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int MinValue
		{
			get
			{
				throw new global::System.NotImplementedException("The member int AdcController.MinValue is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20AdcController.MinValue");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int ResolutionInBits
		{
			get
			{
				throw new global::System.NotImplementedException("The member int AdcController.ResolutionInBits is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20AdcController.ResolutionInBits");
			}
		}
#endif
		// Forced skipping of method Windows.Devices.Adc.AdcController.As<I>()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Adc.AdcController>> GetControllersAsync(global::Windows.Devices.Adc.Provider.IAdcProvider provider)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<IReadOnlyList<AdcController>> AdcController.GetControllersAsync(IAdcProvider provider) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CIReadOnlyList%3CAdcController%3E%3E%20AdcController.GetControllersAsync%28IAdcProvider%20provider%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Adc.AdcController> GetDefaultAsync()
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<AdcController> AdcController.GetDefaultAsync() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CAdcController%3E%20AdcController.GetDefaultAsync%28%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Adc.AdcController.FromAbi(nint)
		// Forced skipping of method Windows.Devices.Adc.AdcController.operator ==(Windows.Devices.Adc.AdcController, Windows.Devices.Adc.AdcController)
		// Forced skipping of method Windows.Devices.Adc.AdcController.operator !=(Windows.Devices.Adc.AdcController, Windows.Devices.Adc.AdcController)
		// Forced skipping of method Windows.Devices.Adc.AdcController.Equals(Windows.Devices.Adc.AdcController)
		// Forced skipping of method Windows.Devices.Adc.AdcController.Equals(object)
		// Forced skipping of method Windows.Devices.Adc.AdcController.GetHashCode()
		// Forced skipping of method Windows.Devices.Adc.AdcController.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Devices.Adc.AdcController.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Devices.Adc.AdcController.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Devices.Adc.AdcController.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsChannelModeSupported(global::Windows.Devices.Adc.AdcChannelMode channelMode)
		{
			throw new global::System.NotImplementedException("The member bool AdcController.IsChannelModeSupported(AdcChannelMode channelMode) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20AdcController.IsChannelModeSupported%28AdcChannelMode%20channelMode%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Adc.AdcChannel OpenChannel(int channelNumber)
		{
			throw new global::System.NotImplementedException("The member AdcChannel AdcController.OpenChannel(int channelNumber) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=AdcChannel%20AdcController.OpenChannel%28int%20channelNumber%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Adc.AdcController.ChannelCount.get
		// Forced skipping of method Windows.Devices.Adc.AdcController.ChannelMode.get
		// Forced skipping of method Windows.Devices.Adc.AdcController.ChannelMode.set
		// Forced skipping of method Windows.Devices.Adc.AdcController.MaxValue.get
		// Forced skipping of method Windows.Devices.Adc.AdcController.MinValue.get
		// Forced skipping of method Windows.Devices.Adc.AdcController.ResolutionInBits.get
		// Forced skipping of method Windows.Devices.Adc.AdcController.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
