// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Security.ExchangeActiveSyncProvisioning
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class EasComplianceResults
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal EasComplianceResults()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool Compliant
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool EasComplianceResults.Compliant is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20EasComplianceResults.Compliant");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Security.ExchangeActiveSyncProvisioning.EasDisallowConvenienceLogonResult DisallowConvenienceLogonResult
		{
			get
			{
				throw new global::System.NotImplementedException("The member EasDisallowConvenienceLogonResult EasComplianceResults.DisallowConvenienceLogonResult is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=EasDisallowConvenienceLogonResult%20EasComplianceResults.DisallowConvenienceLogonResult");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Security.ExchangeActiveSyncProvisioning.EasEncryptionProviderType EncryptionProviderType
		{
			get
			{
				throw new global::System.NotImplementedException("The member EasEncryptionProviderType EasComplianceResults.EncryptionProviderType is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=EasEncryptionProviderType%20EasComplianceResults.EncryptionProviderType");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Security.ExchangeActiveSyncProvisioning.EasMaxInactivityTimeLockResult MaxInactivityTimeLockResult
		{
			get
			{
				throw new global::System.NotImplementedException("The member EasMaxInactivityTimeLockResult EasComplianceResults.MaxInactivityTimeLockResult is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=EasMaxInactivityTimeLockResult%20EasComplianceResults.MaxInactivityTimeLockResult");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Security.ExchangeActiveSyncProvisioning.EasMaxPasswordFailedAttemptsResult MaxPasswordFailedAttemptsResult
		{
			get
			{
				throw new global::System.NotImplementedException("The member EasMaxPasswordFailedAttemptsResult EasComplianceResults.MaxPasswordFailedAttemptsResult is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=EasMaxPasswordFailedAttemptsResult%20EasComplianceResults.MaxPasswordFailedAttemptsResult");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Security.ExchangeActiveSyncProvisioning.EasMinPasswordComplexCharactersResult MinPasswordComplexCharactersResult
		{
			get
			{
				throw new global::System.NotImplementedException("The member EasMinPasswordComplexCharactersResult EasComplianceResults.MinPasswordComplexCharactersResult is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=EasMinPasswordComplexCharactersResult%20EasComplianceResults.MinPasswordComplexCharactersResult");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Security.ExchangeActiveSyncProvisioning.EasMinPasswordLengthResult MinPasswordLengthResult
		{
			get
			{
				throw new global::System.NotImplementedException("The member EasMinPasswordLengthResult EasComplianceResults.MinPasswordLengthResult is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=EasMinPasswordLengthResult%20EasComplianceResults.MinPasswordLengthResult");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Security.ExchangeActiveSyncProvisioning.EasPasswordExpirationResult PasswordExpirationResult
		{
			get
			{
				throw new global::System.NotImplementedException("The member EasPasswordExpirationResult EasComplianceResults.PasswordExpirationResult is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=EasPasswordExpirationResult%20EasComplianceResults.PasswordExpirationResult");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Security.ExchangeActiveSyncProvisioning.EasPasswordHistoryResult PasswordHistoryResult
		{
			get
			{
				throw new global::System.NotImplementedException("The member EasPasswordHistoryResult EasComplianceResults.PasswordHistoryResult is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=EasPasswordHistoryResult%20EasComplianceResults.PasswordHistoryResult");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Security.ExchangeActiveSyncProvisioning.EasRequireEncryptionResult RequireEncryptionResult
		{
			get
			{
				throw new global::System.NotImplementedException("The member EasRequireEncryptionResult EasComplianceResults.RequireEncryptionResult is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=EasRequireEncryptionResult%20EasComplianceResults.RequireEncryptionResult");
			}
		}
#endif
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.FromAbi(nint)
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.operator ==(Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults, Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults)
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.operator !=(Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults, Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults)
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.Equals(Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults)
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.Equals(object)
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.GetHashCode()
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.Compliant.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.DisallowConvenienceLogonResult.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.EncryptionProviderType.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.MaxInactivityTimeLockResult.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.MaxPasswordFailedAttemptsResult.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.MinPasswordComplexCharactersResult.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.MinPasswordLengthResult.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.PasswordExpirationResult.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.PasswordHistoryResult.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.RequireEncryptionResult.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
