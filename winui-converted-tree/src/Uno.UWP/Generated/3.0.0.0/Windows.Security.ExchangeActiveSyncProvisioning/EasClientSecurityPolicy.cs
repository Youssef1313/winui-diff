// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Security.ExchangeActiveSyncProvisioning
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class EasClientSecurityPolicy
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool DisallowConvenienceLogon
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool EasClientSecurityPolicy.DisallowConvenienceLogon is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20EasClientSecurityPolicy.DisallowConvenienceLogon");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy", "bool EasClientSecurityPolicy.DisallowConvenienceLogon");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.TimeSpan MaxInactivityTimeLock
		{
			get
			{
				throw new global::System.NotImplementedException("The member TimeSpan EasClientSecurityPolicy.MaxInactivityTimeLock is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TimeSpan%20EasClientSecurityPolicy.MaxInactivityTimeLock");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy", "TimeSpan EasClientSecurityPolicy.MaxInactivityTimeLock");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public byte MaxPasswordFailedAttempts
		{
			get
			{
				throw new global::System.NotImplementedException("The member byte EasClientSecurityPolicy.MaxPasswordFailedAttempts is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=byte%20EasClientSecurityPolicy.MaxPasswordFailedAttempts");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy", "byte EasClientSecurityPolicy.MaxPasswordFailedAttempts");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public byte MinPasswordComplexCharacters
		{
			get
			{
				throw new global::System.NotImplementedException("The member byte EasClientSecurityPolicy.MinPasswordComplexCharacters is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=byte%20EasClientSecurityPolicy.MinPasswordComplexCharacters");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy", "byte EasClientSecurityPolicy.MinPasswordComplexCharacters");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public byte MinPasswordLength
		{
			get
			{
				throw new global::System.NotImplementedException("The member byte EasClientSecurityPolicy.MinPasswordLength is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=byte%20EasClientSecurityPolicy.MinPasswordLength");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy", "byte EasClientSecurityPolicy.MinPasswordLength");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.TimeSpan PasswordExpiration
		{
			get
			{
				throw new global::System.NotImplementedException("The member TimeSpan EasClientSecurityPolicy.PasswordExpiration is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TimeSpan%20EasClientSecurityPolicy.PasswordExpiration");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy", "TimeSpan EasClientSecurityPolicy.PasswordExpiration");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint PasswordHistory
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint EasClientSecurityPolicy.PasswordHistory is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20EasClientSecurityPolicy.PasswordHistory");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy", "uint EasClientSecurityPolicy.PasswordHistory");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool RequireEncryption
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool EasClientSecurityPolicy.RequireEncryption is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20EasClientSecurityPolicy.RequireEncryption");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy", "bool EasClientSecurityPolicy.RequireEncryption");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public EasClientSecurityPolicy()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy", "EasClientSecurityPolicy.EasClientSecurityPolicy()");
		}
#endif
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.EasClientSecurityPolicy()
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.FromAbi(nint)
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.operator ==(Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy, Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy)
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.operator !=(Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy, Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy)
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.Equals(Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy)
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.Equals(object)
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.GetHashCode()
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults CheckCompliance()
		{
			throw new global::System.NotImplementedException("The member EasComplianceResults EasClientSecurityPolicy.CheckCompliance() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=EasComplianceResults%20EasClientSecurityPolicy.CheckCompliance%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<global::Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults> ApplyAsync()
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<EasComplianceResults> EasClientSecurityPolicy.ApplyAsync() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CEasComplianceResults%3E%20EasClientSecurityPolicy.ApplyAsync%28%29");
		}
#endif
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.DisallowConvenienceLogon.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.DisallowConvenienceLogon.set
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.MaxInactivityTimeLock.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.MaxInactivityTimeLock.set
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.MaxPasswordFailedAttempts.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.MaxPasswordFailedAttempts.set
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.MinPasswordComplexCharacters.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.MinPasswordComplexCharacters.set
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.MinPasswordLength.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.MinPasswordLength.set
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.PasswordExpiration.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.PasswordExpiration.set
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.PasswordHistory.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.PasswordHistory.set
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.RequireEncryption.get
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.RequireEncryption.set
		// Forced skipping of method Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
