// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.AI.MachineLearning.Preview
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class InferencingOptionsPreview
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal InferencingOptionsPreview()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsTracingEnabled
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool InferencingOptionsPreview.IsTracingEnabled is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20InferencingOptionsPreview.IsTracingEnabled");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.AI.MachineLearning.Preview.InferencingOptionsPreview", "bool InferencingOptionsPreview.IsTracingEnabled");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int MaxBatchSize
		{
			get
			{
				throw new global::System.NotImplementedException("The member int InferencingOptionsPreview.MaxBatchSize is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20InferencingOptionsPreview.MaxBatchSize");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.AI.MachineLearning.Preview.InferencingOptionsPreview", "int InferencingOptionsPreview.MaxBatchSize");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool MinimizeMemoryAllocation
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool InferencingOptionsPreview.MinimizeMemoryAllocation is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20InferencingOptionsPreview.MinimizeMemoryAllocation");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.AI.MachineLearning.Preview.InferencingOptionsPreview", "bool InferencingOptionsPreview.MinimizeMemoryAllocation");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.AI.MachineLearning.Preview.LearningModelDeviceKindPreview PreferredDeviceKind
		{
			get
			{
				throw new global::System.NotImplementedException("The member LearningModelDeviceKindPreview InferencingOptionsPreview.PreferredDeviceKind is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LearningModelDeviceKindPreview%20InferencingOptionsPreview.PreferredDeviceKind");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.AI.MachineLearning.Preview.InferencingOptionsPreview", "LearningModelDeviceKindPreview InferencingOptionsPreview.PreferredDeviceKind");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool ReclaimMemoryAfterEvaluation
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool InferencingOptionsPreview.ReclaimMemoryAfterEvaluation is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20InferencingOptionsPreview.ReclaimMemoryAfterEvaluation");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.AI.MachineLearning.Preview.InferencingOptionsPreview", "bool InferencingOptionsPreview.ReclaimMemoryAfterEvaluation");
			}
		}
#endif
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.FromAbi(nint)
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.operator ==(Windows.AI.MachineLearning.Preview.InferencingOptionsPreview, Windows.AI.MachineLearning.Preview.InferencingOptionsPreview)
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.operator !=(Windows.AI.MachineLearning.Preview.InferencingOptionsPreview, Windows.AI.MachineLearning.Preview.InferencingOptionsPreview)
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.Equals(Windows.AI.MachineLearning.Preview.InferencingOptionsPreview)
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.Equals(object)
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.GetHashCode()
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.IsTracingEnabled.get
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.IsTracingEnabled.set
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.MaxBatchSize.get
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.MaxBatchSize.set
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.MinimizeMemoryAllocation.get
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.MinimizeMemoryAllocation.set
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.PreferredDeviceKind.get
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.PreferredDeviceKind.set
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.ReclaimMemoryAfterEvaluation.get
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.ReclaimMemoryAfterEvaluation.set
		// Forced skipping of method Windows.AI.MachineLearning.Preview.InferencingOptionsPreview.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
