// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Media.Effects
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class AudioCaptureEffectsManager
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal AudioCaptureEffectsManager()
		{
		}
#endif
		// Forced skipping of method Windows.Media.Effects.AudioCaptureEffectsManager.FromAbi(nint)
		// Forced skipping of method Windows.Media.Effects.AudioCaptureEffectsManager.operator ==(Windows.Media.Effects.AudioCaptureEffectsManager, Windows.Media.Effects.AudioCaptureEffectsManager)
		// Forced skipping of method Windows.Media.Effects.AudioCaptureEffectsManager.operator !=(Windows.Media.Effects.AudioCaptureEffectsManager, Windows.Media.Effects.AudioCaptureEffectsManager)
		// Forced skipping of method Windows.Media.Effects.AudioCaptureEffectsManager.Equals(Windows.Media.Effects.AudioCaptureEffectsManager)
		// Forced skipping of method Windows.Media.Effects.AudioCaptureEffectsManager.Equals(object)
		// Forced skipping of method Windows.Media.Effects.AudioCaptureEffectsManager.GetHashCode()
		// Forced skipping of method Windows.Media.Effects.AudioCaptureEffectsManager.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Media.Effects.AudioCaptureEffectsManager.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Media.Effects.AudioCaptureEffectsManager.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Media.Effects.AudioCaptureEffectsManager.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<global::Windows.Media.Effects.AudioEffect> GetAudioCaptureEffects()
		{
			throw new global::System.NotImplementedException("The member IReadOnlyList<AudioEffect> AudioCaptureEffectsManager.GetAudioCaptureEffects() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3CAudioEffect%3E%20AudioCaptureEffectsManager.GetAudioCaptureEffects%28%29");
		}
#endif
		// Forced skipping of method Windows.Media.Effects.AudioCaptureEffectsManager.AudioCaptureEffectsChanged.add
		// Forced skipping of method Windows.Media.Effects.AudioCaptureEffectsManager.AudioCaptureEffectsChanged.remove
		// Forced skipping of method Windows.Media.Effects.AudioCaptureEffectsManager.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Effects.AudioCaptureEffectsManager, object> AudioCaptureEffectsChanged
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Effects.AudioCaptureEffectsManager", "event TypedEventHandler<AudioCaptureEffectsManager, object> AudioCaptureEffectsManager.AudioCaptureEffectsChanged");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Effects.AudioCaptureEffectsManager", "event TypedEventHandler<AudioCaptureEffectsManager, object> AudioCaptureEffectsManager.AudioCaptureEffectsChanged");
			}
		}
#endif
	}
}
