// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Web.Http.Diagnostics
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class HttpDiagnosticProvider
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal HttpDiagnosticProvider()
		{
		}
#endif
		// Forced skipping of method Windows.Web.Http.Diagnostics.HttpDiagnosticProvider.As<I>()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Web.Http.Diagnostics.HttpDiagnosticProvider CreateFromProcessDiagnosticInfo(global::Windows.System.Diagnostics.ProcessDiagnosticInfo processDiagnosticInfo)
		{
			throw new global::System.NotImplementedException("The member HttpDiagnosticProvider HttpDiagnosticProvider.CreateFromProcessDiagnosticInfo(ProcessDiagnosticInfo processDiagnosticInfo) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=HttpDiagnosticProvider%20HttpDiagnosticProvider.CreateFromProcessDiagnosticInfo%28ProcessDiagnosticInfo%20processDiagnosticInfo%29");
		}
#endif
		// Forced skipping of method Windows.Web.Http.Diagnostics.HttpDiagnosticProvider.FromAbi(nint)
		// Forced skipping of method Windows.Web.Http.Diagnostics.HttpDiagnosticProvider.operator ==(Windows.Web.Http.Diagnostics.HttpDiagnosticProvider, Windows.Web.Http.Diagnostics.HttpDiagnosticProvider)
		// Forced skipping of method Windows.Web.Http.Diagnostics.HttpDiagnosticProvider.operator !=(Windows.Web.Http.Diagnostics.HttpDiagnosticProvider, Windows.Web.Http.Diagnostics.HttpDiagnosticProvider)
		// Forced skipping of method Windows.Web.Http.Diagnostics.HttpDiagnosticProvider.Equals(Windows.Web.Http.Diagnostics.HttpDiagnosticProvider)
		// Forced skipping of method Windows.Web.Http.Diagnostics.HttpDiagnosticProvider.Equals(object)
		// Forced skipping of method Windows.Web.Http.Diagnostics.HttpDiagnosticProvider.GetHashCode()
		// Forced skipping of method Windows.Web.Http.Diagnostics.HttpDiagnosticProvider.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Web.Http.Diagnostics.HttpDiagnosticProvider.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Web.Http.Diagnostics.HttpDiagnosticProvider.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Web.Http.Diagnostics.HttpDiagnosticProvider.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Start()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Web.Http.Diagnostics.HttpDiagnosticProvider", "void HttpDiagnosticProvider.Start()");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Stop()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Web.Http.Diagnostics.HttpDiagnosticProvider", "void HttpDiagnosticProvider.Stop()");
		}
#endif
		// Forced skipping of method Windows.Web.Http.Diagnostics.HttpDiagnosticProvider.RequestResponseCompleted.add
		// Forced skipping of method Windows.Web.Http.Diagnostics.HttpDiagnosticProvider.RequestResponseCompleted.remove
		// Forced skipping of method Windows.Web.Http.Diagnostics.HttpDiagnosticProvider.RequestSent.add
		// Forced skipping of method Windows.Web.Http.Diagnostics.HttpDiagnosticProvider.RequestSent.remove
		// Forced skipping of method Windows.Web.Http.Diagnostics.HttpDiagnosticProvider.ResponseReceived.add
		// Forced skipping of method Windows.Web.Http.Diagnostics.HttpDiagnosticProvider.ResponseReceived.remove
		// Forced skipping of method Windows.Web.Http.Diagnostics.HttpDiagnosticProvider.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Web.Http.Diagnostics.HttpDiagnosticProvider, global::Windows.Web.Http.Diagnostics.HttpDiagnosticProviderRequestResponseCompletedEventArgs> RequestResponseCompleted
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Web.Http.Diagnostics.HttpDiagnosticProvider", "event TypedEventHandler<HttpDiagnosticProvider, HttpDiagnosticProviderRequestResponseCompletedEventArgs> HttpDiagnosticProvider.RequestResponseCompleted");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Web.Http.Diagnostics.HttpDiagnosticProvider", "event TypedEventHandler<HttpDiagnosticProvider, HttpDiagnosticProviderRequestResponseCompletedEventArgs> HttpDiagnosticProvider.RequestResponseCompleted");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Web.Http.Diagnostics.HttpDiagnosticProvider, global::Windows.Web.Http.Diagnostics.HttpDiagnosticProviderRequestSentEventArgs> RequestSent
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Web.Http.Diagnostics.HttpDiagnosticProvider", "event TypedEventHandler<HttpDiagnosticProvider, HttpDiagnosticProviderRequestSentEventArgs> HttpDiagnosticProvider.RequestSent");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Web.Http.Diagnostics.HttpDiagnosticProvider", "event TypedEventHandler<HttpDiagnosticProvider, HttpDiagnosticProviderRequestSentEventArgs> HttpDiagnosticProvider.RequestSent");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Web.Http.Diagnostics.HttpDiagnosticProvider, global::Windows.Web.Http.Diagnostics.HttpDiagnosticProviderResponseReceivedEventArgs> ResponseReceived
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Web.Http.Diagnostics.HttpDiagnosticProvider", "event TypedEventHandler<HttpDiagnosticProvider, HttpDiagnosticProviderResponseReceivedEventArgs> HttpDiagnosticProvider.ResponseReceived");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Web.Http.Diagnostics.HttpDiagnosticProvider", "event TypedEventHandler<HttpDiagnosticProvider, HttpDiagnosticProviderResponseReceivedEventArgs> HttpDiagnosticProvider.ResponseReceived");
			}
		}
#endif
	}
}
