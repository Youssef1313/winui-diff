// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.I2c.Provider
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class ProviderI2cConnectionSettings
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal ProviderI2cConnectionSettings()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.I2c.Provider.ProviderI2cBusSpeed BusSpeed
		{
			get
			{
				throw new global::System.NotImplementedException("The member ProviderI2cBusSpeed ProviderI2cConnectionSettings.BusSpeed is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ProviderI2cBusSpeed%20ProviderI2cConnectionSettings.BusSpeed");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings", "ProviderI2cBusSpeed ProviderI2cConnectionSettings.BusSpeed");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.I2c.Provider.ProviderI2cSharingMode SharingMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member ProviderI2cSharingMode ProviderI2cConnectionSettings.SharingMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ProviderI2cSharingMode%20ProviderI2cConnectionSettings.SharingMode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings", "ProviderI2cSharingMode ProviderI2cConnectionSettings.SharingMode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int SlaveAddress
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ProviderI2cConnectionSettings.SlaveAddress is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ProviderI2cConnectionSettings.SlaveAddress");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings", "int ProviderI2cConnectionSettings.SlaveAddress");
			}
		}
#endif
		// Forced skipping of method Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.FromAbi(nint)
		// Forced skipping of method Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.operator ==(Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings, Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings)
		// Forced skipping of method Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.operator !=(Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings, Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings)
		// Forced skipping of method Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.Equals(Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings)
		// Forced skipping of method Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.Equals(object)
		// Forced skipping of method Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.GetHashCode()
		// Forced skipping of method Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.BusSpeed.get
		// Forced skipping of method Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.BusSpeed.set
		// Forced skipping of method Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.SharingMode.get
		// Forced skipping of method Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.SharingMode.set
		// Forced skipping of method Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.SlaveAddress.get
		// Forced skipping of method Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.SlaveAddress.set
		// Forced skipping of method Windows.Devices.I2c.Provider.ProviderI2cConnectionSettings.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
