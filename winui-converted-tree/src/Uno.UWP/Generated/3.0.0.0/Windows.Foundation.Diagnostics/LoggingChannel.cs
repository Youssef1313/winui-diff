// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Foundation.Diagnostics
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class LoggingChannel : global::Windows.Foundation.Diagnostics.ILoggingChannel, global::System.IDisposable, global::Windows.Foundation.Diagnostics.ILoggingTarget
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		bool global::Windows.Foundation.Diagnostics.ILoggingChannel.Enabled
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LoggingChannel.Enabled is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LoggingChannel.Enabled");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Foundation.Diagnostics.LoggingLevel global::Windows.Foundation.Diagnostics.ILoggingChannel.Level
		{
			get
			{
				throw new global::System.NotImplementedException("The member LoggingLevel LoggingChannel.Level is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LoggingLevel%20LoggingChannel.Level");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		string global::Windows.Foundation.Diagnostics.ILoggingChannel.Name
		{
			get
			{
				throw new global::System.NotImplementedException("The member string LoggingChannel.Name is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20LoggingChannel.Name");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool Enabled
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LoggingChannel.Enabled is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LoggingChannel.Enabled");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Guid Id
		{
			get
			{
				throw new global::System.NotImplementedException("The member Guid LoggingChannel.Id is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Guid%20LoggingChannel.Id");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Diagnostics.LoggingLevel Level
		{
			get
			{
				throw new global::System.NotImplementedException("The member LoggingLevel LoggingChannel.Level is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LoggingLevel%20LoggingChannel.Level");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string Name
		{
			get
			{
				throw new global::System.NotImplementedException("The member string LoggingChannel.Name is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20LoggingChannel.Name");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public LoggingChannel(string name)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Foundation.Diagnostics.LoggingChannel", "LoggingChannel.LoggingChannel(string name)");
		}
#endif
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.LoggingChannel(string)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public LoggingChannel(string name, global::Windows.Foundation.Diagnostics.LoggingChannelOptions options)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Foundation.Diagnostics.LoggingChannel", "LoggingChannel.LoggingChannel(string name, LoggingChannelOptions options)");
		}
#endif
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.LoggingChannel(string, Windows.Foundation.Diagnostics.LoggingChannelOptions)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public LoggingChannel(string name, global::Windows.Foundation.Diagnostics.LoggingChannelOptions options, global::System.Guid id)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Foundation.Diagnostics.LoggingChannel", "LoggingChannel.LoggingChannel(string name, LoggingChannelOptions options, Guid id)");
		}
#endif
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.LoggingChannel(string, Windows.Foundation.Diagnostics.LoggingChannelOptions, System.Guid)
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.FromAbi(nint)
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.operator ==(Windows.Foundation.Diagnostics.LoggingChannel, Windows.Foundation.Diagnostics.LoggingChannel)
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.operator !=(Windows.Foundation.Diagnostics.LoggingChannel, Windows.Foundation.Diagnostics.LoggingChannel)
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Equals(Windows.Foundation.Diagnostics.LoggingChannel)
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Equals(object)
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.GetHashCode()
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void LogMessage(string eventString)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Foundation.Diagnostics.LoggingChannel", "void LoggingChannel.LogMessage(string eventString)");
		}
#endif
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingChannel.LogMessage(string)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void LogMessage(string eventString, global::Windows.Foundation.Diagnostics.LoggingLevel level)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Foundation.Diagnostics.LoggingChannel", "void LoggingChannel.LogMessage(string eventString, LoggingLevel level)");
		}
#endif
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingChannel.LogMessage(string, Windows.Foundation.Diagnostics.LoggingLevel)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void LogValuePair(string value1, int value2)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Foundation.Diagnostics.LoggingChannel", "void LoggingChannel.LogValuePair(string value1, int value2)");
		}
#endif
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingChannel.LogValuePair(string, int)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void LogValuePair(string value1, int value2, global::Windows.Foundation.Diagnostics.LoggingLevel level)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Foundation.Diagnostics.LoggingChannel", "void LoggingChannel.LogValuePair(string value1, int value2, LoggingLevel level)");
		}
#endif
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingChannel.LogValuePair(string, int, Windows.Foundation.Diagnostics.LoggingLevel)
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.LoggingEnabled.add
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.LoggingEnabled.remove
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingChannel.LoggingEnabled.add
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingChannel.LoggingEnabled.remove
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingChannel.Enabled.get
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingChannel.Level.get
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingChannel.Name.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Dispose()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Foundation.Diagnostics.LoggingChannel", "void LoggingChannel.Dispose()");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsEnabled()
		{
			throw new global::System.NotImplementedException("The member bool LoggingChannel.IsEnabled() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LoggingChannel.IsEnabled%28%29");
		}
#endif
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingTarget.IsEnabled()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsEnabled(global::Windows.Foundation.Diagnostics.LoggingLevel level)
		{
			throw new global::System.NotImplementedException("The member bool LoggingChannel.IsEnabled(LoggingLevel level) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LoggingChannel.IsEnabled%28LoggingLevel%20level%29");
		}
#endif
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingTarget.IsEnabled(Windows.Foundation.Diagnostics.LoggingLevel)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsEnabled(global::Windows.Foundation.Diagnostics.LoggingLevel level, long keywords)
		{
			throw new global::System.NotImplementedException("The member bool LoggingChannel.IsEnabled(LoggingLevel level, long keywords) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LoggingChannel.IsEnabled%28LoggingLevel%20level%2C%20long%20keywords%29");
		}
#endif
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingTarget.IsEnabled(Windows.Foundation.Diagnostics.LoggingLevel, long)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void LogEvent(string eventName)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Foundation.Diagnostics.LoggingChannel", "void LoggingChannel.LogEvent(string eventName)");
		}
#endif
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingTarget.LogEvent(string)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void LogEvent(string eventName, global::Windows.Foundation.Diagnostics.LoggingFields fields)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Foundation.Diagnostics.LoggingChannel", "void LoggingChannel.LogEvent(string eventName, LoggingFields fields)");
		}
#endif
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingTarget.LogEvent(string, Windows.Foundation.Diagnostics.LoggingFields)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void LogEvent(string eventName, global::Windows.Foundation.Diagnostics.LoggingFields fields, global::Windows.Foundation.Diagnostics.LoggingLevel level)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Foundation.Diagnostics.LoggingChannel", "void LoggingChannel.LogEvent(string eventName, LoggingFields fields, LoggingLevel level)");
		}
#endif
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingTarget.LogEvent(string, Windows.Foundation.Diagnostics.LoggingFields, Windows.Foundation.Diagnostics.LoggingLevel)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void LogEvent(string eventName, global::Windows.Foundation.Diagnostics.LoggingFields fields, global::Windows.Foundation.Diagnostics.LoggingLevel level, global::Windows.Foundation.Diagnostics.LoggingOptions options)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Foundation.Diagnostics.LoggingChannel", "void LoggingChannel.LogEvent(string eventName, LoggingFields fields, LoggingLevel level, LoggingOptions options)");
		}
#endif
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingTarget.LogEvent(string, Windows.Foundation.Diagnostics.LoggingFields, Windows.Foundation.Diagnostics.LoggingLevel, Windows.Foundation.Diagnostics.LoggingOptions)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Diagnostics.LoggingActivity StartActivity(string startEventName)
		{
			throw new global::System.NotImplementedException("The member LoggingActivity LoggingChannel.StartActivity(string startEventName) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LoggingActivity%20LoggingChannel.StartActivity%28string%20startEventName%29");
		}
#endif
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingTarget.StartActivity(string)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Diagnostics.LoggingActivity StartActivity(string startEventName, global::Windows.Foundation.Diagnostics.LoggingFields fields)
		{
			throw new global::System.NotImplementedException("The member LoggingActivity LoggingChannel.StartActivity(string startEventName, LoggingFields fields) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LoggingActivity%20LoggingChannel.StartActivity%28string%20startEventName%2C%20LoggingFields%20fields%29");
		}
#endif
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingTarget.StartActivity(string, Windows.Foundation.Diagnostics.LoggingFields)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Diagnostics.LoggingActivity StartActivity(string startEventName, global::Windows.Foundation.Diagnostics.LoggingFields fields, global::Windows.Foundation.Diagnostics.LoggingLevel level)
		{
			throw new global::System.NotImplementedException("The member LoggingActivity LoggingChannel.StartActivity(string startEventName, LoggingFields fields, LoggingLevel level) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LoggingActivity%20LoggingChannel.StartActivity%28string%20startEventName%2C%20LoggingFields%20fields%2C%20LoggingLevel%20level%29");
		}
#endif
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingTarget.StartActivity(string, Windows.Foundation.Diagnostics.LoggingFields, Windows.Foundation.Diagnostics.LoggingLevel)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Diagnostics.LoggingActivity StartActivity(string startEventName, global::Windows.Foundation.Diagnostics.LoggingFields fields, global::Windows.Foundation.Diagnostics.LoggingLevel level, global::Windows.Foundation.Diagnostics.LoggingOptions options)
		{
			throw new global::System.NotImplementedException("The member LoggingActivity LoggingChannel.StartActivity(string startEventName, LoggingFields fields, LoggingLevel level, LoggingOptions options) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LoggingActivity%20LoggingChannel.StartActivity%28string%20startEventName%2C%20LoggingFields%20fields%2C%20LoggingLevel%20level%2C%20LoggingOptions%20options%29");
		}
#endif
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Windows.Foundation.Diagnostics.ILoggingTarget.StartActivity(string, Windows.Foundation.Diagnostics.LoggingFields, Windows.Foundation.Diagnostics.LoggingLevel, Windows.Foundation.Diagnostics.LoggingOptions)
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Enabled.get
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Id.get
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Level.get
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.Name.get
		// Forced skipping of method Windows.Foundation.Diagnostics.LoggingChannel.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Foundation.Diagnostics.ILoggingChannel, object> LoggingEnabled
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Foundation.Diagnostics.LoggingChannel", "event TypedEventHandler<ILoggingChannel, object> LoggingChannel.LoggingEnabled");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Foundation.Diagnostics.LoggingChannel", "event TypedEventHandler<ILoggingChannel, object> LoggingChannel.LoggingEnabled");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		event global::Windows.Foundation.TypedEventHandler<global::Windows.Foundation.Diagnostics.ILoggingChannel, object> global::Windows.Foundation.Diagnostics.ILoggingChannel.LoggingEnabled
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Foundation.Diagnostics.LoggingChannel", "event TypedEventHandler<ILoggingChannel, object> LoggingChannel.LoggingEnabled");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Foundation.Diagnostics.LoggingChannel", "event TypedEventHandler<ILoggingChannel, object> LoggingChannel.LoggingEnabled");
			}
		}
#endif
		// Processing: Windows.Foundation.Diagnostics.ILoggingChannel
		// Processing: System.IDisposable
		// Processing: Windows.Foundation.Diagnostics.ILoggingTarget
	}
}
