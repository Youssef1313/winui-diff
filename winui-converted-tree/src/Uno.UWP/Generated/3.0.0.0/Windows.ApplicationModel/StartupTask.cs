// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.ApplicationModel
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class StartupTask
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal StartupTask()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.ApplicationModel.StartupTaskState State
		{
			get
			{
				throw new global::System.NotImplementedException("The member StartupTaskState StartupTask.State is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=StartupTaskState%20StartupTask.State");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string TaskId
		{
			get
			{
				throw new global::System.NotImplementedException("The member string StartupTask.TaskId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20StartupTask.TaskId");
			}
		}
#endif
		// Forced skipping of method Windows.ApplicationModel.StartupTask.As<I>()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.ApplicationModel.StartupTask>> GetForCurrentPackageAsync()
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<IReadOnlyList<StartupTask>> StartupTask.GetForCurrentPackageAsync() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CIReadOnlyList%3CStartupTask%3E%3E%20StartupTask.GetForCurrentPackageAsync%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.StartupTask> GetAsync(string taskId)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<StartupTask> StartupTask.GetAsync(string taskId) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CStartupTask%3E%20StartupTask.GetAsync%28string%20taskId%29");
		}
#endif
		// Forced skipping of method Windows.ApplicationModel.StartupTask.FromAbi(nint)
		// Forced skipping of method Windows.ApplicationModel.StartupTask.operator ==(Windows.ApplicationModel.StartupTask, Windows.ApplicationModel.StartupTask)
		// Forced skipping of method Windows.ApplicationModel.StartupTask.operator !=(Windows.ApplicationModel.StartupTask, Windows.ApplicationModel.StartupTask)
		// Forced skipping of method Windows.ApplicationModel.StartupTask.Equals(Windows.ApplicationModel.StartupTask)
		// Forced skipping of method Windows.ApplicationModel.StartupTask.Equals(object)
		// Forced skipping of method Windows.ApplicationModel.StartupTask.GetHashCode()
		// Forced skipping of method Windows.ApplicationModel.StartupTask.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.ApplicationModel.StartupTask.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.ApplicationModel.StartupTask.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.ApplicationModel.StartupTask.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<global::Windows.ApplicationModel.StartupTaskState> RequestEnableAsync()
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<StartupTaskState> StartupTask.RequestEnableAsync() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CStartupTaskState%3E%20StartupTask.RequestEnableAsync%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Disable()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.ApplicationModel.StartupTask", "void StartupTask.Disable()");
		}
#endif
		// Forced skipping of method Windows.ApplicationModel.StartupTask.State.get
		// Forced skipping of method Windows.ApplicationModel.StartupTask.TaskId.get
		// Forced skipping of method Windows.ApplicationModel.StartupTask.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
