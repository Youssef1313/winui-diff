// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.UI.Core
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class CoreWindowFlyout
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Popups.UICommandInvokedHandler BackButtonCommand
		{
			get
			{
				throw new global::System.NotImplementedException("The member UICommandInvokedHandler CoreWindowFlyout.BackButtonCommand is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=UICommandInvokedHandler%20CoreWindowFlyout.BackButtonCommand");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Core.CoreWindowFlyout", "UICommandInvokedHandler CoreWindowFlyout.BackButtonCommand");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<global::Windows.UI.Popups.IUICommand> Commands
		{
			get
			{
				throw new global::System.NotImplementedException("The member IList<IUICommand> CoreWindowFlyout.Commands is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IList%3CIUICommand%3E%20CoreWindowFlyout.Commands");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint DefaultCommandIndex
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint CoreWindowFlyout.DefaultCommandIndex is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20CoreWindowFlyout.DefaultCommandIndex");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Core.CoreWindowFlyout", "uint CoreWindowFlyout.DefaultCommandIndex");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int IsInteractionDelayed
		{
			get
			{
				throw new global::System.NotImplementedException("The member int CoreWindowFlyout.IsInteractionDelayed is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20CoreWindowFlyout.IsInteractionDelayed");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Core.CoreWindowFlyout", "int CoreWindowFlyout.IsInteractionDelayed");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Size MaxSize
		{
			get
			{
				throw new global::System.NotImplementedException("The member Size CoreWindowFlyout.MaxSize is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Size%20CoreWindowFlyout.MaxSize");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Size MinSize
		{
			get
			{
				throw new global::System.NotImplementedException("The member Size CoreWindowFlyout.MinSize is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Size%20CoreWindowFlyout.MinSize");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string Title
		{
			get
			{
				throw new global::System.NotImplementedException("The member string CoreWindowFlyout.Title is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20CoreWindowFlyout.Title");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Core.CoreWindowFlyout", "string CoreWindowFlyout.Title");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public CoreWindowFlyout(global::Windows.Foundation.Point position)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Core.CoreWindowFlyout", "CoreWindowFlyout.CoreWindowFlyout(Point position)");
		}
#endif
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.CoreWindowFlyout(Windows.Foundation.Point)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public CoreWindowFlyout(global::Windows.Foundation.Point position, string title)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Core.CoreWindowFlyout", "CoreWindowFlyout.CoreWindowFlyout(Point position, string title)");
		}
#endif
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.CoreWindowFlyout(Windows.Foundation.Point, string)
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.FromAbi(nint)
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.operator ==(Windows.UI.Core.CoreWindowFlyout, Windows.UI.Core.CoreWindowFlyout)
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.operator !=(Windows.UI.Core.CoreWindowFlyout, Windows.UI.Core.CoreWindowFlyout)
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.Equals(Windows.UI.Core.CoreWindowFlyout)
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.Equals(object)
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.GetHashCode()
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<global::Windows.UI.Popups.IUICommand> ShowAsync()
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<IUICommand> CoreWindowFlyout.ShowAsync() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CIUICommand%3E%20CoreWindowFlyout.ShowAsync%28%29");
		}
#endif
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.Showing.add
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.Showing.remove
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.BackButtonCommand.get
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.BackButtonCommand.set
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.Commands.get
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.DefaultCommandIndex.get
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.DefaultCommandIndex.set
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.IsInteractionDelayed.get
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.IsInteractionDelayed.set
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.MaxSize.get
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.MinSize.get
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.Title.get
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.Title.set
		// Forced skipping of method Windows.UI.Core.CoreWindowFlyout.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Core.CoreWindow, global::Windows.UI.Core.CoreWindowPopupShowingEventArgs> Showing
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Core.CoreWindowFlyout", "event TypedEventHandler<CoreWindow, CoreWindowPopupShowingEventArgs> CoreWindowFlyout.Showing");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Core.CoreWindowFlyout", "event TypedEventHandler<CoreWindow, CoreWindowPopupShowingEventArgs> CoreWindowFlyout.Showing");
			}
		}
#endif
	}
}
