// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.ApplicationModel.Calls
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class LockScreenCallUI
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal LockScreenCallUI()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string CallTitle
		{
			get
			{
				throw new global::System.NotImplementedException("The member string LockScreenCallUI.CallTitle is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20LockScreenCallUI.CallTitle");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.ApplicationModel.Calls.LockScreenCallUI", "string LockScreenCallUI.CallTitle");
			}
		}
#endif
		// Forced skipping of method Windows.ApplicationModel.Calls.LockScreenCallUI.FromAbi(nint)
		// Forced skipping of method Windows.ApplicationModel.Calls.LockScreenCallUI.operator ==(Windows.ApplicationModel.Calls.LockScreenCallUI, Windows.ApplicationModel.Calls.LockScreenCallUI)
		// Forced skipping of method Windows.ApplicationModel.Calls.LockScreenCallUI.operator !=(Windows.ApplicationModel.Calls.LockScreenCallUI, Windows.ApplicationModel.Calls.LockScreenCallUI)
		// Forced skipping of method Windows.ApplicationModel.Calls.LockScreenCallUI.Equals(Windows.ApplicationModel.Calls.LockScreenCallUI)
		// Forced skipping of method Windows.ApplicationModel.Calls.LockScreenCallUI.Equals(object)
		// Forced skipping of method Windows.ApplicationModel.Calls.LockScreenCallUI.GetHashCode()
		// Forced skipping of method Windows.ApplicationModel.Calls.LockScreenCallUI.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.ApplicationModel.Calls.LockScreenCallUI.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.ApplicationModel.Calls.LockScreenCallUI.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.ApplicationModel.Calls.LockScreenCallUI.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Dismiss()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.ApplicationModel.Calls.LockScreenCallUI", "void LockScreenCallUI.Dismiss()");
		}
#endif
		// Forced skipping of method Windows.ApplicationModel.Calls.LockScreenCallUI.Closed.add
		// Forced skipping of method Windows.ApplicationModel.Calls.LockScreenCallUI.Closed.remove
		// Forced skipping of method Windows.ApplicationModel.Calls.LockScreenCallUI.EndRequested.add
		// Forced skipping of method Windows.ApplicationModel.Calls.LockScreenCallUI.EndRequested.remove
		// Forced skipping of method Windows.ApplicationModel.Calls.LockScreenCallUI.CallTitle.get
		// Forced skipping of method Windows.ApplicationModel.Calls.LockScreenCallUI.CallTitle.set
		// Forced skipping of method Windows.ApplicationModel.Calls.LockScreenCallUI.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Calls.LockScreenCallUI, object> Closed
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.ApplicationModel.Calls.LockScreenCallUI", "event TypedEventHandler<LockScreenCallUI, object> LockScreenCallUI.Closed");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.ApplicationModel.Calls.LockScreenCallUI", "event TypedEventHandler<LockScreenCallUI, object> LockScreenCallUI.Closed");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.Calls.LockScreenCallUI, global::Windows.ApplicationModel.Calls.LockScreenCallEndRequestedEventArgs> EndRequested
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.ApplicationModel.Calls.LockScreenCallUI", "event TypedEventHandler<LockScreenCallUI, LockScreenCallEndRequestedEventArgs> LockScreenCallUI.EndRequested");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.ApplicationModel.Calls.LockScreenCallUI", "event TypedEventHandler<LockScreenCallUI, LockScreenCallEndRequestedEventArgs> LockScreenCallUI.EndRequested");
			}
		}
#endif
	}
}
