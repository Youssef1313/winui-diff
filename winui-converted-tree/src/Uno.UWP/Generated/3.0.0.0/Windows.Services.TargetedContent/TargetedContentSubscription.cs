// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Services.TargetedContent
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class TargetedContentSubscription
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal TargetedContentSubscription()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string Id
		{
			get
			{
				throw new global::System.NotImplementedException("The member string TargetedContentSubscription.Id is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20TargetedContentSubscription.Id");
			}
		}
#endif
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.As<I>()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::Windows.Services.TargetedContent.TargetedContentSubscription> GetAsync(string subscriptionId)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<TargetedContentSubscription> TargetedContentSubscription.GetAsync(string subscriptionId) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CTargetedContentSubscription%3E%20TargetedContentSubscription.GetAsync%28string%20subscriptionId%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Services.TargetedContent.TargetedContentSubscriptionOptions GetOptions(string subscriptionId)
		{
			throw new global::System.NotImplementedException("The member TargetedContentSubscriptionOptions TargetedContentSubscription.GetOptions(string subscriptionId) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TargetedContentSubscriptionOptions%20TargetedContentSubscription.GetOptions%28string%20subscriptionId%29");
		}
#endif
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.FromAbi(nint)
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.operator ==(Windows.Services.TargetedContent.TargetedContentSubscription, Windows.Services.TargetedContent.TargetedContentSubscription)
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.operator !=(Windows.Services.TargetedContent.TargetedContentSubscription, Windows.Services.TargetedContent.TargetedContentSubscription)
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.Equals(Windows.Services.TargetedContent.TargetedContentSubscription)
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.Equals(object)
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.GetHashCode()
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<global::Windows.Services.TargetedContent.TargetedContentContainer> GetContentContainerAsync()
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<TargetedContentContainer> TargetedContentSubscription.GetContentContainerAsync() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CTargetedContentContainer%3E%20TargetedContentSubscription.GetContentContainerAsync%28%29");
		}
#endif
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.AvailabilityChanged.add
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.AvailabilityChanged.remove
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.ContentChanged.add
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.ContentChanged.remove
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.StateChanged.add
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.StateChanged.remove
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.Id.get
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscription.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Services.TargetedContent.TargetedContentSubscription, global::Windows.Services.TargetedContent.TargetedContentAvailabilityChangedEventArgs> AvailabilityChanged
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.TargetedContent.TargetedContentSubscription", "event TypedEventHandler<TargetedContentSubscription, TargetedContentAvailabilityChangedEventArgs> TargetedContentSubscription.AvailabilityChanged");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.TargetedContent.TargetedContentSubscription", "event TypedEventHandler<TargetedContentSubscription, TargetedContentAvailabilityChangedEventArgs> TargetedContentSubscription.AvailabilityChanged");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Services.TargetedContent.TargetedContentSubscription, global::Windows.Services.TargetedContent.TargetedContentChangedEventArgs> ContentChanged
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.TargetedContent.TargetedContentSubscription", "event TypedEventHandler<TargetedContentSubscription, TargetedContentChangedEventArgs> TargetedContentSubscription.ContentChanged");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.TargetedContent.TargetedContentSubscription", "event TypedEventHandler<TargetedContentSubscription, TargetedContentChangedEventArgs> TargetedContentSubscription.ContentChanged");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Services.TargetedContent.TargetedContentSubscription, global::Windows.Services.TargetedContent.TargetedContentStateChangedEventArgs> StateChanged
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.TargetedContent.TargetedContentSubscription", "event TypedEventHandler<TargetedContentSubscription, TargetedContentStateChangedEventArgs> TargetedContentSubscription.StateChanged");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.TargetedContent.TargetedContentSubscription", "event TypedEventHandler<TargetedContentSubscription, TargetedContentStateChangedEventArgs> TargetedContentSubscription.StateChanged");
			}
		}
#endif
	}
}
