// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Services.TargetedContent
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class TargetedContentSubscriptionOptions
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal TargetedContentSubscriptionOptions()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool AllowPartialContentAvailability
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool TargetedContentSubscriptionOptions.AllowPartialContentAvailability is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20TargetedContentSubscriptionOptions.AllowPartialContentAvailability");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.TargetedContent.TargetedContentSubscriptionOptions", "bool TargetedContentSubscriptionOptions.AllowPartialContentAvailability");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IDictionary<string, string> CloudQueryParameters
		{
			get
			{
				throw new global::System.NotImplementedException("The member IDictionary<string, string> TargetedContentSubscriptionOptions.CloudQueryParameters is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IDictionary%3Cstring%2C%20string%3E%20TargetedContentSubscriptionOptions.CloudQueryParameters");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<string> LocalFilters
		{
			get
			{
				throw new global::System.NotImplementedException("The member IList<string> TargetedContentSubscriptionOptions.LocalFilters is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IList%3Cstring%3E%20TargetedContentSubscriptionOptions.LocalFilters");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string SubscriptionId
		{
			get
			{
				throw new global::System.NotImplementedException("The member string TargetedContentSubscriptionOptions.SubscriptionId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20TargetedContentSubscriptionOptions.SubscriptionId");
			}
		}
#endif
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscriptionOptions.FromAbi(nint)
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscriptionOptions.operator ==(Windows.Services.TargetedContent.TargetedContentSubscriptionOptions, Windows.Services.TargetedContent.TargetedContentSubscriptionOptions)
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscriptionOptions.operator !=(Windows.Services.TargetedContent.TargetedContentSubscriptionOptions, Windows.Services.TargetedContent.TargetedContentSubscriptionOptions)
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscriptionOptions.Equals(Windows.Services.TargetedContent.TargetedContentSubscriptionOptions)
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscriptionOptions.Equals(object)
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscriptionOptions.GetHashCode()
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscriptionOptions.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscriptionOptions.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscriptionOptions.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscriptionOptions.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Update()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.TargetedContent.TargetedContentSubscriptionOptions", "void TargetedContentSubscriptionOptions.Update()");
		}
#endif
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscriptionOptions.AllowPartialContentAvailability.get
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscriptionOptions.AllowPartialContentAvailability.set
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscriptionOptions.CloudQueryParameters.get
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscriptionOptions.LocalFilters.get
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscriptionOptions.SubscriptionId.get
		// Forced skipping of method Windows.Services.TargetedContent.TargetedContentSubscriptionOptions.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
