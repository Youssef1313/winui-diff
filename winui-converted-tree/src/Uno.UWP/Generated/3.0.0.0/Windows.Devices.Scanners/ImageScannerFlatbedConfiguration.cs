// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.Scanners
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class ImageScannerFlatbedConfiguration : global::Windows.Devices.Scanners.IImageScannerFormatConfiguration, global::Windows.Devices.Scanners.IImageScannerSourceConfiguration
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal ImageScannerFlatbedConfiguration()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerFormat global::Windows.Devices.Scanners.IImageScannerFormatConfiguration.DefaultFormat
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerFormat ImageScannerFlatbedConfiguration.DefaultFormat is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerFormat%20ImageScannerFlatbedConfiguration.DefaultFormat");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerFormat global::Windows.Devices.Scanners.IImageScannerFormatConfiguration.Format
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerFormat ImageScannerFlatbedConfiguration.Format is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerFormat%20ImageScannerFlatbedConfiguration.Format");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFlatbedConfiguration", "ImageScannerFormat ImageScannerFlatbedConfiguration.Format");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerResolution global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.ActualResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFlatbedConfiguration.ActualResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFlatbedConfiguration.ActualResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerAutoCroppingMode global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.AutoCroppingMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerAutoCroppingMode ImageScannerFlatbedConfiguration.AutoCroppingMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerAutoCroppingMode%20ImageScannerFlatbedConfiguration.AutoCroppingMode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFlatbedConfiguration", "ImageScannerAutoCroppingMode ImageScannerFlatbedConfiguration.AutoCroppingMode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		int global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.Brightness
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFlatbedConfiguration.Brightness is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFlatbedConfiguration.Brightness");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFlatbedConfiguration", "int ImageScannerFlatbedConfiguration.Brightness");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		uint global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.BrightnessStep
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint ImageScannerFlatbedConfiguration.BrightnessStep is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20ImageScannerFlatbedConfiguration.BrightnessStep");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerColorMode global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.ColorMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerColorMode ImageScannerFlatbedConfiguration.ColorMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerColorMode%20ImageScannerFlatbedConfiguration.ColorMode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFlatbedConfiguration", "ImageScannerColorMode ImageScannerFlatbedConfiguration.ColorMode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		int global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.Contrast
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFlatbedConfiguration.Contrast is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFlatbedConfiguration.Contrast");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFlatbedConfiguration", "int ImageScannerFlatbedConfiguration.Contrast");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		uint global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.ContrastStep
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint ImageScannerFlatbedConfiguration.ContrastStep is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20ImageScannerFlatbedConfiguration.ContrastStep");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		int global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.DefaultBrightness
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFlatbedConfiguration.DefaultBrightness is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFlatbedConfiguration.DefaultBrightness");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerColorMode global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.DefaultColorMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerColorMode ImageScannerFlatbedConfiguration.DefaultColorMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerColorMode%20ImageScannerFlatbedConfiguration.DefaultColorMode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		int global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.DefaultContrast
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFlatbedConfiguration.DefaultContrast is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFlatbedConfiguration.DefaultContrast");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerResolution global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.DesiredResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFlatbedConfiguration.DesiredResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFlatbedConfiguration.DesiredResolution");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFlatbedConfiguration", "ImageScannerResolution ImageScannerFlatbedConfiguration.DesiredResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		int global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxBrightness
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFlatbedConfiguration.MaxBrightness is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFlatbedConfiguration.MaxBrightness");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		int global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxContrast
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFlatbedConfiguration.MaxContrast is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFlatbedConfiguration.MaxContrast");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerResolution global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFlatbedConfiguration.MaxResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFlatbedConfiguration.MaxResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Foundation.Size global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxScanArea
		{
			get
			{
				throw new global::System.NotImplementedException("The member Size ImageScannerFlatbedConfiguration.MaxScanArea is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Size%20ImageScannerFlatbedConfiguration.MaxScanArea");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		int global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinBrightness
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFlatbedConfiguration.MinBrightness is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFlatbedConfiguration.MinBrightness");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		int global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinContrast
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFlatbedConfiguration.MinContrast is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFlatbedConfiguration.MinContrast");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerResolution global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFlatbedConfiguration.MinResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFlatbedConfiguration.MinResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Foundation.Size global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinScanArea
		{
			get
			{
				throw new global::System.NotImplementedException("The member Size ImageScannerFlatbedConfiguration.MinScanArea is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Size%20ImageScannerFlatbedConfiguration.MinScanArea");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerResolution global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.OpticalResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFlatbedConfiguration.OpticalResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFlatbedConfiguration.OpticalResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Foundation.Rect global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.SelectedScanRegion
		{
			get
			{
				throw new global::System.NotImplementedException("The member Rect ImageScannerFlatbedConfiguration.SelectedScanRegion is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Rect%20ImageScannerFlatbedConfiguration.SelectedScanRegion");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFlatbedConfiguration", "Rect ImageScannerFlatbedConfiguration.SelectedScanRegion");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerResolution ActualResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFlatbedConfiguration.ActualResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFlatbedConfiguration.ActualResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerAutoCroppingMode AutoCroppingMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerAutoCroppingMode ImageScannerFlatbedConfiguration.AutoCroppingMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerAutoCroppingMode%20ImageScannerFlatbedConfiguration.AutoCroppingMode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFlatbedConfiguration", "ImageScannerAutoCroppingMode ImageScannerFlatbedConfiguration.AutoCroppingMode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int Brightness
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFlatbedConfiguration.Brightness is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFlatbedConfiguration.Brightness");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFlatbedConfiguration", "int ImageScannerFlatbedConfiguration.Brightness");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint BrightnessStep
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint ImageScannerFlatbedConfiguration.BrightnessStep is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20ImageScannerFlatbedConfiguration.BrightnessStep");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerColorMode ColorMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerColorMode ImageScannerFlatbedConfiguration.ColorMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerColorMode%20ImageScannerFlatbedConfiguration.ColorMode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFlatbedConfiguration", "ImageScannerColorMode ImageScannerFlatbedConfiguration.ColorMode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int Contrast
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFlatbedConfiguration.Contrast is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFlatbedConfiguration.Contrast");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFlatbedConfiguration", "int ImageScannerFlatbedConfiguration.Contrast");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint ContrastStep
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint ImageScannerFlatbedConfiguration.ContrastStep is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20ImageScannerFlatbedConfiguration.ContrastStep");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int DefaultBrightness
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFlatbedConfiguration.DefaultBrightness is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFlatbedConfiguration.DefaultBrightness");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerColorMode DefaultColorMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerColorMode ImageScannerFlatbedConfiguration.DefaultColorMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerColorMode%20ImageScannerFlatbedConfiguration.DefaultColorMode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int DefaultContrast
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFlatbedConfiguration.DefaultContrast is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFlatbedConfiguration.DefaultContrast");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerFormat DefaultFormat
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerFormat ImageScannerFlatbedConfiguration.DefaultFormat is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerFormat%20ImageScannerFlatbedConfiguration.DefaultFormat");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerResolution DesiredResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFlatbedConfiguration.DesiredResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFlatbedConfiguration.DesiredResolution");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFlatbedConfiguration", "ImageScannerResolution ImageScannerFlatbedConfiguration.DesiredResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerFormat Format
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerFormat ImageScannerFlatbedConfiguration.Format is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerFormat%20ImageScannerFlatbedConfiguration.Format");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFlatbedConfiguration", "ImageScannerFormat ImageScannerFlatbedConfiguration.Format");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int MaxBrightness
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFlatbedConfiguration.MaxBrightness is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFlatbedConfiguration.MaxBrightness");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int MaxContrast
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFlatbedConfiguration.MaxContrast is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFlatbedConfiguration.MaxContrast");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerResolution MaxResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFlatbedConfiguration.MaxResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFlatbedConfiguration.MaxResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Size MaxScanArea
		{
			get
			{
				throw new global::System.NotImplementedException("The member Size ImageScannerFlatbedConfiguration.MaxScanArea is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Size%20ImageScannerFlatbedConfiguration.MaxScanArea");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int MinBrightness
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFlatbedConfiguration.MinBrightness is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFlatbedConfiguration.MinBrightness");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int MinContrast
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFlatbedConfiguration.MinContrast is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFlatbedConfiguration.MinContrast");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerResolution MinResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFlatbedConfiguration.MinResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFlatbedConfiguration.MinResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Size MinScanArea
		{
			get
			{
				throw new global::System.NotImplementedException("The member Size ImageScannerFlatbedConfiguration.MinScanArea is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Size%20ImageScannerFlatbedConfiguration.MinScanArea");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerResolution OpticalResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFlatbedConfiguration.OpticalResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFlatbedConfiguration.OpticalResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Rect SelectedScanRegion
		{
			get
			{
				throw new global::System.NotImplementedException("The member Rect ImageScannerFlatbedConfiguration.SelectedScanRegion is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Rect%20ImageScannerFlatbedConfiguration.SelectedScanRegion");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFlatbedConfiguration", "Rect ImageScannerFlatbedConfiguration.SelectedScanRegion");
			}
		}
#endif
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.FromAbi(nint)
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.operator ==(Windows.Devices.Scanners.ImageScannerFlatbedConfiguration, Windows.Devices.Scanners.ImageScannerFlatbedConfiguration)
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.operator !=(Windows.Devices.Scanners.ImageScannerFlatbedConfiguration, Windows.Devices.Scanners.ImageScannerFlatbedConfiguration)
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Equals(Windows.Devices.Scanners.ImageScannerFlatbedConfiguration)
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Equals(object)
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.GetHashCode()
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsFormatSupported(global::Windows.Devices.Scanners.ImageScannerFormat value)
		{
			throw new global::System.NotImplementedException("The member bool ImageScannerFlatbedConfiguration.IsFormatSupported(ImageScannerFormat value) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ImageScannerFlatbedConfiguration.IsFormatSupported%28ImageScannerFormat%20value%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerFormatConfiguration.IsFormatSupported(Windows.Devices.Scanners.ImageScannerFormat)
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerFormatConfiguration.DefaultFormat.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerFormatConfiguration.Format.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerFormatConfiguration.Format.set
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsAutoCroppingModeSupported(global::Windows.Devices.Scanners.ImageScannerAutoCroppingMode value)
		{
			throw new global::System.NotImplementedException("The member bool ImageScannerFlatbedConfiguration.IsAutoCroppingModeSupported(ImageScannerAutoCroppingMode value) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ImageScannerFlatbedConfiguration.IsAutoCroppingModeSupported%28ImageScannerAutoCroppingMode%20value%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.IsAutoCroppingModeSupported(Windows.Devices.Scanners.ImageScannerAutoCroppingMode)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsColorModeSupported(global::Windows.Devices.Scanners.ImageScannerColorMode value)
		{
			throw new global::System.NotImplementedException("The member bool ImageScannerFlatbedConfiguration.IsColorModeSupported(ImageScannerColorMode value) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ImageScannerFlatbedConfiguration.IsColorModeSupported%28ImageScannerColorMode%20value%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.IsColorModeSupported(Windows.Devices.Scanners.ImageScannerColorMode)
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.ActualResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.AutoCroppingMode.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.AutoCroppingMode.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.Brightness.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.Brightness.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.BrightnessStep.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.ColorMode.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.ColorMode.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.Contrast.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.Contrast.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.ContrastStep.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.DefaultBrightness.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.DefaultColorMode.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.DefaultContrast.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.DesiredResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.DesiredResolution.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxBrightness.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxContrast.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxScanArea.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinBrightness.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinContrast.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinScanArea.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.OpticalResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.SelectedScanRegion.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.SelectedScanRegion.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.ActualResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.AutoCroppingMode.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.AutoCroppingMode.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Brightness.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Brightness.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.BrightnessStep.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.ColorMode.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.ColorMode.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Contrast.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Contrast.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.ContrastStep.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.DefaultBrightness.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.DefaultColorMode.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.DefaultContrast.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.DefaultFormat.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.DesiredResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.DesiredResolution.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Format.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.Format.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.MaxBrightness.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.MaxContrast.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.MaxResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.MaxScanArea.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.MinBrightness.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.MinContrast.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.MinResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.MinScanArea.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.OpticalResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.SelectedScanRegion.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.SelectedScanRegion.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFlatbedConfiguration.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
		// Processing: Windows.Devices.Scanners.IImageScannerFormatConfiguration
		// Processing: Windows.Devices.Scanners.IImageScannerSourceConfiguration
	}
}
