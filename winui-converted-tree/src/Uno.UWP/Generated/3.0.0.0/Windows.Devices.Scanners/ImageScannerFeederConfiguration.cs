// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.Scanners
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class ImageScannerFeederConfiguration : global::Windows.Devices.Scanners.IImageScannerFormatConfiguration, global::Windows.Devices.Scanners.IImageScannerSourceConfiguration
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal ImageScannerFeederConfiguration()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerFormat global::Windows.Devices.Scanners.IImageScannerFormatConfiguration.DefaultFormat
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerFormat ImageScannerFeederConfiguration.DefaultFormat is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerFormat%20ImageScannerFeederConfiguration.DefaultFormat");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerFormat global::Windows.Devices.Scanners.IImageScannerFormatConfiguration.Format
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerFormat ImageScannerFeederConfiguration.Format is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerFormat%20ImageScannerFeederConfiguration.Format");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "ImageScannerFormat ImageScannerFeederConfiguration.Format");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerResolution global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.ActualResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFeederConfiguration.ActualResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFeederConfiguration.ActualResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerAutoCroppingMode global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.AutoCroppingMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerAutoCroppingMode ImageScannerFeederConfiguration.AutoCroppingMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerAutoCroppingMode%20ImageScannerFeederConfiguration.AutoCroppingMode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "ImageScannerAutoCroppingMode ImageScannerFeederConfiguration.AutoCroppingMode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		int global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.Brightness
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFeederConfiguration.Brightness is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFeederConfiguration.Brightness");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "int ImageScannerFeederConfiguration.Brightness");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		uint global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.BrightnessStep
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint ImageScannerFeederConfiguration.BrightnessStep is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20ImageScannerFeederConfiguration.BrightnessStep");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerColorMode global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.ColorMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerColorMode ImageScannerFeederConfiguration.ColorMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerColorMode%20ImageScannerFeederConfiguration.ColorMode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "ImageScannerColorMode ImageScannerFeederConfiguration.ColorMode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		int global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.Contrast
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFeederConfiguration.Contrast is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFeederConfiguration.Contrast");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "int ImageScannerFeederConfiguration.Contrast");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		uint global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.ContrastStep
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint ImageScannerFeederConfiguration.ContrastStep is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20ImageScannerFeederConfiguration.ContrastStep");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		int global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.DefaultBrightness
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFeederConfiguration.DefaultBrightness is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFeederConfiguration.DefaultBrightness");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerColorMode global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.DefaultColorMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerColorMode ImageScannerFeederConfiguration.DefaultColorMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerColorMode%20ImageScannerFeederConfiguration.DefaultColorMode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		int global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.DefaultContrast
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFeederConfiguration.DefaultContrast is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFeederConfiguration.DefaultContrast");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerResolution global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.DesiredResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFeederConfiguration.DesiredResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFeederConfiguration.DesiredResolution");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "ImageScannerResolution ImageScannerFeederConfiguration.DesiredResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		int global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxBrightness
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFeederConfiguration.MaxBrightness is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFeederConfiguration.MaxBrightness");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		int global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxContrast
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFeederConfiguration.MaxContrast is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFeederConfiguration.MaxContrast");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerResolution global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFeederConfiguration.MaxResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFeederConfiguration.MaxResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Foundation.Size global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxScanArea
		{
			get
			{
				throw new global::System.NotImplementedException("The member Size ImageScannerFeederConfiguration.MaxScanArea is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Size%20ImageScannerFeederConfiguration.MaxScanArea");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		int global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinBrightness
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFeederConfiguration.MinBrightness is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFeederConfiguration.MinBrightness");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		int global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinContrast
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFeederConfiguration.MinContrast is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFeederConfiguration.MinContrast");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerResolution global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFeederConfiguration.MinResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFeederConfiguration.MinResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Foundation.Size global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinScanArea
		{
			get
			{
				throw new global::System.NotImplementedException("The member Size ImageScannerFeederConfiguration.MinScanArea is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Size%20ImageScannerFeederConfiguration.MinScanArea");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Scanners.ImageScannerResolution global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.OpticalResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFeederConfiguration.OpticalResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFeederConfiguration.OpticalResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Foundation.Rect global::Windows.Devices.Scanners.IImageScannerSourceConfiguration.SelectedScanRegion
		{
			get
			{
				throw new global::System.NotImplementedException("The member Rect ImageScannerFeederConfiguration.SelectedScanRegion is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Rect%20ImageScannerFeederConfiguration.SelectedScanRegion");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "Rect ImageScannerFeederConfiguration.SelectedScanRegion");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerResolution ActualResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFeederConfiguration.ActualResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFeederConfiguration.ActualResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerAutoCroppingMode AutoCroppingMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerAutoCroppingMode ImageScannerFeederConfiguration.AutoCroppingMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerAutoCroppingMode%20ImageScannerFeederConfiguration.AutoCroppingMode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "ImageScannerAutoCroppingMode ImageScannerFeederConfiguration.AutoCroppingMode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool AutoDetectPageSize
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool ImageScannerFeederConfiguration.AutoDetectPageSize is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ImageScannerFeederConfiguration.AutoDetectPageSize");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "bool ImageScannerFeederConfiguration.AutoDetectPageSize");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int Brightness
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFeederConfiguration.Brightness is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFeederConfiguration.Brightness");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "int ImageScannerFeederConfiguration.Brightness");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint BrightnessStep
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint ImageScannerFeederConfiguration.BrightnessStep is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20ImageScannerFeederConfiguration.BrightnessStep");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanAutoDetectPageSize
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool ImageScannerFeederConfiguration.CanAutoDetectPageSize is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ImageScannerFeederConfiguration.CanAutoDetectPageSize");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanScanAhead
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool ImageScannerFeederConfiguration.CanScanAhead is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ImageScannerFeederConfiguration.CanScanAhead");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanScanDuplex
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool ImageScannerFeederConfiguration.CanScanDuplex is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ImageScannerFeederConfiguration.CanScanDuplex");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerColorMode ColorMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerColorMode ImageScannerFeederConfiguration.ColorMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerColorMode%20ImageScannerFeederConfiguration.ColorMode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "ImageScannerColorMode ImageScannerFeederConfiguration.ColorMode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int Contrast
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFeederConfiguration.Contrast is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFeederConfiguration.Contrast");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "int ImageScannerFeederConfiguration.Contrast");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint ContrastStep
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint ImageScannerFeederConfiguration.ContrastStep is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20ImageScannerFeederConfiguration.ContrastStep");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int DefaultBrightness
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFeederConfiguration.DefaultBrightness is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFeederConfiguration.DefaultBrightness");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerColorMode DefaultColorMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerColorMode ImageScannerFeederConfiguration.DefaultColorMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerColorMode%20ImageScannerFeederConfiguration.DefaultColorMode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int DefaultContrast
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFeederConfiguration.DefaultContrast is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFeederConfiguration.DefaultContrast");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerFormat DefaultFormat
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerFormat ImageScannerFeederConfiguration.DefaultFormat is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerFormat%20ImageScannerFeederConfiguration.DefaultFormat");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerResolution DesiredResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFeederConfiguration.DesiredResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFeederConfiguration.DesiredResolution");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "ImageScannerResolution ImageScannerFeederConfiguration.DesiredResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool Duplex
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool ImageScannerFeederConfiguration.Duplex is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ImageScannerFeederConfiguration.Duplex");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "bool ImageScannerFeederConfiguration.Duplex");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerFormat Format
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerFormat ImageScannerFeederConfiguration.Format is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerFormat%20ImageScannerFeederConfiguration.Format");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "ImageScannerFormat ImageScannerFeederConfiguration.Format");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int MaxBrightness
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFeederConfiguration.MaxBrightness is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFeederConfiguration.MaxBrightness");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int MaxContrast
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFeederConfiguration.MaxContrast is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFeederConfiguration.MaxContrast");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint MaxNumberOfPages
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint ImageScannerFeederConfiguration.MaxNumberOfPages is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20ImageScannerFeederConfiguration.MaxNumberOfPages");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "uint ImageScannerFeederConfiguration.MaxNumberOfPages");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerResolution MaxResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFeederConfiguration.MaxResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFeederConfiguration.MaxResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Size MaxScanArea
		{
			get
			{
				throw new global::System.NotImplementedException("The member Size ImageScannerFeederConfiguration.MaxScanArea is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Size%20ImageScannerFeederConfiguration.MaxScanArea");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int MinBrightness
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFeederConfiguration.MinBrightness is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFeederConfiguration.MinBrightness");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int MinContrast
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ImageScannerFeederConfiguration.MinContrast is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ImageScannerFeederConfiguration.MinContrast");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerResolution MinResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFeederConfiguration.MinResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFeederConfiguration.MinResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Size MinScanArea
		{
			get
			{
				throw new global::System.NotImplementedException("The member Size ImageScannerFeederConfiguration.MinScanArea is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Size%20ImageScannerFeederConfiguration.MinScanArea");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Scanners.ImageScannerResolution OpticalResolution
		{
			get
			{
				throw new global::System.NotImplementedException("The member ImageScannerResolution ImageScannerFeederConfiguration.OpticalResolution is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ImageScannerResolution%20ImageScannerFeederConfiguration.OpticalResolution");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Graphics.Printing.PrintOrientation PageOrientation
		{
			get
			{
				throw new global::System.NotImplementedException("The member PrintOrientation ImageScannerFeederConfiguration.PageOrientation is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=PrintOrientation%20ImageScannerFeederConfiguration.PageOrientation");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "PrintOrientation ImageScannerFeederConfiguration.PageOrientation");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Graphics.Printing.PrintMediaSize PageSize
		{
			get
			{
				throw new global::System.NotImplementedException("The member PrintMediaSize ImageScannerFeederConfiguration.PageSize is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=PrintMediaSize%20ImageScannerFeederConfiguration.PageSize");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "PrintMediaSize ImageScannerFeederConfiguration.PageSize");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Size PageSizeDimensions
		{
			get
			{
				throw new global::System.NotImplementedException("The member Size ImageScannerFeederConfiguration.PageSizeDimensions is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Size%20ImageScannerFeederConfiguration.PageSizeDimensions");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool ScanAhead
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool ImageScannerFeederConfiguration.ScanAhead is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ImageScannerFeederConfiguration.ScanAhead");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "bool ImageScannerFeederConfiguration.ScanAhead");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Rect SelectedScanRegion
		{
			get
			{
				throw new global::System.NotImplementedException("The member Rect ImageScannerFeederConfiguration.SelectedScanRegion is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Rect%20ImageScannerFeederConfiguration.SelectedScanRegion");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Scanners.ImageScannerFeederConfiguration", "Rect ImageScannerFeederConfiguration.SelectedScanRegion");
			}
		}
#endif
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.FromAbi(nint)
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.operator ==(Windows.Devices.Scanners.ImageScannerFeederConfiguration, Windows.Devices.Scanners.ImageScannerFeederConfiguration)
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.operator !=(Windows.Devices.Scanners.ImageScannerFeederConfiguration, Windows.Devices.Scanners.ImageScannerFeederConfiguration)
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Equals(Windows.Devices.Scanners.ImageScannerFeederConfiguration)
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Equals(object)
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.GetHashCode()
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsFormatSupported(global::Windows.Devices.Scanners.ImageScannerFormat value)
		{
			throw new global::System.NotImplementedException("The member bool ImageScannerFeederConfiguration.IsFormatSupported(ImageScannerFormat value) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ImageScannerFeederConfiguration.IsFormatSupported%28ImageScannerFormat%20value%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerFormatConfiguration.IsFormatSupported(Windows.Devices.Scanners.ImageScannerFormat)
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerFormatConfiguration.DefaultFormat.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerFormatConfiguration.Format.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerFormatConfiguration.Format.set
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsAutoCroppingModeSupported(global::Windows.Devices.Scanners.ImageScannerAutoCroppingMode value)
		{
			throw new global::System.NotImplementedException("The member bool ImageScannerFeederConfiguration.IsAutoCroppingModeSupported(ImageScannerAutoCroppingMode value) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ImageScannerFeederConfiguration.IsAutoCroppingModeSupported%28ImageScannerAutoCroppingMode%20value%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.IsAutoCroppingModeSupported(Windows.Devices.Scanners.ImageScannerAutoCroppingMode)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsColorModeSupported(global::Windows.Devices.Scanners.ImageScannerColorMode value)
		{
			throw new global::System.NotImplementedException("The member bool ImageScannerFeederConfiguration.IsColorModeSupported(ImageScannerColorMode value) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ImageScannerFeederConfiguration.IsColorModeSupported%28ImageScannerColorMode%20value%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.IsColorModeSupported(Windows.Devices.Scanners.ImageScannerColorMode)
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.ActualResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.AutoCroppingMode.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.AutoCroppingMode.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.Brightness.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.Brightness.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.BrightnessStep.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.ColorMode.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.ColorMode.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.Contrast.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.Contrast.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.ContrastStep.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.DefaultBrightness.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.DefaultColorMode.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.DefaultContrast.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.DesiredResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.DesiredResolution.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxBrightness.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxContrast.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxScanArea.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinBrightness.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinContrast.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinScanArea.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.OpticalResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.SelectedScanRegion.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Windows.Devices.Scanners.IImageScannerSourceConfiguration.SelectedScanRegion.set
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsPageSizeSupported(global::Windows.Graphics.Printing.PrintMediaSize pageSize, global::Windows.Graphics.Printing.PrintOrientation pageOrientation)
		{
			throw new global::System.NotImplementedException("The member bool ImageScannerFeederConfiguration.IsPageSizeSupported(PrintMediaSize pageSize, PrintOrientation pageOrientation) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ImageScannerFeederConfiguration.IsPageSizeSupported%28PrintMediaSize%20pageSize%2C%20PrintOrientation%20pageOrientation%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.ActualResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.AutoCroppingMode.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.AutoCroppingMode.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.AutoDetectPageSize.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.AutoDetectPageSize.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Brightness.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Brightness.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.BrightnessStep.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.CanAutoDetectPageSize.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.CanScanAhead.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.CanScanDuplex.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.ColorMode.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.ColorMode.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Contrast.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Contrast.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.ContrastStep.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.DefaultBrightness.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.DefaultColorMode.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.DefaultContrast.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.DefaultFormat.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.DesiredResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.DesiredResolution.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Duplex.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Duplex.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Format.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.Format.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.MaxBrightness.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.MaxContrast.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.MaxNumberOfPages.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.MaxNumberOfPages.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.MaxResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.MaxScanArea.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.MinBrightness.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.MinContrast.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.MinResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.MinScanArea.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.OpticalResolution.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.PageOrientation.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.PageOrientation.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.PageSize.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.PageSize.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.PageSizeDimensions.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.ScanAhead.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.ScanAhead.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.SelectedScanRegion.get
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.SelectedScanRegion.set
		// Forced skipping of method Windows.Devices.Scanners.ImageScannerFeederConfiguration.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
		// Processing: Windows.Devices.Scanners.IImageScannerFormatConfiguration
		// Processing: Windows.Devices.Scanners.IImageScannerSourceConfiguration
	}
}
