// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.Scanners
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial interface IImageScannerSourceConfiguration : global::Windows.Devices.Scanners.IImageScannerFormatConfiguration
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		global::Windows.Devices.Scanners.ImageScannerResolution ActualResolution
		{
			get;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		global::Windows.Devices.Scanners.ImageScannerAutoCroppingMode AutoCroppingMode
		{
			get;
			set;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		int Brightness
		{
			get;
			set;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		uint BrightnessStep
		{
			get;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		global::Windows.Devices.Scanners.ImageScannerColorMode ColorMode
		{
			get;
			set;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		int Contrast
		{
			get;
			set;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		uint ContrastStep
		{
			get;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		int DefaultBrightness
		{
			get;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		global::Windows.Devices.Scanners.ImageScannerColorMode DefaultColorMode
		{
			get;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		int DefaultContrast
		{
			get;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		global::Windows.Devices.Scanners.ImageScannerResolution DesiredResolution
		{
			get;
			set;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		int MaxBrightness
		{
			get;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		int MaxContrast
		{
			get;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		global::Windows.Devices.Scanners.ImageScannerResolution MaxResolution
		{
			get;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		global::Windows.Foundation.Size MaxScanArea
		{
			get;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		int MinBrightness
		{
			get;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		int MinContrast
		{
			get;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		global::Windows.Devices.Scanners.ImageScannerResolution MinResolution
		{
			get;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		global::Windows.Foundation.Size MinScanArea
		{
			get;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		global::Windows.Devices.Scanners.ImageScannerResolution OpticalResolution
		{
			get;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		global::Windows.Foundation.Rect SelectedScanRegion
		{
			get;
			set;
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		bool IsAutoCroppingModeSupported(global::Windows.Devices.Scanners.ImageScannerAutoCroppingMode value);
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		bool IsColorModeSupported(global::Windows.Devices.Scanners.ImageScannerColorMode value);
#endif
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.ActualResolution.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.AutoCroppingMode.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.AutoCroppingMode.set
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.Brightness.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.Brightness.set
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.BrightnessStep.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.ColorMode.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.ColorMode.set
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.Contrast.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.Contrast.set
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.ContrastStep.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.DefaultBrightness.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.DefaultColorMode.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.DefaultContrast.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.DesiredResolution.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.DesiredResolution.set
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxBrightness.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxContrast.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxResolution.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.MaxScanArea.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinBrightness.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinContrast.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinResolution.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.MinScanArea.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.OpticalResolution.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.SelectedScanRegion.get
		// Forced skipping of method Windows.Devices.Scanners.IImageScannerSourceConfiguration.SelectedScanRegion.set
	}
}
