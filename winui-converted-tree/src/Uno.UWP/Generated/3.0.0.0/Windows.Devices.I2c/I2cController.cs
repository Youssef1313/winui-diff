// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.I2c
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class I2cController
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal I2cController()
		{
		}
#endif
		// Forced skipping of method Windows.Devices.I2c.I2cController.As<I>()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.I2c.I2cController>> GetControllersAsync(global::Windows.Devices.I2c.Provider.II2cProvider provider)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<IReadOnlyList<I2cController>> I2cController.GetControllersAsync(II2cProvider provider) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CIReadOnlyList%3CI2cController%3E%3E%20I2cController.GetControllersAsync%28II2cProvider%20provider%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.I2c.I2cController> GetDefaultAsync()
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<I2cController> I2cController.GetDefaultAsync() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CI2cController%3E%20I2cController.GetDefaultAsync%28%29");
		}
#endif
		// Forced skipping of method Windows.Devices.I2c.I2cController.FromAbi(nint)
		// Forced skipping of method Windows.Devices.I2c.I2cController.operator ==(Windows.Devices.I2c.I2cController, Windows.Devices.I2c.I2cController)
		// Forced skipping of method Windows.Devices.I2c.I2cController.operator !=(Windows.Devices.I2c.I2cController, Windows.Devices.I2c.I2cController)
		// Forced skipping of method Windows.Devices.I2c.I2cController.Equals(Windows.Devices.I2c.I2cController)
		// Forced skipping of method Windows.Devices.I2c.I2cController.Equals(object)
		// Forced skipping of method Windows.Devices.I2c.I2cController.GetHashCode()
		// Forced skipping of method Windows.Devices.I2c.I2cController.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Devices.I2c.I2cController.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Devices.I2c.I2cController.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Devices.I2c.I2cController.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.I2c.I2cDevice GetDevice(global::Windows.Devices.I2c.I2cConnectionSettings settings)
		{
			throw new global::System.NotImplementedException("The member I2cDevice I2cController.GetDevice(I2cConnectionSettings settings) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=I2cDevice%20I2cController.GetDevice%28I2cConnectionSettings%20settings%29");
		}
#endif
		// Forced skipping of method Windows.Devices.I2c.I2cController.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
