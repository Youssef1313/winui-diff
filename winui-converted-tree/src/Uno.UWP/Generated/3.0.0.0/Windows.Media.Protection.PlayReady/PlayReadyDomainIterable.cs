// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Media.Protection.PlayReady
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class PlayReadyDomainIterable : global::System.Collections.Generic.IEnumerable<global::Windows.Media.Protection.PlayReady.IPlayReadyDomain>, global::System.Collections.IEnumerable
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public PlayReadyDomainIterable(global::System.Guid domainAccountId)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Protection.PlayReady.PlayReadyDomainIterable", "PlayReadyDomainIterable.PlayReadyDomainIterable(Guid domainAccountId)");
		}
#endif
		// Forced skipping of method Windows.Media.Protection.PlayReady.PlayReadyDomainIterable.PlayReadyDomainIterable(System.Guid)
		// Forced skipping of method Windows.Media.Protection.PlayReady.PlayReadyDomainIterable.FromAbi(nint)
		// Forced skipping of method Windows.Media.Protection.PlayReady.PlayReadyDomainIterable.operator ==(Windows.Media.Protection.PlayReady.PlayReadyDomainIterable, Windows.Media.Protection.PlayReady.PlayReadyDomainIterable)
		// Forced skipping of method Windows.Media.Protection.PlayReady.PlayReadyDomainIterable.operator !=(Windows.Media.Protection.PlayReady.PlayReadyDomainIterable, Windows.Media.Protection.PlayReady.PlayReadyDomainIterable)
		// Forced skipping of method Windows.Media.Protection.PlayReady.PlayReadyDomainIterable.Equals(Windows.Media.Protection.PlayReady.PlayReadyDomainIterable)
		// Forced skipping of method Windows.Media.Protection.PlayReady.PlayReadyDomainIterable.Equals(object)
		// Forced skipping of method Windows.Media.Protection.PlayReady.PlayReadyDomainIterable.GetHashCode()
		// Forced skipping of method Windows.Media.Protection.PlayReady.PlayReadyDomainIterable.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Media.Protection.PlayReady.PlayReadyDomainIterable.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Media.Protection.PlayReady.PlayReadyDomainIterable.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Media.Protection.PlayReady.PlayReadyDomainIterable.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IEnumerator<global::Windows.Media.Protection.PlayReady.IPlayReadyDomain> GetEnumerator()
		{
			throw new global::System.NotImplementedException("The member IEnumerator<IPlayReadyDomain> PlayReadyDomainIterable.GetEnumerator() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IEnumerator%3CIPlayReadyDomain%3E%20PlayReadyDomainIterable.GetEnumerator%28%29");
		}
#endif
		// Forced skipping of method Windows.Media.Protection.PlayReady.PlayReadyDomainIterable.System.Collections.IEnumerable.GetEnumerator()
		// Forced skipping of method Windows.Media.Protection.PlayReady.PlayReadyDomainIterable.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
		// Processing: System.Collections.Generic.IEnumerable<Windows.Media.Protection.PlayReady.IPlayReadyDomain>
		// Processing: System.Collections.IEnumerable
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		// DeclaringType: System.Collections.IEnumerable
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		 global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
		{
			throw new global::System.NotSupportedException();
		}
#endif
	}
}
