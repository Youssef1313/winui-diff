// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.UI.Notifications
{
#if false || false || false || false || false || false || false
	[global::Uno.NotImplemented]
#endif
	public partial class ScheduledToastNotification
	{
		// Skipping already declared property Content
		// Skipping already declared property DeliveryTime
#if false || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.DateTimeOffset? ExpirationTime
		{
			get
			{
				throw new global::System.NotImplementedException("The member DateTimeOffset? ScheduledToastNotification.ExpirationTime is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DateTimeOffset%3F%20ScheduledToastNotification.ExpirationTime");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Notifications.ScheduledToastNotification", "DateTimeOffset? ScheduledToastNotification.ExpirationTime");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string Group
		{
			get
			{
				throw new global::System.NotImplementedException("The member string ScheduledToastNotification.Group is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20ScheduledToastNotification.Group");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Notifications.ScheduledToastNotification", "string ScheduledToastNotification.Group");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string Id
		{
			get
			{
				throw new global::System.NotImplementedException("The member string ScheduledToastNotification.Id is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20ScheduledToastNotification.Id");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Notifications.ScheduledToastNotification", "string ScheduledToastNotification.Id");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint MaximumSnoozeCount
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint ScheduledToastNotification.MaximumSnoozeCount is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20ScheduledToastNotification.MaximumSnoozeCount");
			}
		}
#endif
#if false || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Notifications.NotificationMirroring NotificationMirroring
		{
			get
			{
				throw new global::System.NotImplementedException("The member NotificationMirroring ScheduledToastNotification.NotificationMirroring is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=NotificationMirroring%20ScheduledToastNotification.NotificationMirroring");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Notifications.ScheduledToastNotification", "NotificationMirroring ScheduledToastNotification.NotificationMirroring");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string RemoteId
		{
			get
			{
				throw new global::System.NotImplementedException("The member string ScheduledToastNotification.RemoteId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20ScheduledToastNotification.RemoteId");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Notifications.ScheduledToastNotification", "string ScheduledToastNotification.RemoteId");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.TimeSpan? SnoozeInterval
		{
			get
			{
				throw new global::System.NotImplementedException("The member TimeSpan? ScheduledToastNotification.SnoozeInterval is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TimeSpan%3F%20ScheduledToastNotification.SnoozeInterval");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool SuppressPopup
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool ScheduledToastNotification.SuppressPopup is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ScheduledToastNotification.SuppressPopup");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Notifications.ScheduledToastNotification", "bool ScheduledToastNotification.SuppressPopup");
			}
		}
#endif
		// Skipping already declared property Tag
		// Skipping already declared method Windows.UI.Notifications.ScheduledToastNotification.ScheduledToastNotification(Windows.Data.Xml.Dom.XmlDocument, System.DateTimeOffset)
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.ScheduledToastNotification(Windows.Data.Xml.Dom.XmlDocument, System.DateTimeOffset)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public ScheduledToastNotification(global::Windows.Data.Xml.Dom.XmlDocument content, global::System.DateTimeOffset deliveryTime, global::System.TimeSpan snoozeInterval, uint maximumSnoozeCount)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Notifications.ScheduledToastNotification", "ScheduledToastNotification.ScheduledToastNotification(XmlDocument content, DateTimeOffset deliveryTime, TimeSpan snoozeInterval, uint maximumSnoozeCount)");
		}
#endif
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.ScheduledToastNotification(Windows.Data.Xml.Dom.XmlDocument, System.DateTimeOffset, System.TimeSpan, uint)
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.FromAbi(nint)
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.operator ==(Windows.UI.Notifications.ScheduledToastNotification, Windows.UI.Notifications.ScheduledToastNotification)
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.operator !=(Windows.UI.Notifications.ScheduledToastNotification, Windows.UI.Notifications.ScheduledToastNotification)
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.Equals(Windows.UI.Notifications.ScheduledToastNotification)
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.Equals(object)
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.GetHashCode()
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.Content.get
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.DeliveryTime.get
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.ExpirationTime.get
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.ExpirationTime.set
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.Group.get
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.Group.set
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.Id.get
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.Id.set
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.MaximumSnoozeCount.get
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.NotificationMirroring.get
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.NotificationMirroring.set
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.RemoteId.get
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.RemoteId.set
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.SnoozeInterval.get
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.SuppressPopup.get
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.SuppressPopup.set
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.Tag.get
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.Tag.set
		// Forced skipping of method Windows.UI.Notifications.ScheduledToastNotification.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
