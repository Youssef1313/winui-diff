// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.Pwm
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class PwmController
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal PwmController()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double ActualFrequency
		{
			get
			{
				throw new global::System.NotImplementedException("The member double PwmController.ActualFrequency is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20PwmController.ActualFrequency");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double MaxFrequency
		{
			get
			{
				throw new global::System.NotImplementedException("The member double PwmController.MaxFrequency is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20PwmController.MaxFrequency");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double MinFrequency
		{
			get
			{
				throw new global::System.NotImplementedException("The member double PwmController.MinFrequency is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20PwmController.MinFrequency");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int PinCount
		{
			get
			{
				throw new global::System.NotImplementedException("The member int PwmController.PinCount is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20PwmController.PinCount");
			}
		}
#endif
		// Forced skipping of method Windows.Devices.Pwm.PwmController.As<I>()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Pwm.PwmController>> GetControllersAsync(global::Windows.Devices.Pwm.Provider.IPwmProvider provider)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<IReadOnlyList<PwmController>> PwmController.GetControllersAsync(IPwmProvider provider) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CIReadOnlyList%3CPwmController%3E%3E%20PwmController.GetControllersAsync%28IPwmProvider%20provider%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Pwm.PwmController> GetDefaultAsync()
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<PwmController> PwmController.GetDefaultAsync() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CPwmController%3E%20PwmController.GetDefaultAsync%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static string GetDeviceSelector()
		{
			throw new global::System.NotImplementedException("The member string PwmController.GetDeviceSelector() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20PwmController.GetDeviceSelector%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static string GetDeviceSelector(string friendlyName)
		{
			throw new global::System.NotImplementedException("The member string PwmController.GetDeviceSelector(string friendlyName) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20PwmController.GetDeviceSelector%28string%20friendlyName%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Pwm.PwmController> FromIdAsync(string deviceId)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<PwmController> PwmController.FromIdAsync(string deviceId) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CPwmController%3E%20PwmController.FromIdAsync%28string%20deviceId%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Pwm.PwmController.FromAbi(nint)
		// Forced skipping of method Windows.Devices.Pwm.PwmController.operator ==(Windows.Devices.Pwm.PwmController, Windows.Devices.Pwm.PwmController)
		// Forced skipping of method Windows.Devices.Pwm.PwmController.operator !=(Windows.Devices.Pwm.PwmController, Windows.Devices.Pwm.PwmController)
		// Forced skipping of method Windows.Devices.Pwm.PwmController.Equals(Windows.Devices.Pwm.PwmController)
		// Forced skipping of method Windows.Devices.Pwm.PwmController.Equals(object)
		// Forced skipping of method Windows.Devices.Pwm.PwmController.GetHashCode()
		// Forced skipping of method Windows.Devices.Pwm.PwmController.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Devices.Pwm.PwmController.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Devices.Pwm.PwmController.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Devices.Pwm.PwmController.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double SetDesiredFrequency(double desiredFrequency)
		{
			throw new global::System.NotImplementedException("The member double PwmController.SetDesiredFrequency(double desiredFrequency) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20PwmController.SetDesiredFrequency%28double%20desiredFrequency%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Pwm.PwmPin OpenPin(int pinNumber)
		{
			throw new global::System.NotImplementedException("The member PwmPin PwmController.OpenPin(int pinNumber) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=PwmPin%20PwmController.OpenPin%28int%20pinNumber%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Pwm.PwmController.ActualFrequency.get
		// Forced skipping of method Windows.Devices.Pwm.PwmController.MaxFrequency.get
		// Forced skipping of method Windows.Devices.Pwm.PwmController.MinFrequency.get
		// Forced skipping of method Windows.Devices.Pwm.PwmController.PinCount.get
		// Forced skipping of method Windows.Devices.Pwm.PwmController.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
