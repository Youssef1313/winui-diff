// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.Sensors
{
#if false || false || false || false || false || false || false
	[global::Uno.NotImplemented]
#endif
	public partial class LightSensorReading
	{
		// Skipping already declared property IlluminanceInLux
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.TimeSpan? PerformanceCount
		{
			get
			{
				throw new global::System.NotImplementedException("The member TimeSpan? LightSensorReading.PerformanceCount is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TimeSpan%3F%20LightSensorReading.PerformanceCount");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyDictionary<string, object> Properties
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyDictionary<string, object> LightSensorReading.Properties is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyDictionary%3Cstring%2C%20object%3E%20LightSensorReading.Properties");
			}
		}
#endif
		// Skipping already declared property Timestamp
		// Forced skipping of method Windows.Devices.Sensors.LightSensorReading.FromAbi(nint)
		// Forced skipping of method Windows.Devices.Sensors.LightSensorReading.operator ==(Windows.Devices.Sensors.LightSensorReading, Windows.Devices.Sensors.LightSensorReading)
		// Forced skipping of method Windows.Devices.Sensors.LightSensorReading.operator !=(Windows.Devices.Sensors.LightSensorReading, Windows.Devices.Sensors.LightSensorReading)
		// Forced skipping of method Windows.Devices.Sensors.LightSensorReading.Equals(Windows.Devices.Sensors.LightSensorReading)
		// Forced skipping of method Windows.Devices.Sensors.LightSensorReading.Equals(object)
		// Forced skipping of method Windows.Devices.Sensors.LightSensorReading.GetHashCode()
		// Forced skipping of method Windows.Devices.Sensors.LightSensorReading.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Devices.Sensors.LightSensorReading.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Devices.Sensors.LightSensorReading.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Devices.Sensors.LightSensorReading.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.Devices.Sensors.LightSensorReading.IlluminanceInLux.get
		// Forced skipping of method Windows.Devices.Sensors.LightSensorReading.PerformanceCount.get
		// Forced skipping of method Windows.Devices.Sensors.LightSensorReading.Properties.get
		// Forced skipping of method Windows.Devices.Sensors.LightSensorReading.Timestamp.get
		// Forced skipping of method Windows.Devices.Sensors.LightSensorReading.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
