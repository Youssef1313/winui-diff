// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Storage.Pickers
{
#if false || false || false || false || false || false || false
	[global::Uno.NotImplemented]
#endif
	public partial class FolderPicker
	{
		// Skipping already declared property CommitButtonText
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Collections.ValueSet ContinuationData
		{
			get
			{
				throw new global::System.NotImplementedException("The member ValueSet FolderPicker.ContinuationData is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ValueSet%20FolderPicker.ContinuationData");
			}
		}
#endif
		// Skipping already declared property FileTypeFilter
		// Skipping already declared property SettingsIdentifier
		// Skipping already declared property SuggestedStartLocation
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.System.User User
		{
			get
			{
				throw new global::System.NotImplementedException("The member User FolderPicker.User is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=User%20FolderPicker.User");
			}
		}
#endif
		// Skipping already declared property ViewMode
		// Skipping already declared method Windows.Storage.Pickers.FolderPicker.FolderPicker()
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.FolderPicker()
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.As<I>()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Storage.Pickers.FolderPicker CreateForUser(global::Windows.System.User user)
		{
			throw new global::System.NotImplementedException("The member FolderPicker FolderPicker.CreateForUser(User user) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=FolderPicker%20FolderPicker.CreateForUser%28User%20user%29");
		}
#endif
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.FromAbi(nint)
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.operator ==(Windows.Storage.Pickers.FolderPicker, Windows.Storage.Pickers.FolderPicker)
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.operator !=(Windows.Storage.Pickers.FolderPicker, Windows.Storage.Pickers.FolderPicker)
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.Equals(Windows.Storage.Pickers.FolderPicker)
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.Equals(object)
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.GetHashCode()
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void PickFolderAndContinue()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Storage.Pickers.FolderPicker", "void FolderPicker.PickFolderAndContinue()");
		}
#endif
#if false || false || IS_UNIT_TESTS || false || false || __NETSTD_REFERENCE__ || false
		[global::Uno.NotImplemented("IS_UNIT_TESTS", "__NETSTD_REFERENCE__")]
		public global::Windows.Foundation.IAsyncOperation<global::Windows.Storage.StorageFolder> PickSingleFolderAsync()
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<StorageFolder> FolderPicker.PickSingleFolderAsync() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CStorageFolder%3E%20FolderPicker.PickSingleFolderAsync%28%29");
		}
#endif
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.CommitButtonText.get
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.CommitButtonText.set
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.ContinuationData.get
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.FileTypeFilter.get
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.SettingsIdentifier.get
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.SettingsIdentifier.set
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.SuggestedStartLocation.get
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.SuggestedStartLocation.set
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.User.get
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.ViewMode.get
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.ViewMode.set
		// Forced skipping of method Windows.Storage.Pickers.FolderPicker.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
