// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.UI.WindowManagement
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class AppWindowPlacement
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal AppWindowPlacement()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.WindowManagement.DisplayRegion DisplayRegion
		{
			get
			{
				throw new global::System.NotImplementedException("The member DisplayRegion AppWindowPlacement.DisplayRegion is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DisplayRegion%20AppWindowPlacement.DisplayRegion");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Point Offset
		{
			get
			{
				throw new global::System.NotImplementedException("The member Point AppWindowPlacement.Offset is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Point%20AppWindowPlacement.Offset");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Size Size
		{
			get
			{
				throw new global::System.NotImplementedException("The member Size AppWindowPlacement.Size is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Size%20AppWindowPlacement.Size");
			}
		}
#endif
		// Forced skipping of method Windows.UI.WindowManagement.AppWindowPlacement.FromAbi(nint)
		// Forced skipping of method Windows.UI.WindowManagement.AppWindowPlacement.operator ==(Windows.UI.WindowManagement.AppWindowPlacement, Windows.UI.WindowManagement.AppWindowPlacement)
		// Forced skipping of method Windows.UI.WindowManagement.AppWindowPlacement.operator !=(Windows.UI.WindowManagement.AppWindowPlacement, Windows.UI.WindowManagement.AppWindowPlacement)
		// Forced skipping of method Windows.UI.WindowManagement.AppWindowPlacement.Equals(Windows.UI.WindowManagement.AppWindowPlacement)
		// Forced skipping of method Windows.UI.WindowManagement.AppWindowPlacement.Equals(object)
		// Forced skipping of method Windows.UI.WindowManagement.AppWindowPlacement.GetHashCode()
		// Forced skipping of method Windows.UI.WindowManagement.AppWindowPlacement.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.UI.WindowManagement.AppWindowPlacement.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.UI.WindowManagement.AppWindowPlacement.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.UI.WindowManagement.AppWindowPlacement.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.UI.WindowManagement.AppWindowPlacement.DisplayRegion.get
		// Forced skipping of method Windows.UI.WindowManagement.AppWindowPlacement.Offset.get
		// Forced skipping of method Windows.UI.WindowManagement.AppWindowPlacement.Size.get
		// Forced skipping of method Windows.UI.WindowManagement.AppWindowPlacement.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
