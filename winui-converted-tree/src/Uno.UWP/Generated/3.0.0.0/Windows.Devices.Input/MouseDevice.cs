// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.Input
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class MouseDevice
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal MouseDevice()
		{
		}
#endif
		// Forced skipping of method Windows.Devices.Input.MouseDevice.As<I>()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Devices.Input.MouseDevice GetForCurrentView()
		{
			throw new global::System.NotImplementedException("The member MouseDevice MouseDevice.GetForCurrentView() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=MouseDevice%20MouseDevice.GetForCurrentView%28%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Input.MouseDevice.FromAbi(nint)
		// Forced skipping of method Windows.Devices.Input.MouseDevice.operator ==(Windows.Devices.Input.MouseDevice, Windows.Devices.Input.MouseDevice)
		// Forced skipping of method Windows.Devices.Input.MouseDevice.operator !=(Windows.Devices.Input.MouseDevice, Windows.Devices.Input.MouseDevice)
		// Forced skipping of method Windows.Devices.Input.MouseDevice.Equals(Windows.Devices.Input.MouseDevice)
		// Forced skipping of method Windows.Devices.Input.MouseDevice.Equals(object)
		// Forced skipping of method Windows.Devices.Input.MouseDevice.GetHashCode()
		// Forced skipping of method Windows.Devices.Input.MouseDevice.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Devices.Input.MouseDevice.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Devices.Input.MouseDevice.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Devices.Input.MouseDevice.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.Devices.Input.MouseDevice.MouseMoved.add
		// Forced skipping of method Windows.Devices.Input.MouseDevice.MouseMoved.remove
		// Forced skipping of method Windows.Devices.Input.MouseDevice.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Input.MouseDevice, global::Windows.Devices.Input.MouseEventArgs> MouseMoved
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Input.MouseDevice", "event TypedEventHandler<MouseDevice, MouseEventArgs> MouseDevice.MouseMoved");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Input.MouseDevice", "event TypedEventHandler<MouseDevice, MouseEventArgs> MouseDevice.MouseMoved");
			}
		}
#endif
	}
}
