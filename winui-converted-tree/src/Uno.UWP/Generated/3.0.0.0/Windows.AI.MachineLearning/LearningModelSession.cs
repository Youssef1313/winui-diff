// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.AI.MachineLearning
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class LearningModelSession : global::System.IDisposable
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.AI.MachineLearning.LearningModelDevice Device
		{
			get
			{
				throw new global::System.NotImplementedException("The member LearningModelDevice LearningModelSession.Device is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LearningModelDevice%20LearningModelSession.Device");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.Collections.IPropertySet EvaluationProperties
		{
			get
			{
				throw new global::System.NotImplementedException("The member IPropertySet LearningModelSession.EvaluationProperties is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IPropertySet%20LearningModelSession.EvaluationProperties");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.AI.MachineLearning.LearningModel Model
		{
			get
			{
				throw new global::System.NotImplementedException("The member LearningModel LearningModelSession.Model is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LearningModel%20LearningModelSession.Model");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public LearningModelSession(global::Windows.AI.MachineLearning.LearningModel model)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.AI.MachineLearning.LearningModelSession", "LearningModelSession.LearningModelSession(LearningModel model)");
		}
#endif
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelSession.LearningModelSession(Windows.AI.MachineLearning.LearningModel)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public LearningModelSession(global::Windows.AI.MachineLearning.LearningModel model, global::Windows.AI.MachineLearning.LearningModelDevice deviceToRunOn)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.AI.MachineLearning.LearningModelSession", "LearningModelSession.LearningModelSession(LearningModel model, LearningModelDevice deviceToRunOn)");
		}
#endif
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelSession.LearningModelSession(Windows.AI.MachineLearning.LearningModel, Windows.AI.MachineLearning.LearningModelDevice)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public LearningModelSession(global::Windows.AI.MachineLearning.LearningModel model, global::Windows.AI.MachineLearning.LearningModelDevice deviceToRunOn, global::Windows.AI.MachineLearning.LearningModelSessionOptions learningModelSessionOptions)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.AI.MachineLearning.LearningModelSession", "LearningModelSession.LearningModelSession(LearningModel model, LearningModelDevice deviceToRunOn, LearningModelSessionOptions learningModelSessionOptions)");
		}
#endif
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelSession.LearningModelSession(Windows.AI.MachineLearning.LearningModel, Windows.AI.MachineLearning.LearningModelDevice, Windows.AI.MachineLearning.LearningModelSessionOptions)
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelSession.FromAbi(nint)
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelSession.operator ==(Windows.AI.MachineLearning.LearningModelSession, Windows.AI.MachineLearning.LearningModelSession)
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelSession.operator !=(Windows.AI.MachineLearning.LearningModelSession, Windows.AI.MachineLearning.LearningModelSession)
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelSession.Equals(Windows.AI.MachineLearning.LearningModelSession)
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelSession.Equals(object)
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelSession.GetHashCode()
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelSession.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelSession.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelSession.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelSession.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<global::Windows.AI.MachineLearning.LearningModelEvaluationResult> EvaluateAsync(global::Windows.AI.MachineLearning.LearningModelBinding bindings, string correlationId)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<LearningModelEvaluationResult> LearningModelSession.EvaluateAsync(LearningModelBinding bindings, string correlationId) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CLearningModelEvaluationResult%3E%20LearningModelSession.EvaluateAsync%28LearningModelBinding%20bindings%2C%20string%20correlationId%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Foundation.IAsyncOperation<global::Windows.AI.MachineLearning.LearningModelEvaluationResult> EvaluateFeaturesAsync(global::System.Collections.Generic.IDictionary<string, object> features, string correlationId)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<LearningModelEvaluationResult> LearningModelSession.EvaluateFeaturesAsync(IDictionary<string, object> features, string correlationId) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CLearningModelEvaluationResult%3E%20LearningModelSession.EvaluateFeaturesAsync%28IDictionary%3Cstring%2C%20object%3E%20features%2C%20string%20correlationId%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.AI.MachineLearning.LearningModelEvaluationResult Evaluate(global::Windows.AI.MachineLearning.LearningModelBinding bindings, string correlationId)
		{
			throw new global::System.NotImplementedException("The member LearningModelEvaluationResult LearningModelSession.Evaluate(LearningModelBinding bindings, string correlationId) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LearningModelEvaluationResult%20LearningModelSession.Evaluate%28LearningModelBinding%20bindings%2C%20string%20correlationId%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.AI.MachineLearning.LearningModelEvaluationResult EvaluateFeatures(global::System.Collections.Generic.IDictionary<string, object> features, string correlationId)
		{
			throw new global::System.NotImplementedException("The member LearningModelEvaluationResult LearningModelSession.EvaluateFeatures(IDictionary<string, object> features, string correlationId) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LearningModelEvaluationResult%20LearningModelSession.EvaluateFeatures%28IDictionary%3Cstring%2C%20object%3E%20features%2C%20string%20correlationId%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Dispose()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.AI.MachineLearning.LearningModelSession", "void LearningModelSession.Dispose()");
		}
#endif
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelSession.Device.get
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelSession.EvaluationProperties.get
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelSession.Model.get
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelSession.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
		// Processing: System.IDisposable
	}
}
