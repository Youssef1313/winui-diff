// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.AI.MachineLearning
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class LearningModelDevice
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Graphics.DisplayAdapterId AdapterId
		{
			get
			{
				throw new global::System.NotImplementedException("The member DisplayAdapterId LearningModelDevice.AdapterId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DisplayAdapterId%20LearningModelDevice.AdapterId");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice Direct3D11Device
		{
			get
			{
				throw new global::System.NotImplementedException("The member IDirect3DDevice LearningModelDevice.Direct3D11Device is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IDirect3DDevice%20LearningModelDevice.Direct3D11Device");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public LearningModelDevice(global::Windows.AI.MachineLearning.LearningModelDeviceKind deviceKind)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.AI.MachineLearning.LearningModelDevice", "LearningModelDevice.LearningModelDevice(LearningModelDeviceKind deviceKind)");
		}
#endif
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelDevice.LearningModelDevice(Windows.AI.MachineLearning.LearningModelDeviceKind)
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelDevice.As<I>()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.AI.MachineLearning.LearningModelDevice CreateFromDirect3D11Device(global::Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice device)
		{
			throw new global::System.NotImplementedException("The member LearningModelDevice LearningModelDevice.CreateFromDirect3D11Device(IDirect3DDevice device) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LearningModelDevice%20LearningModelDevice.CreateFromDirect3D11Device%28IDirect3DDevice%20device%29");
		}
#endif
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelDevice.FromAbi(nint)
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelDevice.operator ==(Windows.AI.MachineLearning.LearningModelDevice, Windows.AI.MachineLearning.LearningModelDevice)
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelDevice.operator !=(Windows.AI.MachineLearning.LearningModelDevice, Windows.AI.MachineLearning.LearningModelDevice)
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelDevice.Equals(Windows.AI.MachineLearning.LearningModelDevice)
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelDevice.Equals(object)
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelDevice.GetHashCode()
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelDevice.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelDevice.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelDevice.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelDevice.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelDevice.AdapterId.get
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelDevice.Direct3D11Device.get
		// Forced skipping of method Windows.AI.MachineLearning.LearningModelDevice.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
