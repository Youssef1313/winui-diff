// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.UI.Input
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class EdgeGesture
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal EdgeGesture()
		{
		}
#endif
		// Forced skipping of method Windows.UI.Input.EdgeGesture.As<I>()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Input.EdgeGesture GetForCurrentView()
		{
			throw new global::System.NotImplementedException("The member EdgeGesture EdgeGesture.GetForCurrentView() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=EdgeGesture%20EdgeGesture.GetForCurrentView%28%29");
		}
#endif
		// Forced skipping of method Windows.UI.Input.EdgeGesture.FromAbi(nint)
		// Forced skipping of method Windows.UI.Input.EdgeGesture.operator ==(Windows.UI.Input.EdgeGesture, Windows.UI.Input.EdgeGesture)
		// Forced skipping of method Windows.UI.Input.EdgeGesture.operator !=(Windows.UI.Input.EdgeGesture, Windows.UI.Input.EdgeGesture)
		// Forced skipping of method Windows.UI.Input.EdgeGesture.Equals(Windows.UI.Input.EdgeGesture)
		// Forced skipping of method Windows.UI.Input.EdgeGesture.Equals(object)
		// Forced skipping of method Windows.UI.Input.EdgeGesture.GetHashCode()
		// Forced skipping of method Windows.UI.Input.EdgeGesture.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.UI.Input.EdgeGesture.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.UI.Input.EdgeGesture.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.UI.Input.EdgeGesture.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.UI.Input.EdgeGesture.Canceled.add
		// Forced skipping of method Windows.UI.Input.EdgeGesture.Canceled.remove
		// Forced skipping of method Windows.UI.Input.EdgeGesture.Completed.add
		// Forced skipping of method Windows.UI.Input.EdgeGesture.Completed.remove
		// Forced skipping of method Windows.UI.Input.EdgeGesture.Starting.add
		// Forced skipping of method Windows.UI.Input.EdgeGesture.Starting.remove
		// Forced skipping of method Windows.UI.Input.EdgeGesture.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.EdgeGesture, global::Windows.UI.Input.EdgeGestureEventArgs> Canceled
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Input.EdgeGesture", "event TypedEventHandler<EdgeGesture, EdgeGestureEventArgs> EdgeGesture.Canceled");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Input.EdgeGesture", "event TypedEventHandler<EdgeGesture, EdgeGestureEventArgs> EdgeGesture.Canceled");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.EdgeGesture, global::Windows.UI.Input.EdgeGestureEventArgs> Completed
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Input.EdgeGesture", "event TypedEventHandler<EdgeGesture, EdgeGestureEventArgs> EdgeGesture.Completed");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Input.EdgeGesture", "event TypedEventHandler<EdgeGesture, EdgeGestureEventArgs> EdgeGesture.Completed");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Input.EdgeGesture, global::Windows.UI.Input.EdgeGestureEventArgs> Starting
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Input.EdgeGesture", "event TypedEventHandler<EdgeGesture, EdgeGestureEventArgs> EdgeGesture.Starting");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Input.EdgeGesture", "event TypedEventHandler<EdgeGesture, EdgeGestureEventArgs> EdgeGesture.Starting");
			}
		}
#endif
	}
}
