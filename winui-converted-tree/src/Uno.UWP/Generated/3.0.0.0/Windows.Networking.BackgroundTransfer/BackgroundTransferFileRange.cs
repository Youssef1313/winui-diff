// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Networking.BackgroundTransfer
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial struct BackgroundTransferFileRange
	{
		// Forced skipping of method Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange.BackgroundTransferFileRange()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public BackgroundTransferFileRange(ulong _Offset, ulong _Length)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange", "BackgroundTransferFileRange.BackgroundTransferFileRange(ulong _Offset, ulong _Length)");
		}
#endif
		// Forced skipping of method Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange.BackgroundTransferFileRange(ulong, ulong)
		// Forced skipping of method Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange.operator ==(Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange, Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange)
		// Forced skipping of method Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange.operator !=(Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange, Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange)
		// Forced skipping of method Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange.Equals(Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange)
		// Forced skipping of method Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange.Equals(object)
		// Forced skipping of method Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange.GetHashCode()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public ulong Offset;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public ulong Length;
#endif
	}
}
