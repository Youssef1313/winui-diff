// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.ApplicationModel.LockScreen
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class LockApplicationHost
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal LockApplicationHost()
		{
		}
#endif
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockApplicationHost.As<I>()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.ApplicationModel.LockScreen.LockApplicationHost GetForCurrentView()
		{
			throw new global::System.NotImplementedException("The member LockApplicationHost LockApplicationHost.GetForCurrentView() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=LockApplicationHost%20LockApplicationHost.GetForCurrentView%28%29");
		}
#endif
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockApplicationHost.FromAbi(nint)
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockApplicationHost.operator ==(Windows.ApplicationModel.LockScreen.LockApplicationHost, Windows.ApplicationModel.LockScreen.LockApplicationHost)
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockApplicationHost.operator !=(Windows.ApplicationModel.LockScreen.LockApplicationHost, Windows.ApplicationModel.LockScreen.LockApplicationHost)
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockApplicationHost.Equals(Windows.ApplicationModel.LockScreen.LockApplicationHost)
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockApplicationHost.Equals(object)
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockApplicationHost.GetHashCode()
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockApplicationHost.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockApplicationHost.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockApplicationHost.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockApplicationHost.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void RequestUnlock()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.ApplicationModel.LockScreen.LockApplicationHost", "void LockApplicationHost.RequestUnlock()");
		}
#endif
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockApplicationHost.Unlocking.add
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockApplicationHost.Unlocking.remove
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockApplicationHost.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.LockScreen.LockApplicationHost, global::Windows.ApplicationModel.LockScreen.LockScreenUnlockingEventArgs> Unlocking
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.ApplicationModel.LockScreen.LockApplicationHost", "event TypedEventHandler<LockApplicationHost, LockScreenUnlockingEventArgs> LockApplicationHost.Unlocking");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.ApplicationModel.LockScreen.LockApplicationHost", "event TypedEventHandler<LockApplicationHost, LockScreenUnlockingEventArgs> LockApplicationHost.Unlocking");
			}
		}
#endif
	}
}
