// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.ApplicationModel.LockScreen
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class LockScreenInfo
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal LockScreenInfo()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Storage.Streams.IRandomAccessStream AlarmIcon
		{
			get
			{
				throw new global::System.NotImplementedException("The member IRandomAccessStream LockScreenInfo.AlarmIcon is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IRandomAccessStream%20LockScreenInfo.AlarmIcon");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<global::Windows.ApplicationModel.LockScreen.LockScreenBadge> Badges
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<LockScreenBadge> LockScreenInfo.Badges is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3CLockScreenBadge%3E%20LockScreenInfo.Badges");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<string> DetailText
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<string> LockScreenInfo.DetailText is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3Cstring%3E%20LockScreenInfo.DetailText");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Storage.Streams.IRandomAccessStream LockScreenImage
		{
			get
			{
				throw new global::System.NotImplementedException("The member IRandomAccessStream LockScreenInfo.LockScreenImage is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IRandomAccessStream%20LockScreenInfo.LockScreenImage");
			}
		}
#endif
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.FromAbi(nint)
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.operator ==(Windows.ApplicationModel.LockScreen.LockScreenInfo, Windows.ApplicationModel.LockScreen.LockScreenInfo)
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.operator !=(Windows.ApplicationModel.LockScreen.LockScreenInfo, Windows.ApplicationModel.LockScreen.LockScreenInfo)
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.Equals(Windows.ApplicationModel.LockScreen.LockScreenInfo)
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.Equals(object)
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.GetHashCode()
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.AlarmIconChanged.add
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.AlarmIconChanged.remove
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.BadgesChanged.add
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.BadgesChanged.remove
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.DetailTextChanged.add
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.DetailTextChanged.remove
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.LockScreenImageChanged.add
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.LockScreenImageChanged.remove
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.AlarmIcon.get
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.Badges.get
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.DetailText.get
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.LockScreenImage.get
		// Forced skipping of method Windows.ApplicationModel.LockScreen.LockScreenInfo.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.LockScreen.LockScreenInfo, object> AlarmIconChanged
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.ApplicationModel.LockScreen.LockScreenInfo", "event TypedEventHandler<LockScreenInfo, object> LockScreenInfo.AlarmIconChanged");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.ApplicationModel.LockScreen.LockScreenInfo", "event TypedEventHandler<LockScreenInfo, object> LockScreenInfo.AlarmIconChanged");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.LockScreen.LockScreenInfo, object> BadgesChanged
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.ApplicationModel.LockScreen.LockScreenInfo", "event TypedEventHandler<LockScreenInfo, object> LockScreenInfo.BadgesChanged");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.ApplicationModel.LockScreen.LockScreenInfo", "event TypedEventHandler<LockScreenInfo, object> LockScreenInfo.BadgesChanged");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.LockScreen.LockScreenInfo, object> DetailTextChanged
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.ApplicationModel.LockScreen.LockScreenInfo", "event TypedEventHandler<LockScreenInfo, object> LockScreenInfo.DetailTextChanged");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.ApplicationModel.LockScreen.LockScreenInfo", "event TypedEventHandler<LockScreenInfo, object> LockScreenInfo.DetailTextChanged");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.ApplicationModel.LockScreen.LockScreenInfo, object> LockScreenImageChanged
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.ApplicationModel.LockScreen.LockScreenInfo", "event TypedEventHandler<LockScreenInfo, object> LockScreenInfo.LockScreenImageChanged");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.ApplicationModel.LockScreen.LockScreenInfo", "event TypedEventHandler<LockScreenInfo, object> LockScreenInfo.LockScreenImageChanged");
			}
		}
#endif
	}
}
