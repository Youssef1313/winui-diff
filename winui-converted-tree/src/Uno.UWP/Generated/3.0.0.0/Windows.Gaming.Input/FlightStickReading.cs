// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Gaming.Input
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial struct FlightStickReading
	{
		// Forced skipping of method Windows.Gaming.Input.FlightStickReading.FlightStickReading()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public FlightStickReading(ulong _Timestamp, global::Windows.Gaming.Input.FlightStickButtons _Buttons, global::Windows.Gaming.Input.GameControllerSwitchPosition _HatSwitch, double _Roll, double _Pitch, double _Yaw, double _Throttle)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Gaming.Input.FlightStickReading", "FlightStickReading.FlightStickReading(ulong _Timestamp, FlightStickButtons _Buttons, GameControllerSwitchPosition _HatSwitch, double _Roll, double _Pitch, double _Yaw, double _Throttle)");
		}
#endif
		// Forced skipping of method Windows.Gaming.Input.FlightStickReading.FlightStickReading(ulong, Windows.Gaming.Input.FlightStickButtons, Windows.Gaming.Input.GameControllerSwitchPosition, double, double, double, double)
		// Forced skipping of method Windows.Gaming.Input.FlightStickReading.operator ==(Windows.Gaming.Input.FlightStickReading, Windows.Gaming.Input.FlightStickReading)
		// Forced skipping of method Windows.Gaming.Input.FlightStickReading.operator !=(Windows.Gaming.Input.FlightStickReading, Windows.Gaming.Input.FlightStickReading)
		// Forced skipping of method Windows.Gaming.Input.FlightStickReading.Equals(Windows.Gaming.Input.FlightStickReading)
		// Forced skipping of method Windows.Gaming.Input.FlightStickReading.Equals(object)
		// Forced skipping of method Windows.Gaming.Input.FlightStickReading.GetHashCode()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public ulong Timestamp;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public global::Windows.Gaming.Input.FlightStickButtons Buttons;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public global::Windows.Gaming.Input.GameControllerSwitchPosition HatSwitch;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public double Roll;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public double Pitch;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public double Yaw;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public double Throttle;
#endif
	}
}
