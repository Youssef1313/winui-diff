// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Gaming.Input
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class Headset : global::Windows.Gaming.Input.IGameControllerBatteryInfo
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal Headset()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string CaptureDeviceId
		{
			get
			{
				throw new global::System.NotImplementedException("The member string Headset.CaptureDeviceId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20Headset.CaptureDeviceId");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string RenderDeviceId
		{
			get
			{
				throw new global::System.NotImplementedException("The member string Headset.RenderDeviceId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20Headset.RenderDeviceId");
			}
		}
#endif
		// Forced skipping of method Windows.Gaming.Input.Headset.FromAbi(nint)
		// Forced skipping of method Windows.Gaming.Input.Headset.operator ==(Windows.Gaming.Input.Headset, Windows.Gaming.Input.Headset)
		// Forced skipping of method Windows.Gaming.Input.Headset.operator !=(Windows.Gaming.Input.Headset, Windows.Gaming.Input.Headset)
		// Forced skipping of method Windows.Gaming.Input.Headset.Equals(Windows.Gaming.Input.Headset)
		// Forced skipping of method Windows.Gaming.Input.Headset.Equals(object)
		// Forced skipping of method Windows.Gaming.Input.Headset.GetHashCode()
		// Forced skipping of method Windows.Gaming.Input.Headset.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Gaming.Input.Headset.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Gaming.Input.Headset.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Gaming.Input.Headset.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Power.BatteryReport TryGetBatteryReport()
		{
			throw new global::System.NotImplementedException("The member BatteryReport Headset.TryGetBatteryReport() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=BatteryReport%20Headset.TryGetBatteryReport%28%29");
		}
#endif
		// Forced skipping of method Windows.Gaming.Input.Headset.Windows.Gaming.Input.IGameControllerBatteryInfo.TryGetBatteryReport()
		// Forced skipping of method Windows.Gaming.Input.Headset.CaptureDeviceId.get
		// Forced skipping of method Windows.Gaming.Input.Headset.RenderDeviceId.get
		// Forced skipping of method Windows.Gaming.Input.Headset.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
		// Processing: Windows.Gaming.Input.IGameControllerBatteryInfo
	}
}
