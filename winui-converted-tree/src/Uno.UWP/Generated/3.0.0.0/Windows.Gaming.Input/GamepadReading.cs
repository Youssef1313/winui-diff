// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Gaming.Input
{
#if false || false || false || false || false || false || false
	[global::Uno.NotImplemented]
#endif
	public partial struct GamepadReading
	{
		// Forced skipping of method Windows.Gaming.Input.GamepadReading.GamepadReading()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public GamepadReading(ulong _Timestamp, global::Windows.Gaming.Input.GamepadButtons _Buttons, double _LeftTrigger, double _RightTrigger, double _LeftThumbstickX, double _LeftThumbstickY, double _RightThumbstickX, double _RightThumbstickY)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Gaming.Input.GamepadReading", "GamepadReading.GamepadReading(ulong _Timestamp, GamepadButtons _Buttons, double _LeftTrigger, double _RightTrigger, double _LeftThumbstickX, double _LeftThumbstickY, double _RightThumbstickX, double _RightThumbstickY)");
		}
#endif
		// Forced skipping of method Windows.Gaming.Input.GamepadReading.GamepadReading(ulong, Windows.Gaming.Input.GamepadButtons, double, double, double, double, double, double)
		// Forced skipping of method Windows.Gaming.Input.GamepadReading.operator ==(Windows.Gaming.Input.GamepadReading, Windows.Gaming.Input.GamepadReading)
		// Forced skipping of method Windows.Gaming.Input.GamepadReading.operator !=(Windows.Gaming.Input.GamepadReading, Windows.Gaming.Input.GamepadReading)
		// Forced skipping of method Windows.Gaming.Input.GamepadReading.Equals(Windows.Gaming.Input.GamepadReading)
		// Forced skipping of method Windows.Gaming.Input.GamepadReading.Equals(object)
		// Forced skipping of method Windows.Gaming.Input.GamepadReading.GetHashCode()
		// Skipping already declared field Windows.Gaming.Input.GamepadReading.Timestamp
		// Skipping already declared field Windows.Gaming.Input.GamepadReading.Buttons
		// Skipping already declared field Windows.Gaming.Input.GamepadReading.LeftTrigger
		// Skipping already declared field Windows.Gaming.Input.GamepadReading.RightTrigger
		// Skipping already declared field Windows.Gaming.Input.GamepadReading.LeftThumbstickX
		// Skipping already declared field Windows.Gaming.Input.GamepadReading.LeftThumbstickY
		// Skipping already declared field Windows.Gaming.Input.GamepadReading.RightThumbstickX
		// Skipping already declared field Windows.Gaming.Input.GamepadReading.RightThumbstickY
	}
}
