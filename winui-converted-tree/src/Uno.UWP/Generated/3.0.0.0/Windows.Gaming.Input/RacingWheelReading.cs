// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Gaming.Input
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial struct RacingWheelReading
	{
		// Forced skipping of method Windows.Gaming.Input.RacingWheelReading.RacingWheelReading()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public RacingWheelReading(ulong _Timestamp, global::Windows.Gaming.Input.RacingWheelButtons _Buttons, int _PatternShifterGear, double _Wheel, double _Throttle, double _Brake, double _Clutch, double _Handbrake)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Gaming.Input.RacingWheelReading", "RacingWheelReading.RacingWheelReading(ulong _Timestamp, RacingWheelButtons _Buttons, int _PatternShifterGear, double _Wheel, double _Throttle, double _Brake, double _Clutch, double _Handbrake)");
		}
#endif
		// Forced skipping of method Windows.Gaming.Input.RacingWheelReading.RacingWheelReading(ulong, Windows.Gaming.Input.RacingWheelButtons, int, double, double, double, double, double)
		// Forced skipping of method Windows.Gaming.Input.RacingWheelReading.operator ==(Windows.Gaming.Input.RacingWheelReading, Windows.Gaming.Input.RacingWheelReading)
		// Forced skipping of method Windows.Gaming.Input.RacingWheelReading.operator !=(Windows.Gaming.Input.RacingWheelReading, Windows.Gaming.Input.RacingWheelReading)
		// Forced skipping of method Windows.Gaming.Input.RacingWheelReading.Equals(Windows.Gaming.Input.RacingWheelReading)
		// Forced skipping of method Windows.Gaming.Input.RacingWheelReading.Equals(object)
		// Forced skipping of method Windows.Gaming.Input.RacingWheelReading.GetHashCode()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public ulong Timestamp;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public global::Windows.Gaming.Input.RacingWheelButtons Buttons;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public int PatternShifterGear;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public double Wheel;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public double Throttle;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public double Brake;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public double Clutch;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public double Handbrake;
#endif
	}
}
