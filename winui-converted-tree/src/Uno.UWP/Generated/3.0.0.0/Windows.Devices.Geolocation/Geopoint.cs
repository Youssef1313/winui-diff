// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.Geolocation
{
#if false || false || false || false || false || false || false
	[global::Uno.NotImplemented]
#endif
	public partial class Geopoint : global::Windows.Devices.Geolocation.IGeoshape
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Geolocation.AltitudeReferenceSystem global::Windows.Devices.Geolocation.IGeoshape.AltitudeReferenceSystem
		{
			get
			{
				throw new global::System.NotImplementedException("The member AltitudeReferenceSystem Geopoint.AltitudeReferenceSystem is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=AltitudeReferenceSystem%20Geopoint.AltitudeReferenceSystem");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.Devices.Geolocation.GeoshapeType global::Windows.Devices.Geolocation.IGeoshape.GeoshapeType
		{
			get
			{
				throw new global::System.NotImplementedException("The member GeoshapeType Geopoint.GeoshapeType is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=GeoshapeType%20Geopoint.GeoshapeType");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		uint global::Windows.Devices.Geolocation.IGeoshape.SpatialReferenceId
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint Geopoint.SpatialReferenceId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20Geopoint.SpatialReferenceId");
			}
		}
#endif
#if false || __IOS__ || IS_UNIT_TESTS || false || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__IOS__", "IS_UNIT_TESTS", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Geolocation.AltitudeReferenceSystem AltitudeReferenceSystem
		{
			get
			{
				throw new global::System.NotImplementedException("The member AltitudeReferenceSystem Geopoint.AltitudeReferenceSystem is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=AltitudeReferenceSystem%20Geopoint.AltitudeReferenceSystem");
			}
		}
#endif
		// Skipping already declared property GeoshapeType
		// Skipping already declared property Position
#if false || __IOS__ || IS_UNIT_TESTS || false || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__IOS__", "IS_UNIT_TESTS", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint SpatialReferenceId
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint Geopoint.SpatialReferenceId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20Geopoint.SpatialReferenceId");
			}
		}
#endif
		// Skipping already declared method Windows.Devices.Geolocation.Geopoint.Geopoint(Windows.Devices.Geolocation.BasicGeoposition)
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.Geopoint(Windows.Devices.Geolocation.BasicGeoposition)
#if false || __IOS__ || IS_UNIT_TESTS || false || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__IOS__", "IS_UNIT_TESTS", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public Geopoint(global::Windows.Devices.Geolocation.BasicGeoposition position, global::Windows.Devices.Geolocation.AltitudeReferenceSystem altitudeReferenceSystem)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Geolocation.Geopoint", "Geopoint.Geopoint(BasicGeoposition position, AltitudeReferenceSystem altitudeReferenceSystem)");
		}
#endif
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.Geopoint(Windows.Devices.Geolocation.BasicGeoposition, Windows.Devices.Geolocation.AltitudeReferenceSystem)
#if false || __IOS__ || IS_UNIT_TESTS || false || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__IOS__", "IS_UNIT_TESTS", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public Geopoint(global::Windows.Devices.Geolocation.BasicGeoposition position, global::Windows.Devices.Geolocation.AltitudeReferenceSystem altitudeReferenceSystem, uint spatialReferenceId)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Geolocation.Geopoint", "Geopoint.Geopoint(BasicGeoposition position, AltitudeReferenceSystem altitudeReferenceSystem, uint spatialReferenceId)");
		}
#endif
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.Geopoint(Windows.Devices.Geolocation.BasicGeoposition, Windows.Devices.Geolocation.AltitudeReferenceSystem, uint)
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.FromAbi(nint)
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.operator ==(Windows.Devices.Geolocation.Geopoint, Windows.Devices.Geolocation.Geopoint)
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.operator !=(Windows.Devices.Geolocation.Geopoint, Windows.Devices.Geolocation.Geopoint)
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.Equals(Windows.Devices.Geolocation.Geopoint)
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.Equals(object)
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.GetHashCode()
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.Windows.Devices.Geolocation.IGeoshape.AltitudeReferenceSystem.get
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.Windows.Devices.Geolocation.IGeoshape.GeoshapeType.get
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.Windows.Devices.Geolocation.IGeoshape.SpatialReferenceId.get
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.AltitudeReferenceSystem.get
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.GeoshapeType.get
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.Position.get
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.SpatialReferenceId.get
		// Forced skipping of method Windows.Devices.Geolocation.Geopoint.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
		// Processing: Windows.Devices.Geolocation.IGeoshape
	}
}
