// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.Spi
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class SpiConnectionSettings
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int ChipSelectLine
		{
			get
			{
				throw new global::System.NotImplementedException("The member int SpiConnectionSettings.ChipSelectLine is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20SpiConnectionSettings.ChipSelectLine");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Spi.SpiConnectionSettings", "int SpiConnectionSettings.ChipSelectLine");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int ClockFrequency
		{
			get
			{
				throw new global::System.NotImplementedException("The member int SpiConnectionSettings.ClockFrequency is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20SpiConnectionSettings.ClockFrequency");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Spi.SpiConnectionSettings", "int SpiConnectionSettings.ClockFrequency");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int DataBitLength
		{
			get
			{
				throw new global::System.NotImplementedException("The member int SpiConnectionSettings.DataBitLength is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20SpiConnectionSettings.DataBitLength");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Spi.SpiConnectionSettings", "int SpiConnectionSettings.DataBitLength");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Spi.SpiMode Mode
		{
			get
			{
				throw new global::System.NotImplementedException("The member SpiMode SpiConnectionSettings.Mode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=SpiMode%20SpiConnectionSettings.Mode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Spi.SpiConnectionSettings", "SpiMode SpiConnectionSettings.Mode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Spi.SpiSharingMode SharingMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member SpiSharingMode SpiConnectionSettings.SharingMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=SpiSharingMode%20SpiConnectionSettings.SharingMode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Spi.SpiConnectionSettings", "SpiSharingMode SpiConnectionSettings.SharingMode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public SpiConnectionSettings(int chipSelectLine)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Spi.SpiConnectionSettings", "SpiConnectionSettings.SpiConnectionSettings(int chipSelectLine)");
		}
#endif
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.SpiConnectionSettings(int)
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.FromAbi(nint)
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.operator ==(Windows.Devices.Spi.SpiConnectionSettings, Windows.Devices.Spi.SpiConnectionSettings)
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.operator !=(Windows.Devices.Spi.SpiConnectionSettings, Windows.Devices.Spi.SpiConnectionSettings)
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.Equals(Windows.Devices.Spi.SpiConnectionSettings)
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.Equals(object)
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.GetHashCode()
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.ChipSelectLine.get
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.ChipSelectLine.set
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.ClockFrequency.get
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.ClockFrequency.set
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.DataBitLength.get
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.DataBitLength.set
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.Mode.get
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.Mode.set
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.SharingMode.get
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.SharingMode.set
		// Forced skipping of method Windows.Devices.Spi.SpiConnectionSettings.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
