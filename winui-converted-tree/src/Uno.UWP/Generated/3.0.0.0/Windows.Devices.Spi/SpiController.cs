// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.Spi
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class SpiController
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal SpiController()
		{
		}
#endif
		// Forced skipping of method Windows.Devices.Spi.SpiController.As<I>()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Spi.SpiController> GetDefaultAsync()
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<SpiController> SpiController.GetDefaultAsync() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CSpiController%3E%20SpiController.GetDefaultAsync%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Spi.SpiController>> GetControllersAsync(global::Windows.Devices.Spi.Provider.ISpiProvider provider)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<IReadOnlyList<SpiController>> SpiController.GetControllersAsync(ISpiProvider provider) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CIReadOnlyList%3CSpiController%3E%3E%20SpiController.GetControllersAsync%28ISpiProvider%20provider%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Spi.SpiController.FromAbi(nint)
		// Forced skipping of method Windows.Devices.Spi.SpiController.operator ==(Windows.Devices.Spi.SpiController, Windows.Devices.Spi.SpiController)
		// Forced skipping of method Windows.Devices.Spi.SpiController.operator !=(Windows.Devices.Spi.SpiController, Windows.Devices.Spi.SpiController)
		// Forced skipping of method Windows.Devices.Spi.SpiController.Equals(Windows.Devices.Spi.SpiController)
		// Forced skipping of method Windows.Devices.Spi.SpiController.Equals(object)
		// Forced skipping of method Windows.Devices.Spi.SpiController.GetHashCode()
		// Forced skipping of method Windows.Devices.Spi.SpiController.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Devices.Spi.SpiController.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Devices.Spi.SpiController.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Devices.Spi.SpiController.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Spi.SpiDevice GetDevice(global::Windows.Devices.Spi.SpiConnectionSettings settings)
		{
			throw new global::System.NotImplementedException("The member SpiDevice SpiController.GetDevice(SpiConnectionSettings settings) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=SpiDevice%20SpiController.GetDevice%28SpiConnectionSettings%20settings%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Spi.SpiController.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
