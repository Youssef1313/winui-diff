// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.Spi
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class SpiDevice : global::System.IDisposable
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal SpiDevice()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Spi.SpiConnectionSettings ConnectionSettings
		{
			get
			{
				throw new global::System.NotImplementedException("The member SpiConnectionSettings SpiDevice.ConnectionSettings is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=SpiConnectionSettings%20SpiDevice.ConnectionSettings");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string DeviceId
		{
			get
			{
				throw new global::System.NotImplementedException("The member string SpiDevice.DeviceId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20SpiDevice.DeviceId");
			}
		}
#endif
		// Forced skipping of method Windows.Devices.Spi.SpiDevice.As<I>()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static string GetDeviceSelector()
		{
			throw new global::System.NotImplementedException("The member string SpiDevice.GetDeviceSelector() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20SpiDevice.GetDeviceSelector%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static string GetDeviceSelector(string friendlyName)
		{
			throw new global::System.NotImplementedException("The member string SpiDevice.GetDeviceSelector(string friendlyName) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20SpiDevice.GetDeviceSelector%28string%20friendlyName%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Devices.Spi.SpiBusInfo GetBusInfo(string busId)
		{
			throw new global::System.NotImplementedException("The member SpiBusInfo SpiDevice.GetBusInfo(string busId) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=SpiBusInfo%20SpiDevice.GetBusInfo%28string%20busId%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Spi.SpiDevice> FromIdAsync(string busId, global::Windows.Devices.Spi.SpiConnectionSettings settings)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<SpiDevice> SpiDevice.FromIdAsync(string busId, SpiConnectionSettings settings) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CSpiDevice%3E%20SpiDevice.FromIdAsync%28string%20busId%2C%20SpiConnectionSettings%20settings%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Spi.SpiDevice.FromAbi(nint)
		// Forced skipping of method Windows.Devices.Spi.SpiDevice.operator ==(Windows.Devices.Spi.SpiDevice, Windows.Devices.Spi.SpiDevice)
		// Forced skipping of method Windows.Devices.Spi.SpiDevice.operator !=(Windows.Devices.Spi.SpiDevice, Windows.Devices.Spi.SpiDevice)
		// Forced skipping of method Windows.Devices.Spi.SpiDevice.Equals(Windows.Devices.Spi.SpiDevice)
		// Forced skipping of method Windows.Devices.Spi.SpiDevice.Equals(object)
		// Forced skipping of method Windows.Devices.Spi.SpiDevice.GetHashCode()
		// Forced skipping of method Windows.Devices.Spi.SpiDevice.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Devices.Spi.SpiDevice.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Devices.Spi.SpiDevice.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Devices.Spi.SpiDevice.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Write(byte[] buffer)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Spi.SpiDevice", "void SpiDevice.Write(byte[] buffer)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Read(byte[] buffer)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Spi.SpiDevice", "void SpiDevice.Read(byte[] buffer)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void TransferSequential(byte[] writeBuffer, byte[] readBuffer)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Spi.SpiDevice", "void SpiDevice.TransferSequential(byte[] writeBuffer, byte[] readBuffer)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void TransferFullDuplex(byte[] writeBuffer, byte[] readBuffer)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Spi.SpiDevice", "void SpiDevice.TransferFullDuplex(byte[] writeBuffer, byte[] readBuffer)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Dispose()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Spi.SpiDevice", "void SpiDevice.Dispose()");
		}
#endif
		// Forced skipping of method Windows.Devices.Spi.SpiDevice.ConnectionSettings.get
		// Forced skipping of method Windows.Devices.Spi.SpiDevice.DeviceId.get
		// Forced skipping of method Windows.Devices.Spi.SpiDevice.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
		// Processing: System.IDisposable
	}
}
