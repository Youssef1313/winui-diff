// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.System
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public static partial class TimeZoneSettings
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static bool CanChangeTimeZone
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool TimeZoneSettings.CanChangeTimeZone is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20TimeZoneSettings.CanChangeTimeZone");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static string CurrentTimeZoneDisplayName
		{
			get
			{
				throw new global::System.NotImplementedException("The member string TimeZoneSettings.CurrentTimeZoneDisplayName is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20TimeZoneSettings.CurrentTimeZoneDisplayName");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::System.Collections.Generic.IReadOnlyList<string> SupportedTimeZoneDisplayNames
		{
			get
			{
				throw new global::System.NotImplementedException("The member IReadOnlyList<string> TimeZoneSettings.SupportedTimeZoneDisplayNames is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3Cstring%3E%20TimeZoneSettings.SupportedTimeZoneDisplayNames");
			}
		}
#endif
		// Forced skipping of method Windows.System.TimeZoneSettings.As<I>()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static void ChangeTimeZoneByDisplayName(string timeZoneDisplayName)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.System.TimeZoneSettings", "void TimeZoneSettings.ChangeTimeZoneByDisplayName(string timeZoneDisplayName)");
		}
#endif
		// Forced skipping of method Windows.System.TimeZoneSettings.CanChangeTimeZone.get
		// Forced skipping of method Windows.System.TimeZoneSettings.CurrentTimeZoneDisplayName.get
		// Forced skipping of method Windows.System.TimeZoneSettings.SupportedTimeZoneDisplayNames.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::Windows.System.AutoUpdateTimeZoneStatus> AutoUpdateTimeZoneAsync(global::System.TimeSpan timeout)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<AutoUpdateTimeZoneStatus> TimeZoneSettings.AutoUpdateTimeZoneAsync(TimeSpan timeout) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CAutoUpdateTimeZoneStatus%3E%20TimeZoneSettings.AutoUpdateTimeZoneAsync%28TimeSpan%20timeout%29");
		}
#endif
	}
}
