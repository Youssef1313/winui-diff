// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.UI.Composition.Scenes
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class ScenePbrMaterial : global::Windows.UI.Composition.Scenes.SceneMaterial
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public float AlphaCutoff
		{
			get
			{
				throw new global::System.NotImplementedException("The member float ScenePbrMaterial.AlphaCutoff is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=float%20ScenePbrMaterial.AlphaCutoff");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Composition.Scenes.ScenePbrMaterial", "float ScenePbrMaterial.AlphaCutoff");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Composition.Scenes.SceneAlphaMode AlphaMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member SceneAlphaMode ScenePbrMaterial.AlphaMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=SceneAlphaMode%20ScenePbrMaterial.AlphaMode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Composition.Scenes.ScenePbrMaterial", "SceneAlphaMode ScenePbrMaterial.AlphaMode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Numerics.Vector3 EmissiveFactor
		{
			get
			{
				throw new global::System.NotImplementedException("The member Vector3 ScenePbrMaterial.EmissiveFactor is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Vector3%20ScenePbrMaterial.EmissiveFactor");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Composition.Scenes.ScenePbrMaterial", "Vector3 ScenePbrMaterial.EmissiveFactor");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Composition.Scenes.SceneMaterialInput EmissiveInput
		{
			get
			{
				throw new global::System.NotImplementedException("The member SceneMaterialInput ScenePbrMaterial.EmissiveInput is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=SceneMaterialInput%20ScenePbrMaterial.EmissiveInput");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Composition.Scenes.ScenePbrMaterial", "SceneMaterialInput ScenePbrMaterial.EmissiveInput");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsDoubleSided
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool ScenePbrMaterial.IsDoubleSided is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20ScenePbrMaterial.IsDoubleSided");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Composition.Scenes.ScenePbrMaterial", "bool ScenePbrMaterial.IsDoubleSided");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Composition.Scenes.SceneMaterialInput NormalInput
		{
			get
			{
				throw new global::System.NotImplementedException("The member SceneMaterialInput ScenePbrMaterial.NormalInput is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=SceneMaterialInput%20ScenePbrMaterial.NormalInput");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Composition.Scenes.ScenePbrMaterial", "SceneMaterialInput ScenePbrMaterial.NormalInput");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public float NormalScale
		{
			get
			{
				throw new global::System.NotImplementedException("The member float ScenePbrMaterial.NormalScale is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=float%20ScenePbrMaterial.NormalScale");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Composition.Scenes.ScenePbrMaterial", "float ScenePbrMaterial.NormalScale");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Composition.Scenes.SceneMaterialInput OcclusionInput
		{
			get
			{
				throw new global::System.NotImplementedException("The member SceneMaterialInput ScenePbrMaterial.OcclusionInput is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=SceneMaterialInput%20ScenePbrMaterial.OcclusionInput");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Composition.Scenes.ScenePbrMaterial", "SceneMaterialInput ScenePbrMaterial.OcclusionInput");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public float OcclusionStrength
		{
			get
			{
				throw new global::System.NotImplementedException("The member float ScenePbrMaterial.OcclusionStrength is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=float%20ScenePbrMaterial.OcclusionStrength");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Composition.Scenes.ScenePbrMaterial", "float ScenePbrMaterial.OcclusionStrength");
			}
		}
#endif
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.FromAbi(nint)
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.ScenePbrMaterial(WinRT.IObjectReference)
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.operator ==(Windows.UI.Composition.Scenes.ScenePbrMaterial, Windows.UI.Composition.Scenes.ScenePbrMaterial)
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.operator !=(Windows.UI.Composition.Scenes.ScenePbrMaterial, Windows.UI.Composition.Scenes.ScenePbrMaterial)
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.Equals(Windows.UI.Composition.Scenes.ScenePbrMaterial)
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.Equals(object)
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.GetHashCode()
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.ScenePbrMaterial(WinRT.DerivedComposed)
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.AlphaCutoff.get
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.AlphaCutoff.set
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.AlphaMode.get
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.AlphaMode.set
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.EmissiveFactor.get
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.EmissiveFactor.set
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.EmissiveInput.get
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.EmissiveInput.set
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.IsDoubleSided.get
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.IsDoubleSided.set
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.NormalInput.get
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.NormalInput.set
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.NormalScale.get
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.NormalScale.set
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.OcclusionInput.get
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.OcclusionInput.set
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.OcclusionStrength.get
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.OcclusionStrength.set
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.IsOverridableInterface(System.Guid)
		// Forced skipping of method Windows.UI.Composition.Scenes.ScenePbrMaterial.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
