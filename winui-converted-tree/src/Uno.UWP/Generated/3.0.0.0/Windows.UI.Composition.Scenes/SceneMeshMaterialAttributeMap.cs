// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.UI.Composition.Scenes
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class SceneMeshMaterialAttributeMap : global::Windows.UI.Composition.Scenes.SceneObject, global::System.Collections.Generic.IDictionary<string, global::Windows.UI.Composition.Scenes.SceneAttributeSemantic>, global::System.Collections.Generic.ICollection<global::System.Collections.Generic.KeyValuePair<string, global::Windows.UI.Composition.Scenes.SceneAttributeSemantic>>, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, global::Windows.UI.Composition.Scenes.SceneAttributeSemantic>>, global::System.Collections.IEnumerable
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal SceneMeshMaterialAttributeMap()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.ICollection<string> Keys
		{
			get
			{
				throw new global::System.NotImplementedException("The member ICollection<string> SceneMeshMaterialAttributeMap.Keys is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ICollection%3Cstring%3E%20SceneMeshMaterialAttributeMap.Keys");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.ICollection<global::Windows.UI.Composition.Scenes.SceneAttributeSemantic> Values
		{
			get
			{
				throw new global::System.NotImplementedException("The member ICollection<SceneAttributeSemantic> SceneMeshMaterialAttributeMap.Values is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ICollection%3CSceneAttributeSemantic%3E%20SceneMeshMaterialAttributeMap.Values");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int Count
		{
			get
			{
				throw new global::System.NotImplementedException("The member int SceneMeshMaterialAttributeMap.Count is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20SceneMeshMaterialAttributeMap.Count");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsReadOnly
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool SceneMeshMaterialAttributeMap.IsReadOnly is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SceneMeshMaterialAttributeMap.IsReadOnly");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Composition.Scenes.SceneAttributeSemantic this[string key]
		{
			get
			{
				throw new global::System.NotImplementedException("The member SceneAttributeSemantic SceneMeshMaterialAttributeMap.this[string key] is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=SceneAttributeSemantic%20SceneMeshMaterialAttributeMap.this%5Bstring%20key%5D");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap", "SceneAttributeSemantic SceneMeshMaterialAttributeMap.this[string key]");
			}
		}
#endif
		// Forced skipping of method Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap.FromAbi(nint)
		// Forced skipping of method Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap.operator ==(Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap, Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap)
		// Forced skipping of method Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap.operator !=(Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap, Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap)
		// Forced skipping of method Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap.Equals(Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap)
		// Forced skipping of method Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap.Equals(object)
		// Forced skipping of method Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap.GetHashCode()
		// Forced skipping of method Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap.Keys.get
		// Forced skipping of method Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap.Values.get
		// Forced skipping of method Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap.Count.get
		// Forced skipping of method Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap.IsReadOnly.get
		// Forced skipping of method Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap.this[string].get
		// Forced skipping of method Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap.this[string].set
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Add(string key, global::Windows.UI.Composition.Scenes.SceneAttributeSemantic value)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap", "void SceneMeshMaterialAttributeMap.Add(string key, SceneAttributeSemantic value)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool ContainsKey(string key)
		{
			throw new global::System.NotImplementedException("The member bool SceneMeshMaterialAttributeMap.ContainsKey(string key) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SceneMeshMaterialAttributeMap.ContainsKey%28string%20key%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool Remove(string key)
		{
			throw new global::System.NotImplementedException("The member bool SceneMeshMaterialAttributeMap.Remove(string key) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SceneMeshMaterialAttributeMap.Remove%28string%20key%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool TryGetValue(string key, out global::Windows.UI.Composition.Scenes.SceneAttributeSemantic value)
		{
			throw new global::System.NotImplementedException("The member bool SceneMeshMaterialAttributeMap.TryGetValue(string key, out SceneAttributeSemantic value) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SceneMeshMaterialAttributeMap.TryGetValue%28string%20key%2C%20out%20SceneAttributeSemantic%20value%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Add(global::System.Collections.Generic.KeyValuePair<string, global::Windows.UI.Composition.Scenes.SceneAttributeSemantic> item)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap", "void SceneMeshMaterialAttributeMap.Add(KeyValuePair<string, SceneAttributeSemantic> item)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Clear()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap", "void SceneMeshMaterialAttributeMap.Clear()");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool Contains(global::System.Collections.Generic.KeyValuePair<string, global::Windows.UI.Composition.Scenes.SceneAttributeSemantic> item)
		{
			throw new global::System.NotImplementedException("The member bool SceneMeshMaterialAttributeMap.Contains(KeyValuePair<string, SceneAttributeSemantic> item) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20SceneMeshMaterialAttributeMap.Contains%28KeyValuePair%3Cstring%2C%20SceneAttributeSemantic%3E%20item%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void CopyTo(global::System.Collections.Generic.KeyValuePair<string, global::Windows.UI.Composition.Scenes.SceneAttributeSemantic>[] array, int arrayIndex)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap", "void SceneMeshMaterialAttributeMap.CopyTo(KeyValuePair<string, SceneAttributeSemantic>[] array, int arrayIndex)");
		}
#endif
		// Forced skipping of method Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, Windows.UI.Composition.Scenes.SceneAttributeSemantic>>.Remove(System.Collections.Generic.KeyValuePair<string, Windows.UI.Composition.Scenes.SceneAttributeSemantic>)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<string, global::Windows.UI.Composition.Scenes.SceneAttributeSemantic>> GetEnumerator()
		{
			throw new global::System.NotImplementedException("The member IEnumerator<KeyValuePair<string, SceneAttributeSemantic>> SceneMeshMaterialAttributeMap.GetEnumerator() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IEnumerator%3CKeyValuePair%3Cstring%2C%20SceneAttributeSemantic%3E%3E%20SceneMeshMaterialAttributeMap.GetEnumerator%28%29");
		}
#endif
		// Forced skipping of method Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap.System.Collections.IEnumerable.GetEnumerator()
		// Forced skipping of method Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap.IsOverridableInterface(System.Guid)
		// Forced skipping of method Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
		// Processing: System.Collections.Generic.IDictionary<string, Windows.UI.Composition.Scenes.SceneAttributeSemantic>
		// Processing: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, Windows.UI.Composition.Scenes.SceneAttributeSemantic>>
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		// DeclaringType: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, Windows.UI.Composition.Scenes.SceneAttributeSemantic>>
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool Remove(global::System.Collections.Generic.KeyValuePair<string, global::Windows.UI.Composition.Scenes.SceneAttributeSemantic> item)
		{
			throw new global::System.NotSupportedException();
		}
#endif
		// Processing: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, Windows.UI.Composition.Scenes.SceneAttributeSemantic>>
		// Processing: System.Collections.IEnumerable
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		// DeclaringType: System.Collections.IEnumerable
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		 global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
		{
			throw new global::System.NotSupportedException();
		}
#endif
	}
}
