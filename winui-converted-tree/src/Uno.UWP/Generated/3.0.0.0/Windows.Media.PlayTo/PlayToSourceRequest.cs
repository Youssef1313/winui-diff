// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Media.PlayTo
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class PlayToSourceRequest
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal PlayToSourceRequest()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.DateTimeOffset Deadline
		{
			get
			{
				throw new global::System.NotImplementedException("The member DateTimeOffset PlayToSourceRequest.Deadline is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=DateTimeOffset%20PlayToSourceRequest.Deadline");
			}
		}
#endif
		// Forced skipping of method Windows.Media.PlayTo.PlayToSourceRequest.FromAbi(nint)
		// Forced skipping of method Windows.Media.PlayTo.PlayToSourceRequest.operator ==(Windows.Media.PlayTo.PlayToSourceRequest, Windows.Media.PlayTo.PlayToSourceRequest)
		// Forced skipping of method Windows.Media.PlayTo.PlayToSourceRequest.operator !=(Windows.Media.PlayTo.PlayToSourceRequest, Windows.Media.PlayTo.PlayToSourceRequest)
		// Forced skipping of method Windows.Media.PlayTo.PlayToSourceRequest.Equals(Windows.Media.PlayTo.PlayToSourceRequest)
		// Forced skipping of method Windows.Media.PlayTo.PlayToSourceRequest.Equals(object)
		// Forced skipping of method Windows.Media.PlayTo.PlayToSourceRequest.GetHashCode()
		// Forced skipping of method Windows.Media.PlayTo.PlayToSourceRequest.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Media.PlayTo.PlayToSourceRequest.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Media.PlayTo.PlayToSourceRequest.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Media.PlayTo.PlayToSourceRequest.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void DisplayErrorString(string errorString)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.PlayTo.PlayToSourceRequest", "void PlayToSourceRequest.DisplayErrorString(string errorString)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Media.PlayTo.PlayToSourceDeferral GetDeferral()
		{
			throw new global::System.NotImplementedException("The member PlayToSourceDeferral PlayToSourceRequest.GetDeferral() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=PlayToSourceDeferral%20PlayToSourceRequest.GetDeferral%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetSource(global::Windows.Media.PlayTo.PlayToSource value)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.PlayTo.PlayToSourceRequest", "void PlayToSourceRequest.SetSource(PlayToSource value)");
		}
#endif
		// Forced skipping of method Windows.Media.PlayTo.PlayToSourceRequest.Deadline.get
		// Forced skipping of method Windows.Media.PlayTo.PlayToSourceRequest.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
