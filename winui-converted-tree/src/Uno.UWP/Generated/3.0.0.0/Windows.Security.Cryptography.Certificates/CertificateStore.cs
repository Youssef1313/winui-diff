// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Security.Cryptography.Certificates
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class CertificateStore
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal CertificateStore()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string Name
		{
			get
			{
				throw new global::System.NotImplementedException("The member string CertificateStore.Name is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20CertificateStore.Name");
			}
		}
#endif
		// Forced skipping of method Windows.Security.Cryptography.Certificates.CertificateStore.FromAbi(nint)
		// Forced skipping of method Windows.Security.Cryptography.Certificates.CertificateStore.operator ==(Windows.Security.Cryptography.Certificates.CertificateStore, Windows.Security.Cryptography.Certificates.CertificateStore)
		// Forced skipping of method Windows.Security.Cryptography.Certificates.CertificateStore.operator !=(Windows.Security.Cryptography.Certificates.CertificateStore, Windows.Security.Cryptography.Certificates.CertificateStore)
		// Forced skipping of method Windows.Security.Cryptography.Certificates.CertificateStore.Equals(Windows.Security.Cryptography.Certificates.CertificateStore)
		// Forced skipping of method Windows.Security.Cryptography.Certificates.CertificateStore.Equals(object)
		// Forced skipping of method Windows.Security.Cryptography.Certificates.CertificateStore.GetHashCode()
		// Forced skipping of method Windows.Security.Cryptography.Certificates.CertificateStore.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.CertificateStore.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.CertificateStore.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.CertificateStore.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Add(global::Windows.Security.Cryptography.Certificates.Certificate certificate)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Security.Cryptography.Certificates.CertificateStore", "void CertificateStore.Add(Certificate certificate)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Delete(global::Windows.Security.Cryptography.Certificates.Certificate certificate)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Security.Cryptography.Certificates.CertificateStore", "void CertificateStore.Delete(Certificate certificate)");
		}
#endif
		// Forced skipping of method Windows.Security.Cryptography.Certificates.CertificateStore.Name.get
		// Forced skipping of method Windows.Security.Cryptography.Certificates.CertificateStore.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
