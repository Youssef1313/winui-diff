// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.Spi.Provider
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class ProviderSpiConnectionSettings
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int ChipSelectLine
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ProviderSpiConnectionSettings.ChipSelectLine is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ProviderSpiConnectionSettings.ChipSelectLine");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings", "int ProviderSpiConnectionSettings.ChipSelectLine");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int ClockFrequency
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ProviderSpiConnectionSettings.ClockFrequency is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ProviderSpiConnectionSettings.ClockFrequency");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings", "int ProviderSpiConnectionSettings.ClockFrequency");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int DataBitLength
		{
			get
			{
				throw new global::System.NotImplementedException("The member int ProviderSpiConnectionSettings.DataBitLength is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20ProviderSpiConnectionSettings.DataBitLength");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings", "int ProviderSpiConnectionSettings.DataBitLength");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Spi.Provider.ProviderSpiMode Mode
		{
			get
			{
				throw new global::System.NotImplementedException("The member ProviderSpiMode ProviderSpiConnectionSettings.Mode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ProviderSpiMode%20ProviderSpiConnectionSettings.Mode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings", "ProviderSpiMode ProviderSpiConnectionSettings.Mode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Spi.Provider.ProviderSpiSharingMode SharingMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member ProviderSpiSharingMode ProviderSpiConnectionSettings.SharingMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ProviderSpiSharingMode%20ProviderSpiConnectionSettings.SharingMode");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings", "ProviderSpiSharingMode ProviderSpiConnectionSettings.SharingMode");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public ProviderSpiConnectionSettings(int chipSelectLine)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings", "ProviderSpiConnectionSettings.ProviderSpiConnectionSettings(int chipSelectLine)");
		}
#endif
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.ProviderSpiConnectionSettings(int)
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.FromAbi(nint)
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.operator ==(Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings, Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings)
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.operator !=(Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings, Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings)
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.Equals(Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings)
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.Equals(object)
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.GetHashCode()
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.ChipSelectLine.get
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.ChipSelectLine.set
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.ClockFrequency.get
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.ClockFrequency.set
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.DataBitLength.get
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.DataBitLength.set
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.Mode.get
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.Mode.set
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.SharingMode.get
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.SharingMode.set
		// Forced skipping of method Windows.Devices.Spi.Provider.ProviderSpiConnectionSettings.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
