// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Security.Cryptography.Core
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class EncryptedAndAuthenticatedData
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal EncryptedAndAuthenticatedData()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Storage.Streams.IBuffer AuthenticationTag
		{
			get
			{
				throw new global::System.NotImplementedException("The member IBuffer EncryptedAndAuthenticatedData.AuthenticationTag is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IBuffer%20EncryptedAndAuthenticatedData.AuthenticationTag");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Storage.Streams.IBuffer EncryptedData
		{
			get
			{
				throw new global::System.NotImplementedException("The member IBuffer EncryptedAndAuthenticatedData.EncryptedData is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IBuffer%20EncryptedAndAuthenticatedData.EncryptedData");
			}
		}
#endif
		// Forced skipping of method Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData.FromAbi(nint)
		// Forced skipping of method Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData.operator ==(Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData, Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData)
		// Forced skipping of method Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData.operator !=(Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData, Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData)
		// Forced skipping of method Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData.Equals(Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData)
		// Forced skipping of method Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData.Equals(object)
		// Forced skipping of method Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData.GetHashCode()
		// Forced skipping of method Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData.AuthenticationTag.get
		// Forced skipping of method Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData.EncryptedData.get
		// Forced skipping of method Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
