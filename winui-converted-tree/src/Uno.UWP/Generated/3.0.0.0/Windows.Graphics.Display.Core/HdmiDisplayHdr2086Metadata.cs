// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Graphics.Display.Core
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial struct HdmiDisplayHdr2086Metadata
	{
		// Forced skipping of method Windows.Graphics.Display.Core.HdmiDisplayHdr2086Metadata.HdmiDisplayHdr2086Metadata()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public HdmiDisplayHdr2086Metadata(ushort _RedPrimaryX, ushort _RedPrimaryY, ushort _GreenPrimaryX, ushort _GreenPrimaryY, ushort _BluePrimaryX, ushort _BluePrimaryY, ushort _WhitePointX, ushort _WhitePointY, ushort _MaxMasteringLuminance, ushort _MinMasteringLuminance, ushort _MaxContentLightLevel, ushort _MaxFrameAverageLightLevel)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Graphics.Display.Core.HdmiDisplayHdr2086Metadata", "HdmiDisplayHdr2086Metadata.HdmiDisplayHdr2086Metadata(ushort _RedPrimaryX, ushort _RedPrimaryY, ushort _GreenPrimaryX, ushort _GreenPrimaryY, ushort _BluePrimaryX, ushort _BluePrimaryY, ushort _WhitePointX, ushort _WhitePointY, ushort _MaxMasteringLuminance, ushort _MinMasteringLuminance, ushort _MaxContentLightLevel, ushort _MaxFrameAverageLightLevel)");
		}
#endif
		// Forced skipping of method Windows.Graphics.Display.Core.HdmiDisplayHdr2086Metadata.HdmiDisplayHdr2086Metadata(ushort, ushort, ushort, ushort, ushort, ushort, ushort, ushort, ushort, ushort, ushort, ushort)
		// Forced skipping of method Windows.Graphics.Display.Core.HdmiDisplayHdr2086Metadata.operator ==(Windows.Graphics.Display.Core.HdmiDisplayHdr2086Metadata, Windows.Graphics.Display.Core.HdmiDisplayHdr2086Metadata)
		// Forced skipping of method Windows.Graphics.Display.Core.HdmiDisplayHdr2086Metadata.operator !=(Windows.Graphics.Display.Core.HdmiDisplayHdr2086Metadata, Windows.Graphics.Display.Core.HdmiDisplayHdr2086Metadata)
		// Forced skipping of method Windows.Graphics.Display.Core.HdmiDisplayHdr2086Metadata.Equals(Windows.Graphics.Display.Core.HdmiDisplayHdr2086Metadata)
		// Forced skipping of method Windows.Graphics.Display.Core.HdmiDisplayHdr2086Metadata.Equals(object)
		// Forced skipping of method Windows.Graphics.Display.Core.HdmiDisplayHdr2086Metadata.GetHashCode()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public ushort RedPrimaryX;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public ushort RedPrimaryY;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public ushort GreenPrimaryX;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public ushort GreenPrimaryY;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public ushort BluePrimaryX;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public ushort BluePrimaryY;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public ushort WhitePointX;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public ushort WhitePointY;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public ushort MaxMasteringLuminance;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public ushort MinMasteringLuminance;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public ushort MaxContentLightLevel;
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		public ushort MaxFrameAverageLightLevel;
#endif
	}
}
