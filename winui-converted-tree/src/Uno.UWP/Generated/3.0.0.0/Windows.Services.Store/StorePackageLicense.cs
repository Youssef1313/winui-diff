// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Services.Store
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class StorePackageLicense : global::System.IDisposable
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal StorePackageLicense()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsValid
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool StorePackageLicense.IsValid is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20StorePackageLicense.IsValid");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.ApplicationModel.Package Package
		{
			get
			{
				throw new global::System.NotImplementedException("The member Package StorePackageLicense.Package is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Package%20StorePackageLicense.Package");
			}
		}
#endif
		// Forced skipping of method Windows.Services.Store.StorePackageLicense.FromAbi(nint)
		// Forced skipping of method Windows.Services.Store.StorePackageLicense.operator ==(Windows.Services.Store.StorePackageLicense, Windows.Services.Store.StorePackageLicense)
		// Forced skipping of method Windows.Services.Store.StorePackageLicense.operator !=(Windows.Services.Store.StorePackageLicense, Windows.Services.Store.StorePackageLicense)
		// Forced skipping of method Windows.Services.Store.StorePackageLicense.Equals(Windows.Services.Store.StorePackageLicense)
		// Forced skipping of method Windows.Services.Store.StorePackageLicense.Equals(object)
		// Forced skipping of method Windows.Services.Store.StorePackageLicense.GetHashCode()
		// Forced skipping of method Windows.Services.Store.StorePackageLicense.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Services.Store.StorePackageLicense.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Services.Store.StorePackageLicense.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Services.Store.StorePackageLicense.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void ReleaseLicense()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Store.StorePackageLicense", "void StorePackageLicense.ReleaseLicense()");
		}
#endif
		// Forced skipping of method Windows.Services.Store.StorePackageLicense.LicenseLost.add
		// Forced skipping of method Windows.Services.Store.StorePackageLicense.LicenseLost.remove
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Dispose()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Store.StorePackageLicense", "void StorePackageLicense.Dispose()");
		}
#endif
		// Forced skipping of method Windows.Services.Store.StorePackageLicense.IsValid.get
		// Forced skipping of method Windows.Services.Store.StorePackageLicense.Package.get
		// Forced skipping of method Windows.Services.Store.StorePackageLicense.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Services.Store.StorePackageLicense, object> LicenseLost
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Store.StorePackageLicense", "event TypedEventHandler<StorePackageLicense, object> StorePackageLicense.LicenseLost");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Services.Store.StorePackageLicense", "event TypedEventHandler<StorePackageLicense, object> StorePackageLicense.LicenseLost");
			}
		}
#endif
		// Processing: System.IDisposable
	}
}
