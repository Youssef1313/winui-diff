// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Media.Capture
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class AppCaptureState
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal AppCaptureState()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsHistoricalCaptureEnabled
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool AppCaptureState.IsHistoricalCaptureEnabled is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20AppCaptureState.IsHistoricalCaptureEnabled");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsTargetRunning
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool AppCaptureState.IsTargetRunning is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20AppCaptureState.IsTargetRunning");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint MicrophoneCaptureError
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint AppCaptureState.MicrophoneCaptureError is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20AppCaptureState.MicrophoneCaptureError");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Media.Capture.AppCaptureMicrophoneCaptureState MicrophoneCaptureState
		{
			get
			{
				throw new global::System.NotImplementedException("The member AppCaptureMicrophoneCaptureState AppCaptureState.MicrophoneCaptureState is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=AppCaptureMicrophoneCaptureState%20AppCaptureState.MicrophoneCaptureState");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool ShouldCaptureMicrophone
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool AppCaptureState.ShouldCaptureMicrophone is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20AppCaptureState.ShouldCaptureMicrophone");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Capture.AppCaptureState", "bool AppCaptureState.ShouldCaptureMicrophone");
			}
		}
#endif
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.FromAbi(nint)
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.operator ==(Windows.Media.Capture.AppCaptureState, Windows.Media.Capture.AppCaptureState)
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.operator !=(Windows.Media.Capture.AppCaptureState, Windows.Media.Capture.AppCaptureState)
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.Equals(Windows.Media.Capture.AppCaptureState)
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.Equals(object)
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.GetHashCode()
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void RestartMicrophoneCapture()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Capture.AppCaptureState", "void AppCaptureState.RestartMicrophoneCapture()");
		}
#endif
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.CaptureTargetClosed.add
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.CaptureTargetClosed.remove
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.MicrophoneCaptureStateChanged.add
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.MicrophoneCaptureStateChanged.remove
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.IsHistoricalCaptureEnabled.get
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.IsTargetRunning.get
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.MicrophoneCaptureError.get
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.MicrophoneCaptureState.get
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.ShouldCaptureMicrophone.get
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.ShouldCaptureMicrophone.set
		// Forced skipping of method Windows.Media.Capture.AppCaptureState.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Capture.AppCaptureState, object> CaptureTargetClosed
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Capture.AppCaptureState", "event TypedEventHandler<AppCaptureState, object> AppCaptureState.CaptureTargetClosed");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Capture.AppCaptureState", "event TypedEventHandler<AppCaptureState, object> AppCaptureState.CaptureTargetClosed");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Capture.AppCaptureState, global::Windows.Media.Capture.AppCaptureMicrophoneCaptureStateChangedEventArgs> MicrophoneCaptureStateChanged
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Capture.AppCaptureState", "event TypedEventHandler<AppCaptureState, AppCaptureMicrophoneCaptureStateChangedEventArgs> AppCaptureState.MicrophoneCaptureStateChanged");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Capture.AppCaptureState", "event TypedEventHandler<AppCaptureState, AppCaptureMicrophoneCaptureStateChangedEventArgs> AppCaptureState.MicrophoneCaptureStateChanged");
			}
		}
#endif
	}
}
