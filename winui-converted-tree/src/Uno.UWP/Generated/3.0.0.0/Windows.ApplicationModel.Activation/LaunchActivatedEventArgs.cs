// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.ApplicationModel.Activation
{
#if false || false || false || false || false || false || false
	[global::Uno.NotImplemented]
#endif
	public partial class LaunchActivatedEventArgs : global::Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs, global::Windows.ApplicationModel.Activation.IActivatedEventArgs, global::Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs, global::Windows.ApplicationModel.Activation.IPrelaunchActivatedEventArgs, global::Windows.ApplicationModel.Activation.IViewSwitcherProvider, global::Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs2, global::Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		string global::Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs.Arguments
		{
			get
			{
				throw new global::System.NotImplementedException("The member string LaunchActivatedEventArgs.Arguments is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20LaunchActivatedEventArgs.Arguments");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		string global::Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs.TileId
		{
			get
			{
				throw new global::System.NotImplementedException("The member string LaunchActivatedEventArgs.TileId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20LaunchActivatedEventArgs.TileId");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.ApplicationModel.Activation.ActivationKind global::Windows.ApplicationModel.Activation.IActivatedEventArgs.Kind
		{
			get
			{
				throw new global::System.NotImplementedException("The member ActivationKind LaunchActivatedEventArgs.Kind is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ActivationKind%20LaunchActivatedEventArgs.Kind");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.ApplicationModel.Activation.ApplicationExecutionState global::Windows.ApplicationModel.Activation.IActivatedEventArgs.PreviousExecutionState
		{
			get
			{
				throw new global::System.NotImplementedException("The member ApplicationExecutionState LaunchActivatedEventArgs.PreviousExecutionState is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ApplicationExecutionState%20LaunchActivatedEventArgs.PreviousExecutionState");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.ApplicationModel.Activation.SplashScreen global::Windows.ApplicationModel.Activation.IActivatedEventArgs.SplashScreen
		{
			get
			{
				throw new global::System.NotImplementedException("The member SplashScreen LaunchActivatedEventArgs.SplashScreen is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=SplashScreen%20LaunchActivatedEventArgs.SplashScreen");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		int global::Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs.CurrentlyShownApplicationViewId
		{
			get
			{
				throw new global::System.NotImplementedException("The member int LaunchActivatedEventArgs.CurrentlyShownApplicationViewId is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20LaunchActivatedEventArgs.CurrentlyShownApplicationViewId");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		bool global::Windows.ApplicationModel.Activation.IPrelaunchActivatedEventArgs.PrelaunchActivated
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool LaunchActivatedEventArgs.PrelaunchActivated is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20LaunchActivatedEventArgs.PrelaunchActivated");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.UI.ViewManagement.ActivationViewSwitcher global::Windows.ApplicationModel.Activation.IViewSwitcherProvider.ViewSwitcher
		{
			get
			{
				throw new global::System.NotImplementedException("The member ActivationViewSwitcher LaunchActivatedEventArgs.ViewSwitcher is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ActivationViewSwitcher%20LaunchActivatedEventArgs.ViewSwitcher");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.ApplicationModel.Activation.TileActivatedInfo global::Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs2.TileActivatedInfo
		{
			get
			{
				throw new global::System.NotImplementedException("The member TileActivatedInfo LaunchActivatedEventArgs.TileActivatedInfo is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TileActivatedInfo%20LaunchActivatedEventArgs.TileActivatedInfo");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		global::Windows.System.User global::Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser.User
		{
			get
			{
				throw new global::System.NotImplementedException("The member User LaunchActivatedEventArgs.User is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=User%20LaunchActivatedEventArgs.User");
			}
		}
#endif
		// Skipping already declared property Arguments
		// Skipping already declared property CurrentlyShownApplicationViewId
		// Skipping already declared property Kind
		// Skipping already declared property PrelaunchActivated
		// Skipping already declared property PreviousExecutionState
		// Skipping already declared property SplashScreen
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.ApplicationModel.Activation.TileActivatedInfo TileActivatedInfo
		{
			get
			{
				throw new global::System.NotImplementedException("The member TileActivatedInfo LaunchActivatedEventArgs.TileActivatedInfo is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TileActivatedInfo%20LaunchActivatedEventArgs.TileActivatedInfo");
			}
		}
#endif
		// Skipping already declared property TileId
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.System.User User
		{
			get
			{
				throw new global::System.NotImplementedException("The member User LaunchActivatedEventArgs.User is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=User%20LaunchActivatedEventArgs.User");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.ViewManagement.ActivationViewSwitcher ViewSwitcher
		{
			get
			{
				throw new global::System.NotImplementedException("The member ActivationViewSwitcher LaunchActivatedEventArgs.ViewSwitcher is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=ActivationViewSwitcher%20LaunchActivatedEventArgs.ViewSwitcher");
			}
		}
#endif
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.FromAbi(nint)
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.operator ==(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs, Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.operator !=(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs, Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.Equals(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.Equals(object)
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.GetHashCode()
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs.Arguments.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs.TileId.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.Windows.ApplicationModel.Activation.IActivatedEventArgs.Kind.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.Windows.ApplicationModel.Activation.IActivatedEventArgs.PreviousExecutionState.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.Windows.ApplicationModel.Activation.IActivatedEventArgs.SplashScreen.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs.CurrentlyShownApplicationViewId.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.Windows.ApplicationModel.Activation.IPrelaunchActivatedEventArgs.PrelaunchActivated.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.Windows.ApplicationModel.Activation.IViewSwitcherProvider.ViewSwitcher.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs2.TileActivatedInfo.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser.User.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.Arguments.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.CurrentlyShownApplicationViewId.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.Kind.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.PrelaunchActivated.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.PreviousExecutionState.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.SplashScreen.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.TileActivatedInfo.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.TileId.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.User.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.ViewSwitcher.get
		// Forced skipping of method Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
		// Processing: Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs
		// Processing: Windows.ApplicationModel.Activation.IActivatedEventArgs
		// Processing: Windows.ApplicationModel.Activation.IApplicationViewActivatedEventArgs
		// Processing: Windows.ApplicationModel.Activation.IPrelaunchActivatedEventArgs
		// Processing: Windows.ApplicationModel.Activation.IViewSwitcherProvider
		// Processing: Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs2
		// Processing: Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser
	}
}
