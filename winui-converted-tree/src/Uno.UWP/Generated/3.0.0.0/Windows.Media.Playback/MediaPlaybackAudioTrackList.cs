// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Media.Playback
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class MediaPlaybackAudioTrackList : global::System.Collections.Generic.IReadOnlyList<global::Windows.Media.Core.AudioTrack>, global::System.Collections.Generic.IEnumerable<global::Windows.Media.Core.AudioTrack>, global::System.Collections.IEnumerable, global::System.Collections.Generic.IReadOnlyCollection<global::Windows.Media.Core.AudioTrack>, global::Windows.Media.Core.ISingleSelectMediaTrackList
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal MediaPlaybackAudioTrackList()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int Count
		{
			get
			{
				throw new global::System.NotImplementedException("The member int MediaPlaybackAudioTrackList.Count is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20MediaPlaybackAudioTrackList.Count");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Media.Core.AudioTrack this[int index]
		{
			get
			{
				throw new global::System.NotImplementedException("The member AudioTrack MediaPlaybackAudioTrackList.this[int index] is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=AudioTrack%20MediaPlaybackAudioTrackList.this%5Bint%20index%5D");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		int global::Windows.Media.Core.ISingleSelectMediaTrackList.SelectedIndex
		{
			get
			{
				throw new global::System.NotImplementedException("The member int MediaPlaybackAudioTrackList.SelectedIndex is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20MediaPlaybackAudioTrackList.SelectedIndex");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Playback.MediaPlaybackAudioTrackList", "int MediaPlaybackAudioTrackList.SelectedIndex");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int SelectedIndex
		{
			get
			{
				throw new global::System.NotImplementedException("The member int MediaPlaybackAudioTrackList.SelectedIndex is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20MediaPlaybackAudioTrackList.SelectedIndex");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Playback.MediaPlaybackAudioTrackList", "int MediaPlaybackAudioTrackList.SelectedIndex");
			}
		}
#endif
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.FromAbi(nint)
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.operator ==(Windows.Media.Playback.MediaPlaybackAudioTrackList, Windows.Media.Playback.MediaPlaybackAudioTrackList)
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.operator !=(Windows.Media.Playback.MediaPlaybackAudioTrackList, Windows.Media.Playback.MediaPlaybackAudioTrackList)
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.Equals(Windows.Media.Playback.MediaPlaybackAudioTrackList)
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.Equals(object)
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.GetHashCode()
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.WinRT.IWinRTObject.AdditionalTypeData.get
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.Count.get
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.this[int].get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IEnumerator<global::Windows.Media.Core.AudioTrack> GetEnumerator()
		{
			throw new global::System.NotImplementedException("The member IEnumerator<AudioTrack> MediaPlaybackAudioTrackList.GetEnumerator() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IEnumerator%3CAudioTrack%3E%20MediaPlaybackAudioTrackList.GetEnumerator%28%29");
		}
#endif
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.System.Collections.IEnumerable.GetEnumerator()
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.SelectedIndexChanged.add
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.SelectedIndexChanged.remove
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.Windows.Media.Core.ISingleSelectMediaTrackList.SelectedIndexChanged.add
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.Windows.Media.Core.ISingleSelectMediaTrackList.SelectedIndexChanged.remove
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.Windows.Media.Core.ISingleSelectMediaTrackList.SelectedIndex.get
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.Windows.Media.Core.ISingleSelectMediaTrackList.SelectedIndex.set
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.SelectedIndex.get
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.SelectedIndex.set
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
		// Forced skipping of method Windows.Media.Playback.MediaPlaybackAudioTrackList.System.Collections.Generic.IReadOnlyList<Windows.Media.Core.AudioTrack>.get_Item(int)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.ISingleSelectMediaTrackList, object> SelectedIndexChanged
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Playback.MediaPlaybackAudioTrackList", "event TypedEventHandler<ISingleSelectMediaTrackList, object> MediaPlaybackAudioTrackList.SelectedIndexChanged");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Playback.MediaPlaybackAudioTrackList", "event TypedEventHandler<ISingleSelectMediaTrackList, object> MediaPlaybackAudioTrackList.SelectedIndexChanged");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		event global::Windows.Foundation.TypedEventHandler<global::Windows.Media.Core.ISingleSelectMediaTrackList, object> global::Windows.Media.Core.ISingleSelectMediaTrackList.SelectedIndexChanged
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Playback.MediaPlaybackAudioTrackList", "event TypedEventHandler<ISingleSelectMediaTrackList, object> MediaPlaybackAudioTrackList.SelectedIndexChanged");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Media.Playback.MediaPlaybackAudioTrackList", "event TypedEventHandler<ISingleSelectMediaTrackList, object> MediaPlaybackAudioTrackList.SelectedIndexChanged");
			}
		}
#endif
		// Processing: System.Collections.Generic.IReadOnlyList<Windows.Media.Core.AudioTrack>
		// Processing: System.Collections.Generic.IEnumerable<Windows.Media.Core.AudioTrack>
		// Processing: System.Collections.IEnumerable
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		// DeclaringType: System.Collections.IEnumerable
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		 global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
		{
			throw new global::System.NotSupportedException();
		}
#endif
		// Processing: System.Collections.Generic.IReadOnlyCollection<Windows.Media.Core.AudioTrack>
		// Processing: Windows.Media.Core.ISingleSelectMediaTrackList
	}
}
