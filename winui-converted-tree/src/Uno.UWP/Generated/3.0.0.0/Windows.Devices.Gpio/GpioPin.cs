// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.Gpio
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class GpioPin : global::System.IDisposable
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal GpioPin()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.TimeSpan DebounceTimeout
		{
			get
			{
				throw new global::System.NotImplementedException("The member TimeSpan GpioPin.DebounceTimeout is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TimeSpan%20GpioPin.DebounceTimeout");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Gpio.GpioPin", "TimeSpan GpioPin.DebounceTimeout");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int PinNumber
		{
			get
			{
				throw new global::System.NotImplementedException("The member int GpioPin.PinNumber is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20GpioPin.PinNumber");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Gpio.GpioSharingMode SharingMode
		{
			get
			{
				throw new global::System.NotImplementedException("The member GpioSharingMode GpioPin.SharingMode is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=GpioSharingMode%20GpioPin.SharingMode");
			}
		}
#endif
		// Forced skipping of method Windows.Devices.Gpio.GpioPin.FromAbi(nint)
		// Forced skipping of method Windows.Devices.Gpio.GpioPin.operator ==(Windows.Devices.Gpio.GpioPin, Windows.Devices.Gpio.GpioPin)
		// Forced skipping of method Windows.Devices.Gpio.GpioPin.operator !=(Windows.Devices.Gpio.GpioPin, Windows.Devices.Gpio.GpioPin)
		// Forced skipping of method Windows.Devices.Gpio.GpioPin.Equals(Windows.Devices.Gpio.GpioPin)
		// Forced skipping of method Windows.Devices.Gpio.GpioPin.Equals(object)
		// Forced skipping of method Windows.Devices.Gpio.GpioPin.GetHashCode()
		// Forced skipping of method Windows.Devices.Gpio.GpioPin.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Devices.Gpio.GpioPin.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Devices.Gpio.GpioPin.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Devices.Gpio.GpioPin.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsDriveModeSupported(global::Windows.Devices.Gpio.GpioPinDriveMode driveMode)
		{
			throw new global::System.NotImplementedException("The member bool GpioPin.IsDriveModeSupported(GpioPinDriveMode driveMode) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20GpioPin.IsDriveModeSupported%28GpioPinDriveMode%20driveMode%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Gpio.GpioPinDriveMode GetDriveMode()
		{
			throw new global::System.NotImplementedException("The member GpioPinDriveMode GpioPin.GetDriveMode() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=GpioPinDriveMode%20GpioPin.GetDriveMode%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetDriveMode(global::Windows.Devices.Gpio.GpioPinDriveMode value)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Gpio.GpioPin", "void GpioPin.SetDriveMode(GpioPinDriveMode value)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Write(global::Windows.Devices.Gpio.GpioPinValue value)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Gpio.GpioPin", "void GpioPin.Write(GpioPinValue value)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Gpio.GpioPinValue Read()
		{
			throw new global::System.NotImplementedException("The member GpioPinValue GpioPin.Read() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=GpioPinValue%20GpioPin.Read%28%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Gpio.GpioPin.ValueChanged.add
		// Forced skipping of method Windows.Devices.Gpio.GpioPin.ValueChanged.remove
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Dispose()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Gpio.GpioPin", "void GpioPin.Dispose()");
		}
#endif
		// Forced skipping of method Windows.Devices.Gpio.GpioPin.DebounceTimeout.get
		// Forced skipping of method Windows.Devices.Gpio.GpioPin.DebounceTimeout.set
		// Forced skipping of method Windows.Devices.Gpio.GpioPin.PinNumber.get
		// Forced skipping of method Windows.Devices.Gpio.GpioPin.SharingMode.get
		// Forced skipping of method Windows.Devices.Gpio.GpioPin.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.Devices.Gpio.GpioPin, global::Windows.Devices.Gpio.GpioPinValueChangedEventArgs> ValueChanged
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Gpio.GpioPin", "event TypedEventHandler<GpioPin, GpioPinValueChangedEventArgs> GpioPin.ValueChanged");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.Devices.Gpio.GpioPin", "event TypedEventHandler<GpioPin, GpioPinValueChangedEventArgs> GpioPin.ValueChanged");
			}
		}
#endif
		// Processing: System.IDisposable
	}
}
