// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.Devices.Gpio
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class GpioController
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal GpioController()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int PinCount
		{
			get
			{
				throw new global::System.NotImplementedException("The member int GpioController.PinCount is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%20GpioController.PinCount");
			}
		}
#endif
		// Forced skipping of method Windows.Devices.Gpio.GpioController.As<I>()
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Devices.Gpio.GpioController GetDefault()
		{
			throw new global::System.NotImplementedException("The member GpioController GpioController.GetDefault() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=GpioController%20GpioController.GetDefault%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Devices.Gpio.GpioController>> GetControllersAsync(global::Windows.Devices.Gpio.Provider.IGpioProvider provider)
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<IReadOnlyList<GpioController>> GpioController.GetControllersAsync(IGpioProvider provider) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CIReadOnlyList%3CGpioController%3E%3E%20GpioController.GetControllersAsync%28IGpioProvider%20provider%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.IAsyncOperation<global::Windows.Devices.Gpio.GpioController> GetDefaultAsync()
		{
			throw new global::System.NotImplementedException("The member IAsyncOperation<GpioController> GpioController.GetDefaultAsync() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IAsyncOperation%3CGpioController%3E%20GpioController.GetDefaultAsync%28%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Gpio.GpioController.FromAbi(nint)
		// Forced skipping of method Windows.Devices.Gpio.GpioController.operator ==(Windows.Devices.Gpio.GpioController, Windows.Devices.Gpio.GpioController)
		// Forced skipping of method Windows.Devices.Gpio.GpioController.operator !=(Windows.Devices.Gpio.GpioController, Windows.Devices.Gpio.GpioController)
		// Forced skipping of method Windows.Devices.Gpio.GpioController.Equals(Windows.Devices.Gpio.GpioController)
		// Forced skipping of method Windows.Devices.Gpio.GpioController.Equals(object)
		// Forced skipping of method Windows.Devices.Gpio.GpioController.GetHashCode()
		// Forced skipping of method Windows.Devices.Gpio.GpioController.WinRT.IWinRTObject.HasUnwrappableNativeObject.get
		// Forced skipping of method Windows.Devices.Gpio.GpioController.WinRT.IWinRTObject.NativeObject.get
		// Forced skipping of method Windows.Devices.Gpio.GpioController.WinRT.IWinRTObject.QueryInterfaceCache.get
		// Forced skipping of method Windows.Devices.Gpio.GpioController.WinRT.IWinRTObject.AdditionalTypeData.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Gpio.GpioPin OpenPin(int pinNumber)
		{
			throw new global::System.NotImplementedException("The member GpioPin GpioController.OpenPin(int pinNumber) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=GpioPin%20GpioController.OpenPin%28int%20pinNumber%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.Devices.Gpio.GpioPin OpenPin(int pinNumber, global::Windows.Devices.Gpio.GpioSharingMode sharingMode)
		{
			throw new global::System.NotImplementedException("The member GpioPin GpioController.OpenPin(int pinNumber, GpioSharingMode sharingMode) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=GpioPin%20GpioController.OpenPin%28int%20pinNumber%2C%20GpioSharingMode%20sharingMode%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool TryOpenPin(int pinNumber, global::Windows.Devices.Gpio.GpioSharingMode sharingMode, out global::Windows.Devices.Gpio.GpioPin pin, out global::Windows.Devices.Gpio.GpioOpenStatus openStatus)
		{
			throw new global::System.NotImplementedException("The member bool GpioController.TryOpenPin(int pinNumber, GpioSharingMode sharingMode, out GpioPin pin, out GpioOpenStatus openStatus) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20GpioController.TryOpenPin%28int%20pinNumber%2C%20GpioSharingMode%20sharingMode%2C%20out%20GpioPin%20pin%2C%20out%20GpioOpenStatus%20openStatus%29");
		}
#endif
		// Forced skipping of method Windows.Devices.Gpio.GpioController.PinCount.get
		// Forced skipping of method Windows.Devices.Gpio.GpioController.System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref System.Guid, out nint)
	}
}
